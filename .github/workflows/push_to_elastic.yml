name: Push Latest Rules to Production

on:
  push:
    branches:
      - main
    paths:
      - '**/*.toml'
      - 'version.lock.json'
  workflow_dispatch:
    inputs:
      overwrite:
        description: 'Overwrite existing rules'
        required: false
        default: 'true'
      overwrite_exceptions:
        description: 'Overwrite existing exceptions'
        required: false
        default: 'true'
      overwrite_action_connectors:
        description: 'Overwrite existing action connectors'
        required: false
        default: 'true'
      space:
        description: 'Kibana space to use (dev or prod)'
        required: false
        default: 'prod'

jobs:
  sync-to-production:
    runs-on: self-hosted
    env:
      CUSTOM_RULES_DIR: ${{ secrets.CUSTOM_RULES_DIR }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip cache purge
        pip install .[dev]
        pip install lib/kql lib/kibana

    - name: Verify Version Lock Consistency
      run: |
        $diff = git diff --exit-code version.lock.json
        if ($LASTEXITCODE -eq 0) {
          Write-Host "Version lock is consistent. Proceeding with the synchronization."
        } else {
          Write-Host "Version lock inconsistency detected. Aborting the synchronization. Please kick off the manual sync workflow, review, and resolve."
          exit 1
        }
      shell: pwsh

    - name: Export Rules from Kibana
      run: python -m detection_rules kibana export-rules
      env:
        KIBANA_URL: ${{ secrets.KIBANA_URL }}
        KIBANA_USERNAME: ${{ secrets.KIBANA_USERNAME }}
        KIBANA_PASSWORD: ${{ secrets.KIBANA_PASSWORD }}

    - name: Import Rules to Local Repo
      run: python -m detection_rules import-rules-to-repo --directory ${{ env.CUSTOM_RULES_DIR }}

    - name: Export Rules from Repo to NDJSON
      run: python -m detection_rules export-rules-from-repo --outfile ${{ env.CUSTOM_RULES_DIR }}/rules_export.ndjson

    - name: Import Rules to Kibana from NDJSON
      run: |
        FLAGS=""
        if (${{ github.event_name }} -eq "push" -or ${{ inputs.overwrite }} -eq "true") {
          FLAGS="$FLAGS --overwrite"
        }
        if (${{ github.event_name }} -eq "push" -or ${{ inputs.overwrite_exceptions }} -eq "true") {
          FLAGS="$FLAGS --overwrite-exceptions"
        }
        if (${{ github.event_name }} -eq "push" -or ${{ inputs.overwrite_action_connectors }} -eq "true") {
          FLAGS="$FLAGS --overwrite-action-connectors"
        }
        $SPACE = "${{ inputs.space }}"
        $SPACE_FLAG = "--space $SPACE"
        python -m detection_rules kibana $SPACE_FLAG import-rules $FLAGS ${{ env.CUSTOM_RULES_DIR }}/rules_export.ndjson
      shell: pwsh
      env:
        DR_CLOUD_ID: ${{ secrets.ELASTIC_CLOUD_ID }}
        DR_KIBANA_USER: ${{ secrets.ELASTIC_USERNAME }}
        DR_KIBANA_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
