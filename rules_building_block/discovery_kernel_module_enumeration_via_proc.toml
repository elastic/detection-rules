[metadata]
creation_date = "2020/04/12"
integration = ["auditd_manager"]
maturity = "production"
updated_date = "2025/01/10"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They
extend the functionality of the kernel without the need to reboot the system. This identifies attempts to enumerate
information about a kernel module using the /proc/modules filesystem. This filesystem is used by utilities such as lsmod
and kmod to list the available kernel modules.
"""
false_positives = [
    """
    Security tools and device drivers may run these programs in order to enumerate kernel modules. Use of these programs
    by ordinary users is uncommon. These can be exempted by process name or username.
    """,
]
from = "now-119m"
index = ["auditbeat-*", "logs-auditd_manager.auditd-*"]
interval = "60m"
language = "kuery"
license = "Elastic License v2"
name = "Enumeration of Kernel Modules via Proc"
risk_score = 21
rule_id = "80084fa9-8677-4453-8680-b891d3c0c778"
setup = """## Setup

This rule requires the use of the `auditd_manager` integration. `Auditd_manager` is a tool designed to simplify and enhance the management of the audit subsystem in Linux systems. It provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system. The following steps should be executed in order to install and deploy `auditd_manager` on a Linux system.
```
Kibana -->
Management -->
Integrations -->
Auditd Manager -->
Add Auditd Manager
```
`Auditd_manager` subscribes to the kernel and receives events as they occur without any additional configuration. However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.
For this detection rule to trigger, the following additional audit rules are required to be added to the integration:
```
-w /proc/ -p r -k audit_proc
```
Add the newly installed `auditd manager` to an agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
"""
severity = "low"
tags = [
    "Data Source: Auditd Manager",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "new_terms"
query = '''
host.os.type:linux and event.category:file and event.action:"opened-file" and file.path:"/proc/modules" and
not process.name:(python* or chef-client)
'''
note = """## Triage and analysis

> **Disclaimer**:
> This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Enumeration of Kernel Modules via Proc

Loadable Kernel Modules (LKMs) enhance Linux kernel functionality dynamically. The `/proc/modules` file lists these modules, aiding utilities like `lsmod` in module management. Adversaries may exploit this to gather system details, aiding in further attacks. The detection rule identifies unauthorized access to `/proc/modules`, excluding benign processes, to flag potential reconnaissance activities.

### Possible investigation steps

- Review the alert details to identify the specific process that accessed /proc/modules, focusing on the process name and its parent process.
- Investigate the source of the process by examining the user account associated with the process and checking for any unusual or unauthorized user activity.
- Analyze the command line arguments and execution context of the process to determine if the access was part of a legitimate operation or a potential reconnaissance attempt.
- Check the system's recent login history and network connections to identify any suspicious activity that might correlate with the alert.
- Cross-reference the process with known benign processes that are excluded in the query (e.g., python*, chef-client) to ensure it is not mistakenly flagged.
- Review system logs and audit logs for any other related activities or anomalies around the time of the alert to gather additional context.

### False positive analysis

- System management tools like configuration management software may access /proc/modules as part of routine operations. Exclude these processes by adding them to the exception list in the detection rule.
- Monitoring or diagnostic tools that regularly check system status might open /proc/modules. Identify these tools and update the rule to exclude their process names.
- Custom scripts used for system maintenance or monitoring could trigger the rule. Review these scripts and, if they are verified as safe, add their process names to the exclusion list.
- Automated security scans or compliance checks might access /proc/modules. Determine if these are legitimate and adjust the rule to prevent false alerts by excluding the relevant process names.

### Response and remediation

- Immediately isolate the affected system from the network to prevent potential lateral movement by the adversary.
- Conduct a thorough review of the process that accessed /proc/modules to determine if it is a legitimate process or a potential threat actor.
- If unauthorized access is confirmed, terminate the suspicious process and remove any associated malicious binaries or scripts from the system.
- Review system logs and audit trails to identify any additional unauthorized access attempts or related suspicious activities.
- Update and patch the system to ensure all software, especially kernel-related components, are up to date to mitigate known vulnerabilities.
- Implement stricter access controls and monitoring on critical files and directories, such as /proc/modules, to prevent unauthorized access in the future.
- Escalate the incident to the security operations team for further analysis and to determine if additional systems may be affected."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1082"
name = "System Information Discovery"
reference = "https://attack.mitre.org/techniques/T1082/"

[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.executable"]

[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"
