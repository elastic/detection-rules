[metadata]
creation_date = "2023/06/09"
integration = ["auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
This rule monitors for a rapid enumeration of 25 different proc cmd, stat, and exe files, which suggests an abnormal
activity pattern. Such behavior could be an indicator of a malicious process scanning or gathering information about
running processes, potentially for reconnaissance, privilege escalation, or identifying vulnerable targets.
"""
from = "now-119m"
index = ["auditbeat-*", "logs-auditd_manager.auditd-*"]
interval = "60m"
language = "kuery"
license = "Elastic License v2"
name = "Suspicious Proc Pseudo File System Enumeration"
risk_score = 21
rule_id = "0787daa6-f8c5-453b-a4ec-048037f6c1cd"
setup = """## Setup

This rule requires the use of the `auditd_manager` integration. `Auditd_manager` is a tool designed to simplify and enhance the management of the audit subsystem in Linux systems. It provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system. The following steps should be executed in order to install and deploy `auditd_manager` on a Linux system.

```
Kibana -->
Management -->
Integrations -->
Auditd Manager -->
Add Auditd Manager
```

`Auditd_manager` subscribes to the kernel and receives events as they occur without any additional configuration. However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.

For this detection rule to trigger, the following additional audit rules are required to be added to the integration:
```
-w /proc/ -p r -k audit_proc
```

Add the newly installed `auditd manager` to an agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
"""
severity = "low"
tags = [
    "Data Source: Auditd Manager",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "threshold"

query = '''
host.os.type:linux and event.category:file and event.action:"opened-file" and 
file.path : (/proc/*/cmdline or /proc/*/stat or /proc/*/exe) and not process.name : (
  ps or netstat or landscape-sysin or w or pgrep or pidof or needrestart or apparmor_status
) and not process.parent.pid : 1
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious Proc Pseudo File System Enumeration

The proc pseudo file system in Linux provides a window into the kernel and running processes, offering critical insights for system management. Adversaries exploit this by rapidly accessing multiple proc files to gather intelligence on active processes, potentially for reconnaissance or privilege escalation. The detection rule identifies such behavior by monitoring for unusual access patterns to specific proc files, excluding benign processes, thus highlighting potential threats.

### Possible investigation steps

- Review the alert details to understand which specific proc files were accessed and by which process, focusing on the `file.path` and `process.name` fields.
- Check the `process.parent.pid` to identify the parent process of the suspicious activity, as this can provide context on how the process was initiated.
- Investigate the timeline of events leading up to the alert by examining logs for any related file access or process creation events.
- Use Osquery to gather more information about the suspicious process. For example, run the query: `SELECT pid, name, path, cmdline, parent FROM processes WHERE pid = <suspicious_pid>;` to get details about the process and its parent.
- Analyze the command line arguments (`cmdline`) of the suspicious process to determine its intended actions and whether they align with legitimate activities.
- Cross-reference the `process.name` and `process.parent.pid` with known benign processes to rule out false positives.
- Check for any recent changes or anomalies in user accounts or permissions that could be related to the suspicious process.
- Investigate network activity associated with the suspicious process to identify any external connections or data exfiltration attempts.
- Review historical data to determine if similar patterns of proc file enumeration have occurred in the past, indicating a persistent threat.
- Consult threat intelligence sources to see if the process name or behavior matches any known malicious activity or indicators of compromise.

### False positive analysis

- System monitoring tools and legitimate administrative scripts may trigger the rule by accessing multiple proc files in a short period, as part of their normal operation. These tools often perform routine checks on system processes and should be reviewed to determine if they are benign.
- Automated backup or system management software might also exhibit similar access patterns to the proc file system, especially during scheduled tasks. Identifying these processes and adding them to an exception list can help reduce false positives.
- Developers and system administrators running diagnostic or performance analysis scripts may inadvertently trigger the rule. These scripts should be evaluated for their necessity and frequency, and exceptions can be made for known safe scripts.
- Security software performing regular scans or checks on system processes might access proc files rapidly. It's important to verify the legitimacy of such software and consider excluding it from the rule if it is deemed safe.
- To manage false positives, users can create exceptions by adding known benign process names or parent process IDs to the exclusion list in the detection rule. Regularly updating this list based on observed patterns and operational needs will help maintain the accuracy of threat detection.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further reconnaissance or potential lateral movement by the adversary.
- Conduct a thorough investigation to identify the process responsible for the suspicious enumeration by analyzing logs and process details.
- Terminate any malicious or unauthorized processes identified during the investigation to halt further malicious activity.
- Review and analyze the system's recent activity and changes to identify any additional indicators of compromise or persistence mechanisms.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the threat is part of a larger attack campaign.
- Implement enhanced logging policies to capture detailed process and file access activities, ensuring future suspicious behaviors are detected promptly.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities and provide context for similar threats.
- Restore the system to its operational state by applying necessary patches, updates, and verifying the integrity of critical system files.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures accordingly.
- Implement system hardening measures, such as disabling unnecessary services, enforcing least privilege access, and regularly auditing system configurations to reduce the attack surface."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1057"
name = "Process Discovery"
reference = "https://attack.mitre.org/techniques/T1057/"

[[rule.threat.technique]]
id = "T1082"
name = "System Information Discovery"
reference = "https://attack.mitre.org/techniques/T1082/"


[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

[rule.threshold]
field = ["host.id", "process.pid", "process.name"]
value = 1
[[rule.threshold.cardinality]]
field = "file.path"
value = 100


