[metadata]
creation_date = "2023/06/08"
integration = ["auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Detects file events involving kernel modules in modprobe configuration files, which may indicate unauthorized access or
manipulation of critical kernel modules. Attackers may tamper with the modprobe files to load malicious or unauthorized
kernel modules, potentially bypassing security measures, escalating privileges, or hiding their activities within the
system.
"""
from = "now-119m"
index = ["auditbeat-*", "logs-auditd_manager.auditd-*"]
interval = "60m"
language = "kuery"
license = "Elastic License v2"
name = "Suspicious Modprobe File Event"
risk_score = 21
rule_id = "40ddbcc8-6561-44d9-afc8-eefdbfe0cccd"
setup = """## Setup

This rule requires the use of the `auditd_manager` integration. `Auditd_manager` is a tool designed to simplify and enhance the management of the audit subsystem in Linux systems. It provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system. The following steps should be executed in order to install and deploy `auditd_manager` on a Linux system.

```
Kibana -->
Management -->
Integrations -->
Auditd Manager -->
Add Auditd Manager
```

`Auditd_manager` subscribes to the kernel and receives events as they occur without any additional configuration. However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.

For this detection rule to trigger, the following additional audit rules are required to be added to the integration:
```
-w /etc/modprobe.conf -p wa -k modprobe
-w /etc/modprobe.d -p wa -k modprobe
```

Add the newly installed `auditd manager` to an agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
"""
severity = "low"
tags = [
    "Data Source: Auditd Manager",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
host.os.type:linux and event.category:file and event.action:"opened-file" and
file.path : ("/etc/modprobe.conf" or "/etc/modprobe.d" or /etc/modprobe.d/*) and not process.name:(
  cp or dpkg or dockerd or lynis or mkinitramfs or snapd or systemd-udevd or borg or auditbeat or lspci or
  aide or modprobe or python*
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious Modprobe File Event

Modprobe manages Linux kernel modules, essential for system functionality. Adversaries may exploit modprobe configurations to load unauthorized modules, potentially bypassing security, escalating privileges, or concealing activities. The detection rule identifies suspicious file access in modprobe directories, excluding benign processes, to flag potential tampering attempts.

### Possible investigation steps

- Review the alert details to understand which specific file path triggered the event, focusing on `/etc/modprobe.conf` or files within `/etc/modprobe.d`.
- Identify the process that accessed the modprobe file by examining the `process.name` field in the alert. Determine if the process is expected or potentially malicious.
- Check the `host.os.type` field to confirm the operating system is Linux, ensuring the alert is relevant to the environment.
- Investigate the `event.action` field to verify that the action was indeed "opened-file," indicating potential unauthorized access.
- Use Osquery to list all processes that have accessed modprobe files recently. Example query: `SELECT pid, name, path FROM processes WHERE path LIKE '/etc/modprobe%' ORDER BY start_time DESC;`
- Cross-reference the process ID and name with known benign processes to rule out false positives.
- Examine system logs for any additional file access or modification events around the same time as the alert to identify patterns or repeated access attempts.
- Investigate the user account associated with the process that accessed the modprobe file to determine if it has the necessary permissions and if the access was legitimate.
- Review recent changes to the modprobe files by checking file modification timestamps and comparing them with known change management records.
- Analyze network activity from the host to identify any suspicious outbound connections that may correlate with the timing of the modprobe file access.

### False positive analysis

- Routine system maintenance tasks or updates may trigger the rule, as legitimate processes might access modprobe files during these operations. For example, package managers like `apt` or `yum` could access these files when installing or updating software.
- Custom scripts or administrative tools that interact with kernel modules for legitimate purposes might also be flagged. These could include backup scripts or system monitoring tools that are not part of the default exclusion list.
- Users can manage these false positives by reviewing the processes that are accessing the modprobe files and determining if they are part of regular system operations. If so, they can be added to the exclusion list in the detection rule to prevent future alerts.
- It's important to regularly review and update the exclusion list to ensure that new legitimate processes are not mistakenly flagged, while also ensuring that potentially malicious activities are not overlooked.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or potential lateral movement by the attacker.
- Conduct a thorough investigation to identify the source of the suspicious modprobe file event, examining logs and system changes to determine if unauthorized kernel modules were loaded.
- Verify the integrity of the modprobe configuration files and compare them against known good baselines to identify any unauthorized modifications.
- Remove any unauthorized or malicious kernel modules identified during the investigation to restore the system's integrity.
- Restore the modprobe configuration files from a trusted backup if any tampering is detected, ensuring that only legitimate modules are loaded.
- Escalate the incident to the security operations team for further analysis and to determine if additional systems may be affected.
- Implement enhanced logging and monitoring for modprobe-related activities, ensuring that all file access and modifications are captured for future investigations.
- Integrate threat intelligence feeds and MITRE ATT&CK framework data to improve detection capabilities and contextual understanding of similar threats.
- Conduct a post-incident review to identify gaps in security controls and processes, and implement hardening measures such as restricting access to modprobe directories and enforcing strict user permissions.
- Educate system administrators and security personnel on the risks associated with kernel module manipulation and the importance of maintaining secure configurations."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1082"
name = "System Information Discovery"
reference = "https://attack.mitre.org/techniques/T1082/"

[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.executable"]

[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"
