[metadata]
creation_date = "2023/06/08"
integration = ["auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Monitors file events on sysctl configuration files (e.g., /etc/sysctl.conf, /etc/sysctl.d/*.conf) to identify potential
unauthorized access or manipulation of system-level configuration settings. Attackers may tamper with the sysctl
configuration files to modify kernel parameters, potentially compromising system stability, performance, or security.
"""
from = "now-119m"
index = ["auditbeat-*", "logs-auditd_manager.auditd-*"]
interval = "60m"
language = "kuery"
license = "Elastic License v2"
name = "Suspicious Sysctl File Event"
risk_score = 21
rule_id = "7592c127-89fb-4209-a8f6-f9944dfd7e02"
setup = """## Setup

This rule requires the use of the `auditd_manager` integration. `Auditd_manager` is a tool designed to simplify and enhance the management of the audit subsystem in Linux systems. It provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system. The following steps should be executed in order to install and deploy `auditd_manager` on a Linux system.

```
Kibana -->
Management -->
Integrations -->
Auditd Manager -->
Add Auditd Manager
```

`Auditd_manager` subscribes to the kernel and receives events as they occur without any additional configuration. However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.

For this detection rule to trigger, the following additional audit rules are required to be added to the integration:

```
-w /etc/sysctl.conf -p wa -k sysctl
-w /etc/sysctl.d -p wa -k sysctl
```

Add the newly installed `auditd manager` to an agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
"""
severity = "low"
tags = [
    "Data Source: Auditd Manager",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
host.os.type:linux and event.category:file and event.action:("opened-file" or "read-file" or "wrote-to-file") and
file.path : ("/etc/sysctl.conf" or "/etc/sysctl.d" or /etc/sysctl.d/*) and not process.name:(
  dpkg or dockerd or unattended-upg or systemd-sysctl or python* or auditbeat or dpkg or pool*
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious Sysctl File Event

Sysctl configuration files in Linux systems manage kernel parameters, crucial for system performance and security. Adversaries may exploit these files to alter system behavior, potentially destabilizing or compromising the system. The detection rule identifies unauthorized access or changes to these files by monitoring file events and excluding legitimate processes, thus highlighting potential malicious activity.

### Possible investigation steps

- Review the alert details to understand which sysctl configuration file was accessed or modified, focusing on the `file.path` field to identify the specific file involved.
- Examine the `event.action` field to determine the type of file operation (e.g., "opened-file", "read-file", "wrote-to-file") that triggered the alert.
- Identify the process responsible for the file event by reviewing the `process.name` field, and cross-reference it with known legitimate processes to confirm if it is indeed suspicious.
- Check the `host.os.type` field to ensure the alert pertains to a Linux system, as the rule is specifically designed for Linux environments.
- Investigate the user account associated with the process by examining the `user.name` field to determine if the access was performed by a legitimate or suspicious user.
- Use Osquery to gather additional context about the process by running a query such as: `SELECT * FROM processes WHERE name = '<suspicious_process_name>';` to retrieve details like process ID, parent process, and command line arguments.
- Review recent system logs for any unusual activity around the time of the alert, focusing on authentication logs and other security-related logs.
- Analyze the system's process tree to understand the parent-child relationship of the suspicious process, which can provide insights into how the process was initiated.
- Check for any recent changes to the sysctl configuration files by comparing the current file contents with a known good baseline or backup, if available.
- Investigate any network connections established by the suspicious process using Osquery: `SELECT * FROM socket_events WHERE pid = <suspicious_process_pid>;` to identify potential external communication.

### False positive analysis

- Routine system maintenance tasks can trigger false positives. For example, legitimate system updates or package installations may access sysctl files, especially if not all relevant processes are excluded in the detection rule.
- Automated configuration management tools like Ansible, Puppet, or Chef might access sysctl files to ensure system configurations are consistent, leading to benign alerts.
- Backup or monitoring software that reads system configuration files for integrity checks or data collection purposes can also cause false positives.
- To manage these false positives, users can update the detection rule to exclude additional known legitimate processes by adding them to the `not process.name` list. This can include specific maintenance scripts or tools that are regularly used in the environment.
- Regularly review and update the exclusion list to reflect changes in system management practices or new tools introduced into the environment, ensuring that only non-threatening behaviors are excluded.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or changes.
- Conduct a thorough investigation to identify the source of the unauthorized access, focusing on recent changes to sysctl configuration files and correlating with process activity.
- Review system logs and security alerts to determine if any other systems have been targeted or compromised.
- Restore the sysctl configuration files from a known good backup to ensure system stability and security.
- Apply patches and updates to the operating system and applications to mitigate any known vulnerabilities that may have been exploited.
- Implement stricter access controls and permissions on sysctl configuration files to limit who can read or modify them.
- Enhance logging and monitoring by integrating with a Security Information and Event Management (SIEM) system to detect future unauthorized access attempts.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Educate and train staff on recognizing and responding to suspicious activities related to system configuration files.
- Consider deploying additional security measures such as intrusion detection systems (IDS) and endpoint detection and response (EDR) solutions to improve threat detection capabilities."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1082"
name = "System Information Discovery"
reference = "https://attack.mitre.org/techniques/T1082/"

[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.executable"]

[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"
