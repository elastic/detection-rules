[metadata]
bypass_bbr_timing = true
creation_date = "2024/01/10"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/10"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies the ability of a process to be able to create RAW and PACKET socket types for the available network
namespaces by a non-root user. A malicious process with this capability may exploit routing between hosts, bypass
network access controls, and otherwise tamper with host networking if a firewall is not in place to limit the packet
types and contents. The CAP_NET_RAW capability allows the process to bind to any address within the available
namespaces, which allows network traffic sniffing by a non root user. The rule identifies previously unknown processes
executing with CAP_NET_RAW capabilities through the use of the new terms rule type.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "Network Traffic Capture via CAP_NET_RAW"
risk_score = 21
rule_id = "e28b8093-833b-4eda-b877-0873d134cf3c"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Data Source: Elastic Defend",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
event.category:"process" and host.os.type:"linux" and event.type:"start" and event.action:"exec" and process.name:* and
(process.thread.capabilities.effective:"CAP_NET_RAW" or process.thread.capabilities.permitted:"CAP_NET_RAW") and
not user.id:"0"
'''
note = """## Triage and analysis

> **Disclaimer**:
> This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Network Traffic Capture via CAP_NET_RAW

CAP_NET_RAW is a Linux capability that allows processes to create raw sockets, enabling them to send and receive packets directly at the network layer. This capability is crucial for network utilities but can be exploited by adversaries to intercept and manipulate network traffic, bypassing access controls. The detection rule identifies non-root processes with CAP_NET_RAW, flagging potential unauthorized network sniffing activities.

### Possible investigation steps

- Review the process details by examining the process.name field to identify the specific application or service that triggered the alert.
- Check the user.id field to determine which non-root user is associated with the process, and assess whether this user should have CAP_NET_RAW capabilities.
- Investigate the event.category and event.type fields to confirm the context of the process start event and ensure it aligns with expected behavior for the identified process.
- Analyze the host.os.type field to verify the operating system environment and consider any specific configurations or security measures in place on the Linux host.
- Correlate the event.action field with other recent events on the system to identify any unusual patterns or sequences of actions that might indicate malicious activity.
- Consult system logs and network traffic data to gather additional context around the time of the alert, looking for signs of unauthorized network sniffing or manipulation.

### False positive analysis

- Network diagnostic tools like tcpdump or Wireshark may trigger this rule when used by non-root users. To manage this, create exceptions for these specific processes if they are part of regular network monitoring activities.
- Custom scripts or applications developed in-house that require network packet analysis might also be flagged. Review these processes and, if deemed safe, add them to an allowlist to prevent future alerts.
- Security software or monitoring agents that operate with CAP_NET_RAW for legitimate purposes can be identified as false positives. Verify their legitimacy and configure exceptions to avoid unnecessary alerts.
- Development or testing environments where non-root users are granted CAP_NET_RAW for specific tasks may cause alerts. Ensure these environments are well-documented and apply exceptions where appropriate to reduce noise.
- Automated deployment tools that temporarily use CAP_NET_RAW during setup or configuration might be flagged. Confirm their activity is expected and safe, then exclude them from the rule to streamline operations.

### Response and remediation

- Immediately isolate the affected host from the network to prevent further unauthorized network traffic sniffing and potential data exfiltration.
- Terminate the suspicious process identified with CAP_NET_RAW capabilities to stop any ongoing malicious activities.
- Conduct a thorough review of the affected system to identify any unauthorized changes or additional malicious processes that may have been initiated by the same threat actor.
- Revoke CAP_NET_RAW capabilities from non-essential processes and users to minimize the risk of similar threats in the future.
- Implement strict firewall rules to limit the types and contents of packets that can be sent and received, reducing the attack surface for network sniffing.
- Escalate the incident to the security operations center (SOC) for further analysis and to determine if the threat is part of a larger attack campaign.
- Enhance monitoring and logging for CAP_NET_RAW capability usage across all systems to improve detection and response times for similar threats in the future."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1040"
name = "Network Sniffing"
reference = "https://attack.mitre.org/techniques/T1040/"


[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.executable"]
[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"


