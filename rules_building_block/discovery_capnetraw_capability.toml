[metadata]
bypass_bbr_timing = true
creation_date = "2024/01/10"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies the ability of a process to be able to create RAW and PACKET socket types for the available network
namespaces by a non-root user. A malicious process with this capability may exploit routing between hosts, bypass
network access controls, and otherwise tamper with host networking if a firewall is not in place to limit the packet
types and contents. The CAP_NET_RAW capability allows the process to bind to any address within the available
namespaces, which allows network traffic sniffing by a non root user. The rule identifies previously unknown processes
executing with CAP_NET_RAW capabilities through the use of the new terms rule type.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "Network Traffic Capture via CAP_NET_RAW"
risk_score = 21
rule_id = "e28b8093-833b-4eda-b877-0873d134cf3c"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Data Source: Elastic Defend",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
event.category:"process" and host.os.type:"linux" and event.type:"start" and event.action:"exec" and process.name:* and
(process.thread.capabilities.effective:"CAP_NET_RAW" or process.thread.capabilities.permitted:"CAP_NET_RAW") and
not user.id:"0"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Network Traffic Capture via CAP_NET_RAW

CAP_NET_RAW is a Linux capability that allows processes to create raw sockets, enabling them to capture and manipulate network traffic. While useful for legitimate network diagnostics, adversaries can exploit it to intercept data, bypass controls, or tamper with communications. The detection rule identifies non-root processes with this capability, flagging potential unauthorized network sniffing activities.

### Possible investigation steps

- Review the alert details to identify the specific process name and user ID associated with the CAP_NET_RAW capability, focusing on the `process.name` and `user.id` fields.
- Verify the legitimacy of the process by checking the process's path and hash against known good software inventories or threat intelligence databases.
- Investigate the user account (`user.id`) that initiated the process to determine if it is a legitimate user or potentially compromised.
- Use Osquery to list all processes with CAP_NET_RAW capabilities by executing: `SELECT pid, name, path FROM processes WHERE capabilities LIKE '%CAP_NET_RAW%';` to identify any other suspicious processes.
- Examine the command line arguments (`process.command_line`) used to start the process for any unusual or suspicious parameters that might indicate malicious intent.
- Check the parent process (`process.parent.name`) to understand the process hierarchy and determine if the process was spawned by a legitimate application or a potentially malicious one.
- Analyze recent login events for the user account in question to identify any unusual login times or sources that could indicate unauthorized access.
- Review network connections initiated by the process using tools like `netstat` or `ss` to identify any suspicious external communications.
- Correlate the event with other security logs, such as firewall or intrusion detection system logs, to identify any related suspicious activities or anomalies.
- Investigate the host's network configuration and firewall settings to ensure that they are properly configured to prevent unauthorized network traffic capture and manipulation.

### False positive analysis

- Legitimate network diagnostic tools: Some network diagnostic tools used by system administrators or network engineers may require CAP_NET_RAW capabilities to function correctly. These tools, while non-root, are not malicious and should be reviewed to determine if they are part of regular network maintenance activities. Users can handle these by creating exceptions for known diagnostic tools that are frequently used in their environment.
- Containerized applications: In environments using containerization, certain applications may be granted CAP_NET_RAW capabilities to manage network traffic within the container. These applications should be verified to ensure they are part of the expected container setup. Users can exclude these applications by identifying and documenting the containers that require such capabilities for legitimate purposes.
- Security monitoring tools: Some security tools designed to monitor network traffic for anomalies may also require CAP_NET_RAW capabilities. These tools should be assessed to confirm they are part of the organization's security infrastructure. Users can manage these by maintaining an updated list of approved security tools and excluding them from the detection rule.
- Development and testing environments: Developers may use CAP_NET_RAW capabilities in non-production environments for testing network-related features. These activities should be monitored to ensure they do not inadvertently transition to production environments. Users can handle these by setting up separate rules or exceptions for development and testing environments, ensuring they are clearly distinguished from production systems.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify the process and user associated with the CAP_NET_RAW capability, focusing on non-root users.
- Review system logs and network traffic to determine the scope of the activity and identify any other potentially compromised systems.
- Terminate any unauthorized processes identified during the investigation that are using CAP_NET_RAW capabilities.
- Change credentials and review user permissions for any accounts involved in the incident to prevent further misuse.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the activity is part of a larger attack.
- Implement enhanced logging and monitoring for network traffic and process execution to detect similar activities in the future.
- Integrate threat intelligence feeds and MITRE ATT&CK framework data to improve detection and response capabilities for network sniffing and related tactics.
- Restore the system to its operational state by applying patches, updating configurations, and ensuring all security controls are in place.
- Harden the system by reviewing and restricting capabilities like CAP_NET_RAW to only trusted processes and users, and ensure firewalls are configured to limit packet types and contents."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1040"
name = "Network Sniffing"
reference = "https://attack.mitre.org/techniques/T1040/"


[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.executable"]
[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"


