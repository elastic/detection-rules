[metadata]
creation_date = "2023/09/26"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/10"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies the execution of a command via Microsoft Visual Studio Pre or Post build events. Adversaries may backdoor a
trusted visual studio project to execute a malicious command during the project build process.
"""
from = "now-119m"
index = ["logs-endpoint.events.process-*"]
interval = "60m"
language = "eql"
license = "Elastic License v2"
name = "Execution via MS VisualStudio Pre/Post Build Events"
references = [
    "https://docs.microsoft.com/en-us/visualstudio/ide/reference/pre-build-event-post-build-event-command-line-dialog-box?view=vs-2022",
    "https://www.pwc.com/gx/en/issues/cybersecurity/cyber-threat-intelligence/threat-actor-of-in-tur-est.html",
    "https://blog.google/threat-analysis-group/new-campaign-targeting-security-researchers/",
    "https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES/blob/master/Execution/execution_evasion_visual_studio_prebuild_event.evtx",
]
risk_score = 21
rule_id = "fec7ccb7-6ed9-4f98-93ab-d6b366b063a0"
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Tactic: Execution",
    "Rule Type: BBR",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence with maxspan=1m
  [process where host.os.type == "windows" and event.action == "start" and
   process.name : "cmd.exe" and process.parent.name : "MSBuild.exe" and
   process.args : "?:\\Users\\*\\AppData\\Local\\Temp\\tmp*.exec.cmd"] by process.entity_id
  [process where host.os.type == "windows" and event.action == "start" and
    process.name : (
      "cmd.exe", "powershell.exe",
      "MSHTA.EXE", "CertUtil.exe",
      "CertReq.exe", "rundll32.exe",
      "regsvr32.exe", "MSbuild.exe",
      "cscript.exe", "wscript.exe",
      "installutil.exe"
    ) and
    not 
    (
      process.name : ("cmd.exe", "powershell.exe") and
      process.args : (
        "*\\vcpkg\\scripts\\buildsystems\\msbuild\\applocal.ps1",
        "HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\SxS\\VS?",
        "process.versions.node*",
        "?:\\Program Files\\nodejs\\node.exe",
        "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\*",
        "*Get-ChildItem*Tipasplus.css*",
        "Build\\GenerateResourceScripts.ps1",
        "Shared\\Common\\..\\..\\BuildTools\\ConfigBuilder.ps1\"",
        "?:\\Projets\\*\\PostBuild\\MediaCache.ps1"
      )
    ) and
    not process.executable : "?:\\Program Files*\\Microsoft Visual Studio\\*\\MSBuild.exe" and
    not (process.name : "cmd.exe" and
         process.command_line :
                  ("*vswhere.exe -property catalog_productSemanticVersion*",
                   "*git log --pretty=format*", "*\\.nuget\\packages\\vswhere\\*",
                   "*Common\\..\\..\\BuildTools\\*"))
  ] by process.parent.entity_id
'''
note = """## Triage and analysis

> **Disclaimer**:
> This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Execution via MS VisualStudio Pre/Post Build Events

Microsoft Visual Studio allows developers to automate tasks using pre/post build events, which execute commands during the build process. Adversaries can exploit this by injecting malicious commands into these events, executing harmful code under the guise of a legitimate build. The detection rule identifies suspicious command executions linked to Visual Studio builds, focusing on unusual parent-child process relationships and command patterns, while excluding known safe operations, to flag potential misuse.

### Possible investigation steps

- Review the process tree to identify the parent-child relationship, focusing on instances where MSBuild.exe spawns cmd.exe or other suspicious processes like powershell.exe or rundll32.exe.
- Examine the command line arguments of the suspicious process to determine if they match known malicious patterns or if they deviate from typical build operations.
- Check the file path and content of any scripts or executables in the Temp directory (e.g., tmp*.exec.cmd) to identify potential malicious payloads.
- Investigate the user account associated with the process execution to determine if it aligns with expected developer activity or if it indicates unauthorized access.
- Correlate the alert with recent changes in the Visual Studio project files to identify any unauthorized modifications to pre/post build events.
- Look for additional indicators of compromise on the host, such as unusual network connections or file modifications, that may suggest further malicious activity.

### False positive analysis

- Visual Studio build scripts that legitimately use cmd.exe or powershell.exe for automation tasks may trigger false positives. Users can handle these by adding specific script paths or command patterns to the exclusion list.
- Developers using MSBuild.exe for legitimate build processes might see false positives if their processes match the suspicious patterns. Exclude known safe MSBuild.exe paths from detection to mitigate this.
- Automated build systems that utilize tools like vswhere.exe or git log for version control and project management can be mistakenly flagged. Exclude these command lines from the detection rule to prevent unnecessary alerts.
- Custom scripts or tools that interact with Visual Studio projects, such as applocal.ps1 or MediaCache.ps1, may cause false positives. Users should identify and exclude these specific scripts if they are part of regular, non-malicious operations.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further execution of malicious commands and potential lateral movement.
- Terminate any suspicious processes identified by the detection rule, particularly those involving cmd.exe or other flagged executables like powershell.exe, MSHTA.EXE, or rundll32.exe.
- Conduct a thorough review of the Visual Studio project files and build scripts to identify and remove any unauthorized or malicious pre/post build commands.
- Restore the affected system from a known good backup to ensure any backdoor or malicious modifications are completely removed.
- Implement application whitelisting to restrict the execution of unauthorized scripts and executables, focusing on those commonly abused in this context.
- Escalate the incident to the security operations team for further investigation and to determine if additional systems have been compromised.
- Enhance monitoring and logging for Visual Studio build processes and related command executions to detect similar threats in the future."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1127"
name = "Trusted Developer Utilities Proxy Execution"
reference = "https://attack.mitre.org/techniques/T1127/"
[[rule.threat.technique.subtechnique]]
id = "T1127.001"
name = "MSBuild"
reference = "https://attack.mitre.org/techniques/T1127/001/"



[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

