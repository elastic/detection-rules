[metadata]
creation_date = "2023/09/26"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies the execution of a command via Microsoft Visual Studio Pre or Post build events. Adversaries may backdoor a
trusted visual studio project to execute a malicious command during the project build process.
"""
from = "now-119m"
index = ["logs-endpoint.events.process-*"]
interval = "60m"
language = "eql"
license = "Elastic License v2"
name = "Execution via MS VisualStudio Pre/Post Build Events"
references = [
    "https://docs.microsoft.com/en-us/visualstudio/ide/reference/pre-build-event-post-build-event-command-line-dialog-box?view=vs-2022",
    "https://www.pwc.com/gx/en/issues/cybersecurity/cyber-threat-intelligence/threat-actor-of-in-tur-est.html",
    "https://blog.google/threat-analysis-group/new-campaign-targeting-security-researchers/",
    "https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES/blob/master/Execution/execution_evasion_visual_studio_prebuild_event.evtx",
]
risk_score = 21
rule_id = "fec7ccb7-6ed9-4f98-93ab-d6b366b063a0"
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Tactic: Execution",
    "Rule Type: BBR",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence with maxspan=1m
  [process where host.os.type == "windows" and event.action == "start" and
   process.name : "cmd.exe" and process.parent.name : "MSBuild.exe" and
   process.args : "?:\\Users\\*\\AppData\\Local\\Temp\\tmp*.exec.cmd"] by process.entity_id
  [process where host.os.type == "windows" and event.action == "start" and
    process.name : (
      "cmd.exe", "powershell.exe",
      "MSHTA.EXE", "CertUtil.exe",
      "CertReq.exe", "rundll32.exe",
      "regsvr32.exe", "MSbuild.exe",
      "cscript.exe", "wscript.exe",
      "installutil.exe"
    ) and
    not 
    (
      process.name : ("cmd.exe", "powershell.exe") and
      process.args : (
        "*\\vcpkg\\scripts\\buildsystems\\msbuild\\applocal.ps1",
        "HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\SxS\\VS?",
        "process.versions.node*",
        "?:\\Program Files\\nodejs\\node.exe",
        "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\*",
        "*Get-ChildItem*Tipasplus.css*",
        "Build\\GenerateResourceScripts.ps1",
        "Shared\\Common\\..\\..\\BuildTools\\ConfigBuilder.ps1\"",
        "?:\\Projets\\*\\PostBuild\\MediaCache.ps1"
      )
    ) and
    not process.executable : "?:\\Program Files*\\Microsoft Visual Studio\\*\\MSBuild.exe" and
    not (process.name : "cmd.exe" and
         process.command_line :
                  ("*vswhere.exe -property catalog_productSemanticVersion*",
                   "*git log --pretty=format*", "*\\.nuget\\packages\\vswhere\\*",
                   "*Common\\..\\..\\BuildTools\\*"))
  ] by process.parent.entity_id
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Execution via MS VisualStudio Pre/Post Build Events

Microsoft Visual Studio allows developers to automate tasks using pre/post build events, which execute commands during the build process. Adversaries can exploit this by injecting malicious commands into these events, executing them under the guise of legitimate development activities. The detection rule identifies suspicious command executions linked to Visual Studio builds, focusing on unusual parent-child process relationships and command arguments, while excluding known benign patterns, to flag potential misuse.

### Possible investigation steps

- Review the alert details to understand the specific process and parent process involved, focusing on `process.name`, `process.parent.name`, and `process.args` fields to identify the command executed and its context.
- Examine the `process.entity_id` and `process.parent.entity_id` to trace the process lineage and determine if there are any unusual or unexpected parent-child relationships.
- Check the `process.command_line` for any suspicious or unexpected command arguments that could indicate malicious activity.
- Investigate the file path in `process.args` to verify if it matches known temporary file patterns or if it appears suspicious, such as residing in unusual directories.
- Use Osquery to gather additional context about the processes involved. For example, run the following query to list all processes executed by MSBuild.exe:
  ```sql
  SELECT pid, name, path, cmdline, parent FROM processes WHERE parent = (SELECT pid FROM processes WHERE name = 'MSBuild.exe');
  ```
- Analyze the execution history of the involved processes by reviewing logs or using endpoint detection tools to identify any patterns or anomalies in their behavior.
- Cross-reference the involved executable paths against known good or whitelisted paths to identify any deviations that could suggest tampering or unauthorized modifications.
- Investigate the user account associated with the process execution to determine if it aligns with expected usage patterns or if it could be compromised.
- Review any recent changes or commits to the Visual Studio project files to identify potential unauthorized modifications to pre/post build events.
- Correlate the alert with other security events or alerts in the environment to identify if this is part of a broader attack campaign or isolated incident.

### False positive analysis

- Known false positives may arise from legitimate development activities where Visual Studio projects use pre/post build events for automation, such as running scripts for deployment or configuration tasks.
- Developers often use scripts like PowerShell or batch files in build events for tasks like copying files, setting environment variables, or generating resources, which can trigger the detection rule.
- Frequent non-threatening behaviors include executing scripts related to version control operations, package management, or custom build tools that are part of the development workflow.
- Users can handle these false positives by creating exceptions for specific command patterns or script paths that are known to be safe and part of the regular build process.
- Excluding known benign patterns, such as those involving common development tools or scripts, can reduce noise and focus on truly suspicious activities.
- It's important to regularly review and update the list of exceptions to ensure that new legitimate activities are not mistakenly flagged as threats.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify the scope of the compromise, focusing on the Visual Studio project files and build scripts for unauthorized modifications.
- Review and analyze the process execution logs to trace the origin of the malicious commands and identify any additional compromised systems.
- Remove any unauthorized or suspicious pre/post build event scripts from the Visual Studio projects and restore them from a known good backup if necessary.
- Apply patches and updates to Visual Studio and related development tools to mitigate any known vulnerabilities that could be exploited.
- Implement strict access controls and permissions for Visual Studio projects to limit the ability to modify build scripts to authorized personnel only.
- Enhance logging and monitoring by enabling detailed process creation and command-line logging to detect similar activities in the future.
- Integrate security tools with SIEM solutions to correlate alerts and automate responses to suspicious activities related to build processes.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Educate developers and IT staff on secure coding practices and the risks associated with build process manipulation to prevent future incidents."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1127"
name = "Trusted Developer Utilities Proxy Execution"
reference = "https://attack.mitre.org/techniques/T1127/"
[[rule.threat.technique.subtechnique]]
id = "T1127.001"
name = "MSBuild"
reference = "https://attack.mitre.org/techniques/T1127/001/"



[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

