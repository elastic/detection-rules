[metadata]
bypass_bbr_timing = true
creation_date = "2024/07/24"
integration = ["aws"]
maturity = "production"
updated_date = "2025/01/10"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies when an EC2 instance interacts with the AWS IAM service via an assumed role. This is uncommon behavior and
could indicate an attacker using compromised credentials to further exploit an environment. For example, an assumed role
could be used to create new users for persistence or add permissions for privilege escalation. An EC2 instance assumes a
role using their EC2 ID as the session name. This rule looks for the pattern "i-" which is the beginning pattern for
assumed role sessions started by an EC2 instance. This is a [building
block](https://www.elastic.co/guide/en/security/current/building-block-rule.html) rule and does not generate alerts on
its own. It is meant to be used for correlation with other rules to detect suspicious activity.
"""
false_positives = [
    """
    Administrators may use EC2 instances to interact with IAM services as part of an automation workflow, ensure
    validity of the triggered event and include exceptions where necessary.
    """,
]
from = "now-6m"
index = ["filebeat-*", "logs-aws.cloudtrail-*"]
language = "eql"
license = "Elastic License v2"
name = "AWS EC2 Instance Interaction with IAM Service"
references = ["https://redcanary.com/blog/aws-sts/"]
risk_score = 21
rule_id = "a44bcb58-5109-4870-a7c6-11f5fe7dd4b1"
severity = "low"
tags = [
    "Domain: Cloud",
    "Data Source: AWS",
    "Data Source: Amazon Web Services",
    "Data Source: AWS EC2",
    "Data Source: AWS IAM",
    "Use Case: Identity and Access Audit",
    "Tactic: Privilege Escalation",
    "Tactic: Persistence",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
any where event.dataset == "aws.cloudtrail"
    and event.provider == "iam.amazonaws.com"
    and aws.cloudtrail.user_identity.type == "AssumedRole"
    and stringContains(user.id, ":i-")
    and (
            startsWith(event.action, "Update")
            or startsWith(event.action, "Attach")
            or startsWith(event.action, "Detach")
            or startsWith(event.action, "Create")
            or startsWith(event.action, "Delete")
            or startsWith(event.action, "Add")
            or startsWith(event.action, "Remove")
            or startsWith(event.action, "Put")
            or startsWith(event.action, "Tag")
    )
'''
note = """## Triage and analysis

> **Disclaimer**:
> This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating AWS EC2 Instance Interaction with IAM Service

AWS EC2 instances can assume IAM roles to access resources securely, using temporary credentials. Adversaries may exploit this by assuming roles to escalate privileges or establish persistence, often by creating or modifying IAM policies. The detection rule identifies unusual role assumptions by EC2 instances, focusing on actions like creating or updating resources, which may indicate malicious activity.

### Possible investigation steps

- Review the CloudTrail logs to identify the specific EC2 instance ID associated with the assumed role by checking the session name pattern "i-" in the user.id field.
- Examine the event.action field to determine the specific actions taken by the EC2 instance, such as "Update", "Attach", "Create", or "Delete", to understand the scope of the activity.
- Investigate the IAM role that was assumed by the EC2 instance to assess its permissions and determine if it has been modified recently or if it has excessive privileges.
- Check for any recent changes in IAM policies or user accounts that could indicate privilege escalation or persistence attempts, focusing on actions like "CreateUser" or "AttachPolicy".
- Correlate this activity with other security events or alerts in the environment to identify potential patterns of malicious behavior or lateral movement.

### False positive analysis

- Routine administrative tasks by authorized personnel may trigger the rule. To manage this, identify and document regular IAM role assumptions by EC2 instances for legitimate purposes and create exceptions for these patterns.
- Automated processes or scripts that require IAM role assumptions for resource management can cause false positives. Review and whitelist these processes by their specific EC2 instance IDs or session names.
- Scheduled maintenance activities involving IAM role assumptions might be flagged. Coordinate with the operations team to understand the schedule and exclude these activities from triggering alerts.
- Development and testing environments often have frequent role assumptions for testing purposes. Isolate these environments and apply separate monitoring rules to avoid unnecessary alerts.
- Third-party integrations that require IAM role assumptions should be reviewed and documented. Establish a baseline of expected behavior and exclude these from the rule if they are deemed non-threatening.

### Response and remediation

- Immediately isolate the affected EC2 instance to prevent further unauthorized actions. This can be done by removing it from any security groups that allow outbound internet access or by stopping the instance if necessary.
- Revoke the temporary credentials associated with the assumed role to cut off any ongoing unauthorized access. This can be done by invalidating the session tokens.
- Review and audit the IAM role and policies associated with the EC2 instance to identify any unauthorized changes. Revert any suspicious modifications to their original state.
- Conduct a thorough investigation of the EC2 instance to identify any signs of compromise, such as unauthorized software or scripts, and remove any malicious artifacts found.
- Rotate all credentials and access keys that may have been exposed or compromised during the incident to prevent further unauthorized access.
- Escalate the incident to the security operations team for a comprehensive review and to determine if further actions are needed, such as notifying affected parties or involving legal authorities.
- Implement enhanced monitoring and logging for IAM role assumptions and EC2 instance activities to detect similar threats in the future, ensuring that alerts are configured to notify the security team promptly."""

[rule.investigation_fields]
field_names = [
    "@timestamp",
    "source.address",
    "user.name",
    "user.id",
    "aws.cloudtrail.user_identity.arn",
    "aws.cloudtrail.user_identity.type",
    "user_agent.original",
    "user.target.name",
    "event.action",
    "event.outcome",
    "cloud.region",
    "event.provider",
    "aws.cloudtrail.request_parameters",
    "aws.cloudtrail.response_elements"
]

[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1078"
name = "Valid Accounts"
reference = "https://attack.mitre.org/techniques/T1078/"
[[rule.threat.technique.subtechnique]]
id = "T1078.004"
name = "Cloud Accounts"
reference = "https://attack.mitre.org/techniques/T1078/004/"


[[rule.threat.technique]]
id = "T1098"
name = "Account Manipulation"
reference = "https://attack.mitre.org/techniques/T1098/"
[[rule.threat.technique.subtechnique]]
id = "T1098.001"
name = "Additional Cloud Credentials"
reference = "https://attack.mitre.org/techniques/T1098/001/"

[[rule.threat.technique.subtechnique]]
id = "T1098.003"
name = "Additional Cloud Roles"
reference = "https://attack.mitre.org/techniques/T1098/003/"



[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

