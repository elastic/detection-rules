[metadata]
bypass_bbr_timing = true
creation_date = "2023/10/26"
integration = ["system"]
maturity = "production"
updated_date = "2025/01/10"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Monitors kernel logs for segfault messages. A segfault, or segmentation fault, is an error that occurs when a program
tries to access a memory location that it's not allowed to access, typically leading to program termination. A segfault
can be an indication of malicious behavior if it results from attempts to exploit buffer overflows or other
vulnerabilities in software to execute arbitrary code or disrupt its normal operation.
"""
from = "now-9m"
index = ["logs-system.syslog-*"]
language = "kuery"
license = "Elastic License v2"
name = "Segfault Detected"
risk_score = 21
rule_id = "5c81fc9d-1eae-437f-ba07-268472967013"
setup = """## Setup

This rule requires data coming in from one of the following integrations:
- Filebeat

### Filebeat Setup

Filebeat is a lightweight shipper for forwarding and centralizing log data. Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to Elasticsearch or Logstash for indexing.

#### The following steps should be executed in order to add the Filebeat for the Linux System:

- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.
- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/setup-repositories.html).
- To run Filebeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/running-on-docker.html).
- To run Filebeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/running-on-kubernetes.html).
- For quick start information for Filebeat refer to the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/8.11/filebeat-installation-configuration.html).
- For complete Setup and Run Filebeat information refer to the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/setting-up-and-running.html).

#### Rule Specific Setup Note

- This rule requires the Filebeat System Module to be enabled.
- The system module collects and parses logs created by the system logging service of common Unix/Linux based distributions.
- To run the system module of Filebeat on Linux follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-module-system.html).
"""
severity = "low"
tags = ["Domain: Endpoint", "OS: Linux", "Use Case: Threat Detection", "Tactic: Execution", "Rule Type: BBR"]
timestamp_override = "event.ingested"
type = "query"

query = '''
host.os.type:linux and event.dataset:"system.syslog" and process.name:kernel and message:segfault
'''
note = """## Triage and analysis

> **Disclaimer**:
> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Segfault Detected

Segmentation faults occur when a program accesses restricted memory, often causing it to crash. While typically indicative of programming errors, adversaries can exploit these faults to execute unauthorized code, leveraging vulnerabilities like buffer overflows. The 'Segfault Detected' rule monitors Linux kernel logs for such faults, flagging potential exploitation attempts by correlating specific syslog events and process activities.

### Possible investigation steps

- Review the syslog entries around the time of the segfault event to gather additional context and identify any preceding or subsequent suspicious activities.
- Investigate the process that triggered the segfault by examining its command line arguments, parent process, and any associated files or network connections to determine if it was part of a legitimate operation or a potential attack.
- Check for any recent changes or updates to the system or software that might have introduced vulnerabilities or instability leading to the segfault.
- Correlate the segfault event with other security alerts or logs to identify patterns or indicators of compromise that might suggest a broader attack campaign.
- Assess the system for signs of exploitation, such as unexpected changes in file permissions, unauthorized user accounts, or unusual outbound network traffic, which could indicate successful code execution following the segfault.

### False positive analysis

- Kernel module crashes can generate segfault messages without indicating malicious activity. Review the specific module involved and consider excluding it if it is known to be unstable but non-threatening.
- Debugging activities by developers may intentionally cause segfaults to test error handling. Coordinate with development teams to identify and exclude these events during known testing periods.
- Certain legitimate applications may occasionally cause segfaults due to bugs or compatibility issues. Monitor these applications and, if they are verified as non-malicious, create exceptions for their segfault events.
- System updates or patches might temporarily cause segfaults as software adjusts to new configurations. Track update schedules and exclude related segfaults if they align with these periods.
- Custom scripts or automation tools that interact with system processes might inadvertently trigger segfaults. Validate these scripts and exclude their segfaults if they are part of routine operations.

### Response and remediation

- Immediately isolate the affected system from the network to prevent potential lateral movement or further exploitation.
- Conduct a memory dump and forensic analysis of the affected system to identify any unauthorized code execution or modifications.
- Review and update the system's software and libraries to patch any known vulnerabilities that could be exploited by buffer overflow attacks.
- Implement application whitelisting to restrict the execution of unauthorized or suspicious processes.
- Monitor for any additional segfault messages in the kernel logs across other systems to identify potential widespread exploitation attempts.
- Escalate the incident to the security operations center (SOC) for further investigation and to determine if the attack is part of a larger campaign.
- Enhance logging and alerting mechanisms to detect similar segmentation faults and potential exploitation attempts in the future."""


[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

