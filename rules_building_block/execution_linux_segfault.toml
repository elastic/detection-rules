[metadata]
bypass_bbr_timing = true
creation_date = "2023/10/26"
integration = ["system"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Monitors kernel logs for segfault messages. A segfault, or segmentation fault, is an error that occurs when a program
tries to access a memory location that it's not allowed to access, typically leading to program termination. A segfault
can be an indication of malicious behavior if it results from attempts to exploit buffer overflows or other
vulnerabilities in software to execute arbitrary code or disrupt its normal operation.
"""
from = "now-9m"
index = ["logs-system.syslog-*"]
language = "kuery"
license = "Elastic License v2"
name = "Segfault Detected"
risk_score = 21
rule_id = "5c81fc9d-1eae-437f-ba07-268472967013"
setup = """## Setup

This rule requires data coming in from one of the following integrations:
- Filebeat

### Filebeat Setup

Filebeat is a lightweight shipper for forwarding and centralizing log data. Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to Elasticsearch or Logstash for indexing.

#### The following steps should be executed in order to add the Filebeat for the Linux System:

- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.
- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/setup-repositories.html).
- To run Filebeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/running-on-docker.html).
- To run Filebeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/running-on-kubernetes.html).
- For quick start information for Filebeat refer to the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/8.11/filebeat-installation-configuration.html).
- For complete Setup and Run Filebeat information refer to the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/setting-up-and-running.html).

#### Rule Specific Setup Note

- This rule requires the Filebeat System Module to be enabled.
- The system module collects and parses logs created by the system logging service of common Unix/Linux based distributions.
- To run the system module of Filebeat on Linux follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-module-system.html).
"""
severity = "low"
tags = ["Domain: Endpoint", "OS: Linux", "Use Case: Threat Detection", "Tactic: Execution", "Rule Type: BBR"]
timestamp_override = "event.ingested"
type = "query"

query = '''
host.os.type:linux and event.dataset:"system.syslog" and process.name:kernel and message:segfault
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Segfault Detected
Segmentation faults occur when a program accesses restricted memory, often causing it to crash. While typically a sign of programming errors, adversaries can exploit these faults to execute unauthorized code, leveraging vulnerabilities like buffer overflows. The 'Segfault Detected' rule monitors Linux kernel logs for segfault messages, identifying potential exploitation attempts by correlating specific log patterns.

### Possible investigation steps

- Review the alert details to confirm the presence of a segmentation fault by examining the `message` field for specific segfault patterns.
- Verify the `host.os.type` field to ensure the alert pertains to a Linux system, as the rule is designed for Linux kernel logs.
- Check the `event.dataset` field to confirm that the log source is `system.syslog`, ensuring the data is from the expected log source.
- Identify the process that caused the segfault by examining the `process.name` field and gather additional context about this process.
- Use Osquery to list recent processes that have experienced segmentation faults with a query like: `SELECT pid, name, path, cmdline FROM processes WHERE name = 'kernel' AND cmdline LIKE '%segfault%';`
- Investigate the history of the process by reviewing logs or using Osquery to determine if this process has a history of segfaults or other anomalies.
- Correlate the timing of the segfault with other system events to identify any preceding suspicious activities or changes in the system.
- Examine the system for any recent updates or changes that might have introduced vulnerabilities, focusing on software related to the segfaulting process.
- Analyze the system for signs of exploitation attempts, such as buffer overflow patterns, by reviewing logs and using tools like Osquery to check for unusual memory usage.
- Gather additional context by checking for any related alerts or anomalies on the same host or network segment that might indicate a broader attack pattern.

### False positive analysis

- Routine software crashes: Some applications may crash frequently due to bugs or compatibility issues, leading to repeated segfault messages in the logs. These are not necessarily indicative of malicious activity but rather poor software stability.
- Debugging activities: Developers often intentionally cause segfaults during debugging to test error handling or to identify vulnerabilities. These activities can generate false positives in the monitoring system.
- Kernel module testing: Testing or development of kernel modules can result in segfaults as part of normal operations, especially when modules are being loaded or unloaded frequently.
- Legacy software: Older software that is not fully compatible with current systems may cause segfaults due to outdated code practices, which are not necessarily security threats.
- To manage these false positives, users can create exceptions or filters for known non-threatening processes or applications that frequently cause segfaults. This can be done by updating the monitoring rule to exclude specific process names or paths associated with benign activities. Additionally, maintaining an updated list of trusted applications and regularly reviewing and adjusting the exceptions can help minimize unnecessary alerts.

### Response and remediation

- Immediately isolate the affected system from the network to prevent potential lateral movement by the adversary.
- Conduct a thorough investigation of the kernel logs and any associated application logs to identify the source and nature of the segfault.
- Analyze recent changes or updates to the system that might have introduced vulnerabilities, focusing on software known for buffer overflow issues.
- Utilize memory analysis tools to detect any unauthorized code execution or memory manipulation attempts.
- If malicious activity is confirmed, escalate the incident to the security operations center (SOC) or incident response team for further analysis and response.
- Restore the system from a known good backup to ensure that any malicious code or corrupted data is removed.
- Apply security patches and updates to the operating system and all installed software to mitigate known vulnerabilities.
- Implement enhanced logging policies to capture detailed information on process execution and memory access patterns for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Conduct a post-incident review to identify gaps in security controls and update the incident response plan to address these weaknesses."""


[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

