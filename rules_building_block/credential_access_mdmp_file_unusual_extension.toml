[metadata]
bypass_bbr_timing = true
creation_date = "2023/09/21"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/10"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies the creation of a memory dump file with an unusual extension, which can indicate an attempt to disguise a
memory dump as another file type to bypass security defenses.
"""
from = "now-9m"
index = ["logs-endpoint.events.file-*"]
language = "eql"
license = "Elastic License v2"
name = "Memory Dump File with Unusual Extension"
risk_score = 21
rule_id = "c0b9dc99-c696-4779-b086-0d37dc2b3778"
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "windows" and event.type == "creation" and

  /* MDMP header */
  file.Ext.header_bytes : "4d444d50*" and
  not file.extension : ("dmp", "mdmp", "hdmp", "edmp", "full", "tdref", "cg", "tmp", "dat") and
  not 
  (
    process.executable : "?:\\Program Files\\Endgame\\esensor.exe" and
    process.code_signature.trusted == true and length(file.extension) == 0
  ) and
  not
  (
    process.name : "System" and file.extension : "tmpscan"
  )
'''
note = """## Triage and analysis

> **Disclaimer**:
> This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Memory Dump File with Unusual Extension

Memory dumps capture the contents of system memory, often used for debugging or analysis. Adversaries may disguise these files with atypical extensions to evade detection, facilitating credential theft or defense evasion. The detection rule identifies such anomalies by checking for specific memory dump signatures and filtering out known benign processes, alerting analysts to potential threats.

### Possible investigation steps

- Review the file path and name to determine if the unusual extension could be an attempt to disguise the memory dump file.
- Examine the process that created the file, focusing on the process.executable and process.name fields, to identify if it is a known or trusted application.
- Check the process code signature status (process.code_signature.trusted) to verify if the process is signed and trusted, which might reduce the likelihood of malicious intent.
- Investigate the host where the file was created to identify any recent suspicious activities or alerts that might correlate with this event.
- Analyze the file header bytes (file.Ext.header_bytes) to confirm the presence of the MDMP signature, ensuring the file is indeed a memory dump.
- Cross-reference the event with other security logs or alerts to identify any related incidents or patterns of behavior that could indicate a broader threat.

### False positive analysis

- Memory dump files created by trusted security software like Endgame's esensor.exe may trigger alerts. To handle this, add an exception for processes with a trusted code signature and no file extension.
- System processes generating files with the extension "tmpscan" can be benign. Exclude these specific cases to reduce unnecessary alerts.
- Regularly review and update the list of known benign extensions to ensure that legitimate memory dump activities are not flagged as suspicious.
- Monitor for any new software installations or updates that might introduce legitimate memory dump activities, and adjust the rule exceptions accordingly.
- Collaborate with IT and security teams to identify any internal processes or tools that may generate memory dumps with unusual extensions, and whitelist these as needed.

### Response and remediation

- Isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Terminate any suspicious processes associated with the creation of the memory dump file, especially those not matching known benign processes.
- Conduct a thorough review of the system's recent activity logs to identify any unauthorized access or actions that may have led to the creation of the memory dump.
- Restore the system from a known good backup if any unauthorized changes or data exfiltration are confirmed.
- Update and patch the system to the latest security standards to close any vulnerabilities that may have been exploited.
- Implement stricter file monitoring and alerting for unusual file extensions and memory dump activities to enhance future detection capabilities.
- Escalate the incident to the security operations center (SOC) or relevant cybersecurity team for further investigation and to assess the potential impact on other systems within the network."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.001"
name = "LSASS Memory"
reference = "https://attack.mitre.org/techniques/T1003/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1036"
name = "Masquerading"
reference = "https://attack.mitre.org/techniques/T1036/"
[[rule.threat.technique.subtechnique]]
id = "T1036.008"
name = "Masquerade File Type"
reference = "https://attack.mitre.org/techniques/T1036/008/"



[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

