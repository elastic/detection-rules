[metadata]
bypass_bbr_timing = true
creation_date = "2023/09/21"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies the creation of a memory dump file with an unusual extension, which can indicate an attempt to disguise a
memory dump as another file type to bypass security defenses.
"""
from = "now-9m"
index = ["logs-endpoint.events.file-*"]
language = "eql"
license = "Elastic License v2"
name = "Memory Dump File with Unusual Extension"
risk_score = 21
rule_id = "c0b9dc99-c696-4779-b086-0d37dc2b3778"
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "windows" and event.type == "creation" and

  /* MDMP header */
  file.Ext.header_bytes : "4d444d50*" and
  not file.extension : ("dmp", "mdmp", "hdmp", "edmp", "full", "tdref", "cg", "tmp", "dat") and
  not 
  (
    process.executable : "?:\\Program Files\\Endgame\\esensor.exe" and
    process.code_signature.trusted == true and length(file.extension) == 0
  ) and
  not
  (
    process.name : "System" and file.extension : "tmpscan"
  )
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Memory Dump File with Unusual Extension

Memory dumps capture the contents of system memory, often used for debugging or forensic analysis. Adversaries may disguise these files with atypical extensions to evade detection, potentially hiding credential dumping activities. The detection rule identifies such anomalies by checking for specific memory dump signatures and filtering out known benign processes and extensions, thus highlighting suspicious file creations.

### Possible investigation steps

- Review the alert details to understand the context, including the file path, file name, and the unusual extension used for the memory dump file.
- Verify the file header bytes to confirm the presence of the "MDMP" signature, ensuring it matches the expected pattern "4d444d50*".
- Check the process that created the file by examining the `process.executable` and `process.name` fields to determine if it is a known or trusted application.
- Investigate the parent process of the file creation event to understand the process hierarchy and identify any potentially malicious parent processes.
- Use Osquery to list all running processes and their associated command lines to identify any suspicious activities or processes that may have interacted with the memory dump file:
  ```sql
  SELECT pid, name, path, cmdline FROM processes WHERE path LIKE 'C:\\\\%';
  ```
- Examine the file creation time and correlate it with other system events or logs to identify any unusual activities or patterns around that time.
- Check for any recent changes in the system's security settings or configurations that might have allowed the creation of such files.
- Investigate the user account context under which the file was created to determine if it aligns with expected behavior or if it indicates potential compromise.
- Review network logs for any outbound connections from the host around the time of the file creation to detect potential data exfiltration attempts.
- Cross-reference the alert with other security tools or logs to gather additional context and corroborate findings, such as endpoint detection and response (EDR) solutions or SIEM logs.

### False positive analysis

- Known false positives may arise from legitimate software that generates memory dumps with non-standard extensions for internal use or debugging purposes. 
- Security tools or monitoring software might create memory dumps with unusual extensions as part of their normal operation, which could trigger the rule.
- Developers or IT personnel might intentionally use non-standard extensions for memory dumps during testing or troubleshooting to avoid overwriting existing files.
- To manage these false positives, users can create exceptions for specific processes or file paths known to generate benign memory dumps with unusual extensions.
- Users should regularly review and update the list of exceptions to ensure that only verified non-threatening behaviors are excluded, maintaining a balance between security and operational efficiency.

### Response and remediation

- Isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify the source of the memory dump file creation, focusing on processes and users involved.
- Analyze the memory dump file to determine if sensitive information, such as credentials, has been compromised.
- Remove any unauthorized or suspicious files and processes identified during the investigation.
- Apply security patches and updates to the operating system and applications to mitigate known vulnerabilities.
- Review and enhance logging policies to ensure comprehensive monitoring of file creation events and process activities.
- Integrate security solutions such as Endpoint Detection and Response (EDR) tools to improve threat detection and response capabilities.
- Restore the system from a known good backup if necessary, ensuring that the backup is free from compromise.
- Implement hardening measures, such as enforcing least privilege access and disabling unnecessary services, to reduce the attack surface.
- Escalate the incident to the security team or relevant authorities if the investigation reveals a significant breach or ongoing threat."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.001"
name = "LSASS Memory"
reference = "https://attack.mitre.org/techniques/T1003/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1036"
name = "Masquerading"
reference = "https://attack.mitre.org/techniques/T1036/"
[[rule.threat.technique.subtechnique]]
id = "T1036.008"
name = "Masquerade File Type"
reference = "https://attack.mitre.org/techniques/T1036/008/"



[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

