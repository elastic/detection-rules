[metadata]
bypass_bbr_timing = true
creation_date = "2023/08/09"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/10"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies instances of VLC-related DLLs which are not signed by the original developer. Attackers may name their
payload as legitimate applications to blend into the environment, or embedding its malicious code within legitimate
applications to deceive machine learning algorithms by incorporating authentic and benign code.
"""
from = "now-9m"
index = ["logs-endpoint.events.library-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Masquerading as VLC DLL"
risk_score = 21
rule_id = "4494c14f-5ff8-4ed2-8e99-bf816a1642fc"
severity = "low"
tags = [
    "Domain: Endpoint",
    "Data Source: Elastic Defend",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Tactic: Persistence",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
library where host.os.type == "windows" and event.action == "load" and
  dll.name : ("libvlc.dll", "libvlccore.dll", "axvlc.dll") and
  not (
    dll.code_signature.subject_name : ("VideoLAN", "716F2E5E-A03A-486B-BC67-9B18474B9D51")
    and dll.code_signature.trusted == true
  )
'''
note = """## Triage and analysis

> **Disclaimer**:
> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Masquerading as VLC DLL

VLC media player uses specific DLLs for its functionality, typically signed by VideoLAN to ensure authenticity. Adversaries may exploit this by creating malicious DLLs with similar names to blend into systems, bypassing security measures. The detection rule identifies such anomalies by flagging unsigned or improperly signed DLLs mimicking VLC, focusing on defense evasion and persistence tactics.

### Possible investigation steps

- Review the alert details to identify the specific DLL name that triggered the alert, focusing on "libvlc.dll", "libvlccore.dll", or "axvlc.dll".
- Check the code signature details of the flagged DLL to confirm the absence of a valid signature from "VideoLAN" or the specific subject name "716F2E5E-A03A-486B-BC67-9B18474B9D51".
- Investigate the file path and location of the suspicious DLL to determine if it resides in a directory typically associated with VLC installations or if it is in an unusual location.
- Analyze the process that loaded the DLL, including the parent process, to understand the context of its execution and identify any potentially malicious activity.
- Correlate the event with other security logs or alerts to identify any related suspicious activities or patterns, such as recent downloads or installations that could have introduced the DLL.
- Conduct a reputation check on the DLL file hash using threat intelligence sources to determine if it is known to be associated with malicious activity.
- If necessary, isolate the affected system to prevent further potential compromise and perform a deeper forensic analysis to uncover any additional indicators of compromise.

### False positive analysis

- Legitimate software updates or installations may temporarily load unsigned or improperly signed VLC-related DLLs. Users can monitor the frequency and context of these events to determine if they align with known update schedules.
- Custom or third-party applications that integrate VLC components might use their own versions of VLC DLLs. Users should verify the source and purpose of these applications and consider adding them to an exception list if deemed safe.
- Development or testing environments may intentionally use modified VLC DLLs for debugging or feature testing. Users can exclude these environments from the rule or adjust the rule's scope to focus on production systems only.
- Security tools or monitoring software might load or interact with VLC DLLs in a way that triggers the rule. Users should review the behavior of these tools and whitelist them if they are confirmed to be non-threatening.

### Response and remediation

- Isolate the affected system from the network to prevent further spread of the potential threat and to contain any malicious activity.
- Terminate any processes associated with the suspicious DLLs to halt any ongoing malicious operations.
- Remove the identified unsigned or improperly signed DLLs from the system to eliminate the immediate threat.
- Conduct a thorough scan of the affected system using updated antivirus and anti-malware tools to detect and remove any additional malicious files or remnants.
- Restore any affected files or system components from a known good backup to ensure system integrity and functionality.
- Review and update endpoint protection policies to ensure that only signed and trusted DLLs are allowed to load, enhancing future detection and prevention.
- Escalate the incident to the security operations center (SOC) or relevant security team for further analysis and to determine if additional systems are affected, ensuring comprehensive threat management."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1036"
name = "Masquerading"
reference = "https://attack.mitre.org/techniques/T1036/"
[[rule.threat.technique.subtechnique]]
id = "T1036.001"
name = "Invalid Code Signature"
reference = "https://attack.mitre.org/techniques/T1036/001/"

[[rule.threat.technique.subtechnique]]
id = "T1036.005"
name = "Match Legitimate Name or Location"
reference = "https://attack.mitre.org/techniques/T1036/005/"



[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1554"
name = "Compromise Host Software Binary"
reference = "https://attack.mitre.org/techniques/T1554/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

