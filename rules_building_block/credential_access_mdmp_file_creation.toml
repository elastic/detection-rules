[metadata]
bypass_bbr_timing = true
creation_date = "2023/09/21"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/15"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies the creation or modification of a medium size memory dump file which can indicate an attempt to access
credentials from a process memory.
"""
from = "now-9m"
index = ["logs-endpoint.events.file-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Credential Access via Memory Dump File Creation"
risk_score = 21
rule_id = "e707a7be-cc52-41ac-8ab3-d34b38c20005"
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "windows" and event.type == "creation" and

  /* MDMP header */
  file.Ext.header_bytes : "4d444d50*" and file.size >= 30000 and
  not

  (
    (
      process.name : "System" or
      process.executable : (
        "?:\\Windows\\System32\\WerFault.exe",
        "?:\\Windows\\SysWOW64\\WerFault.exe",
        "?:\\Windows\\System32\\Wermgr.exe",
        "?:\\Windows\\SysWOW64\\Wermgr.exe",
        "?:\\Windows\\System32\\WerFaultSecure.exe",
        "?:\\Windows\\SysWOW64\\WerFaultSecure.exe",
        "?:\\Windows\\System32\\WUDFHost.exe",
        "C:\\Windows\\System32\\rdrleakdiag.exe",
        "?:\\Windows\\System32\\Taskmgr.exe",
        "?:\\Windows\\SysWOW64\\Taskmgr.exe",
        "?:\\Program Files\\*.exe",
        "?:\\Program Files (x86)\\*.exe",
        "?:\\Windows\\SystemApps\\*.exe",
        "?:\\Users\\*\\AppData\\Roaming\\Zoom\\bin\\zCrashReport64.exe",
        "?:\\Windows\\CCM\\ccmdump.exe",
        "?:\\$WINDOWS.~BT\\Sources\\SetupHost.exe"
      ) and process.code_signature.trusted == true
    ) or
    (
      file.path : (
        "?:\\ProgramData\\Microsoft\\Windows\\WER\\*",
        "?:\\ProgramData\\Microsoft\\WDF\\*",
        "?:\\ProgramData\\Alteryx\\ErrorLogs\\*",
        "?:\\ProgramData\\Goodix\\*",
        "?:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\*",
        "?:\\Users\\*\\AppData\\Roaming\\Zoom\\logs\\zoomcrash*",
        "?:\\Users\\*\\AppData\\*\\Crashpad\\*",
        "?:\\Users\\*\\AppData\\*\\crashpaddb\\*",
        "?:\\Users\\*\\AppData\\*\\HungReports\\*",
        "?:\\Users\\*\\AppData\\*\\CrashDumps\\*",
        "?:\\Users\\*\\AppData\\*\\NativeCrashReporting\\*",
        "?:\\Program Files (x86)\\*\\Crashpad\\*",
        "?:\\Program Files\\*\\Crashpad\\*"
      ) and (process.code_signature.trusted == true or process.executable == null)
    )
  )
'''
note = """## Triage and analysis

> **Disclaimer**:
> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Credential Access via Memory Dump File Creation

Memory dump files capture the state of a process's memory, which can include sensitive information like credentials. Adversaries exploit this by creating or modifying dump files to extract credentials. The detection rule identifies suspicious dump file activities by monitoring file creation events, focusing on specific file headers and sizes, while excluding trusted processes and paths to reduce false positives. This helps in identifying unauthorized attempts to access credentials.

### Possible investigation steps

- Review the file creation event details to confirm the presence of the MDMP header (4d444d50) and verify the file size is 30,000 bytes or larger, as these are key indicators of a suspicious memory dump.
- Identify the process responsible for creating the dump file by examining the process.name and process.executable fields. Check if the process is listed as a trusted executable in the exclusion list.
- Investigate the file path where the dump file was created. Ensure it does not match any of the known trusted paths specified in the rule, such as "?:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\WER\\\\*" or "?:\\\\Users\\\\*\\\\AppData\\\\*\\\\CrashDumps\\\\*".
- Check the process.code_signature.trusted field to determine if the process creating the dump file is signed and trusted. If not, this could indicate a higher risk of malicious activity.
- Correlate the event with other recent alerts or logs from the same host to identify any patterns or additional suspicious activities that might suggest credential dumping attempts.
- If the process or path is not trusted, consider isolating the host for further forensic analysis to prevent potential credential theft or further compromise.

### False positive analysis

- System processes like WerFault.exe and Wermgr.exe are known to create legitimate memory dump files. To reduce false positives, ensure these processes are marked as trusted in the detection rule.
- Applications installed in standard directories such as Program Files or Program Files (x86) may generate dump files during normal operations. Consider excluding these paths if the applications are verified and trusted.
- User applications like Zoom may create crash reports in user-specific directories. If these are frequent and verified as non-malicious, add exceptions for these paths to minimize alerts.
- Windows Error Reporting (WER) paths are common for legitimate dump file creation. Exclude these paths if the processes involved are trusted and verified to prevent unnecessary alerts.
- Ensure that any process with a valid and trusted code signature is excluded from triggering alerts, as these are less likely to be associated with malicious activity.

### Response and remediation

- Isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Terminate any suspicious processes identified in the alert that are not part of the trusted list, especially those involved in creating or modifying memory dump files.
- Conduct a thorough review of the affected system's memory dump files to identify any extracted credentials or sensitive information.
- Change credentials for any accounts potentially exposed through the memory dump, prioritizing high-privilege accounts.
- Restore the affected system from a known good backup if unauthorized modifications are detected and cannot be easily remediated.
- Implement additional monitoring on the affected system and similar systems to detect any further attempts at credential access via memory dumps.
- Escalate the incident to the security operations center (SOC) or incident response team for further investigation and to determine if broader organizational impacts exist."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.001"
name = "LSASS Memory"
reference = "https://attack.mitre.org/techniques/T1003/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

