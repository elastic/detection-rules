[metadata]
bypass_bbr_timing = true
creation_date = "2023/09/21"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies the creation or modification of a medium size memory dump file which can indicate an attempt to access
credentials from a process memory.
"""
from = "now-9m"
index = ["logs-endpoint.events.file-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Credential Access via Memory Dump File Creation"
risk_score = 21
rule_id = "e707a7be-cc52-41ac-8ab3-d34b38c20005"
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "windows" and event.type == "creation" and

  /* MDMP header */
  file.Ext.header_bytes : "4d444d50*" and file.size >= 30000 and
  not

  (
    (
      process.name : "System" or
      process.executable : (
        "?:\\Windows\\System32\\WerFault.exe",
        "?:\\Windows\\SysWOW64\\WerFault.exe",
        "?:\\Windows\\System32\\Wermgr.exe",
        "?:\\Windows\\SysWOW64\\Wermgr.exe",
        "?:\\Windows\\System32\\WerFaultSecure.exe",
        "?:\\Windows\\SysWOW64\\WerFaultSecure.exe",
        "?:\\Windows\\System32\\WUDFHost.exe",
        "C:\\Windows\\System32\\rdrleakdiag.exe",
        "?:\\Windows\\System32\\Taskmgr.exe",
        "?:\\Windows\\SysWOW64\\Taskmgr.exe",
        "?:\\Program Files\\*.exe",
        "?:\\Program Files (x86)\\*.exe",
        "?:\\Windows\\SystemApps\\*.exe",
        "?:\\Users\\*\\AppData\\Roaming\\Zoom\\bin\\zCrashReport64.exe",
        "?:\\Windows\\CCM\\ccmdump.exe"
      ) and process.code_signature.trusted == true
    ) or
    (
      file.path : (
        "?:\\ProgramData\\Microsoft\\Windows\\WER\\*",
        "?:\\ProgramData\\Microsoft\\WDF\\*",
        "?:\\ProgramData\\Alteryx\\ErrorLogs\\*",
        "?:\\ProgramData\\Goodix\\*",
        "?:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\*",
        "?:\\Users\\*\\AppData\\Roaming\\Zoom\\logs\\zoomcrash*",
        "?:\\Users\\*\\AppData\\*\\Crashpad\\*",
        "?:\\Users\\*\\AppData\\*\\crashpaddb\\*",
        "?:\\Users\\*\\AppData\\*\\HungReports\\*",
        "?:\\Users\\*\\AppData\\*\\CrashDumps\\*",
        "?:\\Users\\*\\AppData\\*\\NativeCrashReporting\\*"
      ) and (process.code_signature.trusted == true or process.executable == null)
    )
  )
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Credential Access via Memory Dump File Creation

Memory dump files capture the state of a process's memory, often used for debugging. Adversaries exploit this by creating dumps to extract sensitive data, like credentials. The detection rule identifies suspicious dump file creation on Windows systems, focusing on files with specific headers and sizes, while excluding trusted processes and paths, to flag potential credential access attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of the "4d444d50" header in the file, indicating a memory dump file.
- Verify the file size to ensure it meets the threshold of 30,000 bytes or more, which aligns with the rule's criteria for medium-sized dumps.
- Check the process name and executable path to determine if the process is listed as a trusted process or path in the exclusion list.
- Investigate the process code signature to confirm whether it is marked as trusted, which might indicate a false positive.
- Examine the file path to see if it matches any of the excluded directories, such as "?:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\WER\\\\*" or "?:\\\\Users\\\\*\\\\AppData\\\\*\\\\CrashDumps\\\\*".
- Use Osquery to gather additional context about the process that created the dump file. For example, run the following query to list processes with their command line arguments: `SELECT pid, name, path, cmdline FROM processes WHERE path LIKE 'C:\\\\Windows\\\\System32\\\\%' OR path LIKE 'C:\\\\Program Files\\\\%';`
- Check the system's event logs for any related events around the time of the dump file creation to identify any suspicious activities or anomalies.
- Investigate the user account associated with the process to determine if it has the necessary privileges to create memory dumps and if the activity aligns with normal behavior.
- Analyze network activity from the host to identify any unusual outbound connections that might suggest data exfiltration attempts.
- Correlate the alert with other security events or alerts from the same host or user to identify patterns or additional indicators of compromise.

### False positive analysis

- Memory dump files created by legitimate system processes such as Windows Error Reporting (WER) can trigger false positives. These processes are often involved in crash reporting and diagnostics, which are benign activities.
- Trusted third-party applications, like Zoom, may generate memory dumps for crash analysis, leading to false positives. These applications are typically signed and can be verified through their code signatures.
- System administrators or developers might intentionally create memory dumps for debugging purposes, which should be considered non-threatening if performed by authorized personnel.
- To manage these false positives, users can refine the detection rule by adding exceptions for known trusted processes and paths, ensuring that only suspicious activities are flagged.
- Regularly update the list of trusted applications and paths based on organizational needs and software updates to minimize unnecessary alerts.
- Implement a review process for flagged events to verify the legitimacy of the memory dump creation, allowing for the adjustment of rules and exceptions as needed.

### Response and remediation

- Isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify the source of the memory dump file creation, focusing on any untrusted processes or unusual activity.
- Review the process and file paths involved in the alert to determine if they align with known malicious behaviors or anomalies.
- If malicious activity is confirmed, remove any unauthorized software or malware from the system using trusted antivirus or endpoint detection and response tools.
- Change all potentially compromised credentials, especially those with administrative privileges, to prevent further unauthorized access.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if other systems are affected.
- Implement enhanced logging policies to capture detailed process creation, file access, and network activity for future investigations.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to correlate alerts and improve detection capabilities.
- Restore the system to its operational state by applying the latest security patches and updates, and ensure all security configurations are properly set.
- Harden the system by disabling unnecessary services, enforcing least privilege access, and regularly reviewing security policies to mitigate future risks."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.001"
name = "LSASS Memory"
reference = "https://attack.mitre.org/techniques/T1003/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

