[metadata]
creation_date = "2023/09/25"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies child processes of frequently targeted Microsoft Office applications (Word, PowerPoint, Excel) with unusual
process arguments and path. This behavior is often observed during exploitation of Office applications or from documents
with malicious macros.
"""
from = "now-119m"
index = ["logs-endpoint.events.process-*"]
interval = "60m"
language = "eql"
license = "Elastic License v2"
name = "Potential Process Injection from Malicious Document"
risk_score = 21
rule_id = "1c5a04ae-d034-41bf-b0d8-96439b5cc774"
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Tactic: Privilege Escalation",
    "Tactic: Initial Access",
    "Rule Type: BBR",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "windows" and event.action == "start" and
  process.parent.name : ("excel.exe", "powerpnt.exe", "winword.exe") and
  process.args_count == 1 and
  process.executable : (
    "?:\\Windows\\SysWOW64\\*.exe", "?:\\Windows\\system32\\*.exe"
  ) and
  not (process.executable : "?:\\Windows\\System32\\spool\\drivers\\x64\\*" and
       process.code_signature.trusted == true and not process.code_signature.subject_name : "Microsoft *") and
  not process.executable : (
    "?:\\Windows\\Sys*\\Taskmgr.exe",
    "?:\\Windows\\Sys*\\ctfmon.exe",
    "?:\\Windows\\System32\\notepad.exe")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Process Injection from Malicious Document

Microsoft Office applications are often targeted by adversaries who exploit vulnerabilities or use malicious macros to execute unauthorized code. This can lead to process injection, where malicious code is executed within legitimate processes, evading detection. The detection rule identifies unusual child processes spawned by Office apps, focusing on atypical arguments and paths, to flag potential injection attempts. By monitoring these anomalies, the rule helps in identifying and mitigating threats associated with process injection tactics.

### Possible investigation steps

- Review the alert details to confirm the parent process is one of the targeted Microsoft Office applications: excel.exe, powerpnt.exe, or winword.exe.
- Examine the child process executable path to verify if it matches the suspicious paths: "?:\\\\Windows\\\\SysWOW64\\\\*.exe" or "?:\\\\Windows\\\\system32\\\\*.exe".
- Check the process arguments count to ensure it is exactly one, as specified in the detection rule.
- Investigate the process code signature to determine if it is untrusted or if the subject name does not start with "Microsoft".
- Cross-reference the child process executable against known legitimate processes to rule out false positives, focusing on exclusions like Taskmgr.exe, ctfmon.exe, and notepad.exe.
- Use Osquery to gather additional context about the suspicious process. Example query: `SELECT * FROM processes WHERE name = '<suspicious_process_name>' AND path LIKE 'C:\\\\Windows\\\\SysWOW64\\\\%' OR path LIKE 'C:\\\\Windows\\\\system32\\\\%';`
- Analyze the parent process's recent activity, including any network connections or file modifications, to identify potential malicious behavior.
- Review the document or macro that initiated the Office application to identify any embedded scripts or suspicious content.
- Check for any recent patches or vulnerabilities related to the Office application version in use, which might have been exploited.
- Correlate the alert with other security events or logs from the same host to identify any patterns or additional indicators of compromise.

### False positive analysis

- Known false positives may include legitimate applications or scripts that are executed with minimal arguments from Office applications, such as internal automation tools or scripts used by IT departments for maintenance tasks.
- System administrators might run diagnostic or monitoring tools that match the rule's criteria, especially if these tools are executed from common system directories like SysWOW64 or system32.
- Users can handle these false positives by creating exceptions for specific processes that are known to be safe and frequently triggered, such as internal scripts or tools that have been verified and are necessary for business operations.
- To manage false positives, users can refine the detection rule by adding exclusions for specific executable paths or process names that are consistently identified as non-threatening, ensuring these are well-documented and reviewed regularly to maintain security integrity.
- It is important to monitor the frequency and context of these alerts to distinguish between benign and potentially malicious activities, adjusting the rule's parameters as needed to reduce noise without compromising detection capabilities.

### Response and remediation

- Isolate the affected system from the network to prevent further spread of the potential threat.
- Analyze the suspicious process and its parent Office application to confirm if it is indeed a malicious activity.
- Terminate any identified malicious processes and remove any associated files or executables from the system.
- Conduct a thorough scan of the system using updated antivirus and anti-malware tools to ensure no other threats are present.
- Review and collect relevant logs, including process creation and network activity, to understand the scope and impact of the incident.
- Escalate the incident to the security operations team for further investigation and to determine if other systems are affected.
- Implement enhanced logging policies to capture detailed process execution and network connections for future incidents.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to improve detection capabilities.
- Restore the system from a known good backup if necessary, ensuring that all security patches and updates are applied.
- Apply hardening measures such as disabling macros by default in Office applications and enforcing strict application whitelisting policies."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1055"
name = "Process Injection"
reference = "https://attack.mitre.org/techniques/T1055/"


[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1055"
name = "Process Injection"
reference = "https://attack.mitre.org/techniques/T1055/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1566"
name = "Phishing"
reference = "https://attack.mitre.org/techniques/T1566/"
[[rule.threat.technique.subtechnique]]
id = "T1566.001"
name = "Spearphishing Attachment"
reference = "https://attack.mitre.org/techniques/T1566/001/"



[rule.threat.tactic]
id = "TA0001"
name = "Initial Access"
reference = "https://attack.mitre.org/tactics/TA0001/"

