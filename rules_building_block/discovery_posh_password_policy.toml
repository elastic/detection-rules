[metadata]
creation_date = "2023/07/12"
integration = ["windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
building_block_type = "default"
description = """
Identifies the use of Cmdlets and methods related to remote execution activities using WinRM. Attackers can abuse WinRM
to perform lateral movement using built-in tools.
"""
from = "now-119m"
index = ["winlogbeat-*", "logs-windows.powershell*"]
interval = "60m"
language = "kuery"
license = "Elastic License v2"
name = "PowerShell Script with Password Policy Discovery Capabilities"
risk_score = 21
rule_id = "fe25d5bc-01fa-494a-95ff-535c29cc4c96"
setup = """## Setup

The 'PowerShell Script Block Logging' logging policy must be enabled.
Steps to implement the logging policy with Advanced Audit Configuration:

```
Computer Configuration >
Administrative Templates >
Windows PowerShell >
Turn on PowerShell Script Block Logging (Enable)
```

Steps to implement the logging policy via registry:

```
reg add "hklm\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging" /v EnableScriptBlockLogging /t REG_DWORD /d 1
```
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Tactic: Execution",
    "Data Source: PowerShell Logs",
    "Rule Type: BBR",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.category: "process" and host.os.type:windows and
(
  powershell.file.script_block_text: (
    "Get-ADDefaultDomainPasswordPolicy" or
    "Get-ADFineGrainedPasswordPolicy" or
    "Get-ADUserResultantPasswordPolicy" or
    "Get-DomainPolicy" or
    "Get-GPPPassword" or
    "Get-PassPol"
  )
  or
  powershell.file.script_block_text: (
    ("defaultNamingContext" or "ActiveDirectory.DirectoryContext" or "ActiveDirectory.DirectorySearcher") and
    (
      (
        ".MinLengthPassword" or
        ".MinPasswordAge" or
        ".MaxPasswordAge"
      ) or
      (
        "minPwdAge" or
        "maxPwdAge" or
        "minPwdLength"
      ) or
      (
        "msDS-PasswordSettings"
      )
    )
  )
) and not powershell.file.script_block_text : (
    "sentinelbreakpoints" and "Set-PSBreakpoint" and "PowerSploitIndicators"
  )
  and not 
  (
    powershell.file.script_block_text : ("43c15630-959c-49e4-a977-758c5cc93408" and "CmdletsToExport" and "ActiveDirectory.Types.ps1xml")
  )
  and not user.id : "S-1-5-18"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating PowerShell Script with Password Policy Discovery Capabilities

PowerShell is a powerful scripting language used for automating tasks in Windows environments, including querying Active Directory for password policies. Adversaries exploit this by executing scripts to discover password policies, aiding in lateral movement and privilege escalation. The detection rule identifies suspicious PowerShell activity by monitoring specific cmdlets and script patterns associated with password policy queries, while excluding known benign scripts and system accounts.

### Possible investigation steps

- Review the alert details to understand which specific PowerShell cmdlet or script pattern triggered the alert, focusing on fields like `powershell.file.script_block_text`.
- Check the `user.id` field to identify the user account associated with the suspicious activity, ensuring it is not a known system account like "S-1-5-18".
- Investigate the `event.category` and `host.os.type` fields to confirm the activity occurred on a Windows host and is categorized as a process event.
- Examine the script block text for any of the specific cmdlets or methods such as "Get-ADDefaultDomainPasswordPolicy" or "ActiveDirectory.DirectorySearcher" to determine the nature of the password policy query.
- Cross-reference the `powershell.file.script_block_text` with known benign scripts or exclusions, such as "sentinelbreakpoints" or "43c15630-959c-49e4-a977-758c5cc93408", to rule out false positives.
- Use Osquery to gather additional context on the process execution. For example, run the following query to list recent PowerShell executions: `SELECT * FROM processes WHERE name = 'powershell.exe';`
- Investigate the parent process of the PowerShell execution to determine if it was initiated by a legitimate application or a potentially malicious process.
- Check for any network connections or remote execution attempts associated with the PowerShell process, particularly if WinRM is involved, to assess potential lateral movement.
- Review historical logs for any previous similar activities by the same user or on the same host to identify patterns or repeated attempts.
- Correlate the findings with other security alerts or logs from the same timeframe to build a comprehensive picture of the potential threat actor's activities.

### False positive analysis

- Known false positives may include legitimate administrative scripts that query Active Directory for password policies as part of routine security audits or compliance checks. These scripts often use the same cmdlets and methods flagged by the detection rule.
- System administrators using PowerShell to manage password policies across multiple domains might trigger the rule, especially if they use custom scripts that resemble the patterns identified in the detection rule.
- Security tools or monitoring solutions that perform regular checks on password policies for reporting purposes can also generate false positives if they utilize PowerShell scripts with similar characteristics.
- To manage these false positives, users can create exceptions for specific script block texts that are known to be benign, such as those used by trusted administrative tools or scripts.
- Excluding specific user accounts, such as those belonging to system administrators or service accounts that regularly perform these tasks, can help reduce false positives. This can be done by adding their user IDs to the exclusion list.
- Regularly reviewing and updating the exclusion list to include new benign scripts or accounts as they are identified can help maintain the balance between security and operational efficiency.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further lateral movement and potential data exfiltration.
- Conduct a thorough investigation to identify the source of the PowerShell script execution, including reviewing logs for suspicious user activity and correlating with known threat intelligence.
- Terminate any malicious PowerShell processes identified during the investigation to halt ongoing unauthorized activities.
- Reset passwords for any compromised accounts and enforce a password policy that includes complexity requirements and regular expiration.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging for PowerShell activities, including script block logging and transcription, to improve future detection and investigation capabilities.
- Integrate security information and event management (SIEM) solutions with threat intelligence feeds to identify and respond to similar threats more effectively.
- Restore the system to its operational state by applying the latest security patches and updates, and ensure that all security configurations are in place.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Implement hardening measures such as disabling unnecessary services like WinRM, applying least privilege principles, and conducting regular security awareness training for users."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1201"
name = "Password Policy Discovery"
reference = "https://attack.mitre.org/techniques/T1201/"


[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.001"
name = "PowerShell"
reference = "https://attack.mitre.org/techniques/T1059/001/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

