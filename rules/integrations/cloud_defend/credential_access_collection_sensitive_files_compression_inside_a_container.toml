[metadata]
creation_date = "2023/05/12"
integration = ["cloud_defend"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the use of a compression utility to collect known files containing sensitive information, such as credentials
and system configurations inside a container.
"""
from = "now-6m"
index = ["logs-cloud_defend*"]
interval = "5m"
language = "eql"
license = "Elastic License v2"
name = "Sensitive Files Compression Inside A Container"
risk_score = 47
rule_id = "475b42f0-61fb-4ef0-8a85-597458bfb0a1"
severity = "medium"
tags = [
    "Data Source: Elastic Defend for Containers",
    "Domain: Container",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Collection",
    "Tactic: Credential Access",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where container.id: "*" and event.type== "start" and 

/*account for tools that execute utilities as a subprocess, in this case the target utility name will appear as a process arg*/  
(process.name: ("zip", "tar", "gzip", "hdiutil", "7z") or process.args: ("zip", "tar", "gzip", "hdiutil", "7z"))
and process.args: ( 
"/root/.ssh/id_rsa", 
"/root/.ssh/id_rsa.pub", 
"/root/.ssh/id_ed25519", 
"/root/.ssh/id_ed25519.pub", 
"/root/.ssh/authorized_keys", 
"/root/.ssh/authorized_keys2", 
"/root/.ssh/known_hosts", 
"/root/.bash_history", 
"/etc/hosts", 
"/home/*/.ssh/id_rsa", 
"/home/*/.ssh/id_rsa.pub", 
"/home/*/.ssh/id_ed25519",
"/home/*/.ssh/id_ed25519.pub",
"/home/*/.ssh/authorized_keys",
"/home/*/.ssh/authorized_keys2",
"/home/*/.ssh/known_hosts",
"/home/*/.bash_history",
"/root/.aws/credentials",
"/root/.aws/config",
"/home/*/.aws/credentials",
"/home/*/.aws/config",
"/root/.docker/config.json",
"/home/*/.docker/config.json",
"/etc/group",
"/etc/passwd",
"/etc/shadow",
"/etc/gshadow")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Sensitive Files Compression Inside A Container

Containers encapsulate applications and their dependencies, often containing sensitive files like credentials and configurations. Adversaries exploit compression utilities within containers to exfiltrate these files, bypassing security controls. The detection rule identifies suspicious compression activities by monitoring process executions and arguments for known utilities and sensitive file paths, alerting analysts to potential credential access attempts.

### Possible investigation steps

- Review the alert details to identify the specific container ID (`container.id`) where the suspicious activity was detected.
- Examine the `process.name` and `process.args` fields to determine which compression utility was used and what specific files were targeted.
- Check the `event.type` field to confirm the process start event and gather additional context about the timing and frequency of the activity.
- Use Osquery to list all running processes within the container to identify any other suspicious activities. Example query: `SELECT * FROM processes WHERE pid IN (SELECT pid FROM process_open_sockets WHERE container_id = '<container.id>');`
- Investigate the container's history and logs to identify any recent changes or deployments that might have introduced vulnerabilities.
- Analyze the container's network activity to detect any unusual outbound connections that could indicate data exfiltration.
- Review the container's file system for any newly created or modified files that could be related to the compression activity.
- Check for any other alerts or anomalies associated with the same container or host to identify potential patterns or related incidents.
- Verify the integrity and permissions of the sensitive files listed in the `process.args` to ensure they have not been altered or accessed inappropriately.
- Consult with the development or operations team to understand the expected behavior of the container and confirm whether the detected activity aligns with legitimate use cases.

### False positive analysis

- Routine backup processes: Automated scripts or scheduled tasks that compress sensitive files for backup purposes may trigger alerts. Users can handle these by identifying and excluding specific backup processes or scripts from the rule.
- Development and testing activities: Developers or system administrators might compress sensitive files during testing or development within containers. To manage this, users can create exceptions for known development environments or user accounts.
- Configuration management tools: Tools like Ansible, Puppet, or Chef might compress configuration files as part of their operations. Users should identify these tools and exclude their activities from the rule to prevent false positives.
- Container orchestration tasks: Orchestration platforms like Kubernetes might perform legitimate compression tasks for configuration management. Users can exclude specific container IDs or orchestration-related processes to reduce false positives.
- Security audits and compliance checks: Security teams might intentionally compress sensitive files for audit purposes. Users should coordinate with security teams to whitelist these activities and avoid unnecessary alerts.

### Response and remediation

- Immediately isolate the affected container to prevent further data exfiltration and unauthorized access.
- Conduct a thorough investigation to identify the scope of the compromise, focusing on logs and process execution details related to the detected compression activity.
- Review and analyze the container's file system to identify any additional unauthorized changes or access to sensitive files.
- Remove any unauthorized compression utilities or scripts found within the container to prevent further exploitation.
- Rotate and update all credentials and keys that may have been exposed, including SSH keys, AWS credentials, and Docker configurations.
- Escalate the incident to the security operations team for further analysis and to determine if the threat actor has accessed other parts of the network.
- Implement enhanced logging and monitoring within the container environment to detect similar activities in the future, focusing on process execution and file access patterns.
- Integrate security tools with container orchestration platforms to automate the detection and response to suspicious activities.
- Restore the container from a known good backup to ensure the system is free from any malicious modifications.
- Apply hardening measures such as restricting access to sensitive files, using least privilege principles, and regularly updating container images to mitigate future risks."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1552"
name = "Unsecured Credentials"
reference = "https://attack.mitre.org/techniques/T1552/"
[[rule.threat.technique.subtechnique]]
id = "T1552.001"
name = "Credentials In Files"
reference = "https://attack.mitre.org/techniques/T1552/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1560"
name = "Archive Collected Data"
reference = "https://attack.mitre.org/techniques/T1560/"
[[rule.threat.technique.subtechnique]]
id = "T1560.001"
name = "Archive via Utility"
reference = "https://attack.mitre.org/techniques/T1560/001/"



[rule.threat.tactic]
id = "TA0009"
name = "Collection"
reference = "https://attack.mitre.org/tactics/TA0009/"

