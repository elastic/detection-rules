[metadata]
creation_date = "2023/06/28"
integration = ["cloud_defend"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects the use of system search utilities like grep and find to search for AWS credentials inside a
container. Unauthorized access to these sensitive files could lead to further compromise of the container environment or
facilitate a container breakout to the underlying cloud environment.
"""
from = "now-6m"
index = ["logs-cloud_defend*"]
interval = "5m"
language = "eql"
license = "Elastic License v2"
name = "AWS Credentials Searched For Inside A Container"
references = ["https://sysdig.com/blog/threat-detection-aws-cloud-containers/"]
risk_score = 47
rule_id = "d0b0f3ed-0b37-44bf-adee-e8cb7de92767"
severity = "medium"
tags = [
    "Data Source: Elastic Defend for Containers",
    "Domain: Container",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where event.module == "cloud_defend" and     
  event.type == "start" and
  
/*account for tools that execute utilities as a subprocess, in this case the target utility name will appear as a process arg*/
(process.name : ("grep", "egrep", "fgrep", "find", "locate", "mlocate") or process.args : ("grep", "egrep", "fgrep", "find", "locate", "mlocate")) and 
process.args : ("*aws_access_key_id*", "*aws_secret_access_key*", "*aws_session_token*", "*accesskeyid*", "*secretaccesskey*", "*access_key*", "*.aws/credentials*")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating AWS Credentials Searched For Inside A Container

Containers often house applications that interact with AWS services, necessitating the storage of AWS credentials. Adversaries may exploit this by using search utilities to locate these credentials, potentially leading to unauthorized access. The detection rule identifies suspicious use of search tools within containers, focusing on attempts to locate AWS credential files, thus helping to thwart credential theft and subsequent attacks.

### Possible investigation steps

- Review the alert details to identify the specific container and process that triggered the rule, focusing on the `process.name` and `process.args` fields to understand which search utility was used and what specific AWS credential patterns were targeted.
- Examine the `event.module` and `event.type` fields to confirm the context of the event, ensuring it aligns with the expected behavior of a container environment.
- Check the container's metadata and logs to gather information about the container's purpose, owner, and any recent changes or deployments that might explain the search activity.
- Investigate the user or service account associated with the process to determine if the activity aligns with their typical behavior or if it appears suspicious.
- Use Osquery to list all running processes within the container to identify any other potentially malicious or unexpected processes. Example query: `SELECT pid, name, cmdline FROM processes WHERE name IN ('grep', 'find', 'locate');`
- Analyze the container's file system to check for the presence of AWS credential files and verify their integrity and access permissions.
- Review network logs to identify any outbound connections from the container that might indicate data exfiltration or communication with unauthorized external services.
- Correlate the event with other security alerts or logs from the same timeframe to identify any patterns or related suspicious activities within the container or across the environment.
- Investigate the history of the container image to ensure it has not been tampered with or contains embedded malicious scripts or tools.
- Consult with the development or operations team responsible for the container to verify if the search activity was part of legitimate troubleshooting or maintenance tasks.

### False positive analysis

- Developers or system administrators may legitimately use search utilities like grep or find to locate AWS credentials for debugging or configuration purposes within a container. These actions, while benign, can trigger the detection rule.
- Automated scripts or configuration management tools that verify the presence of AWS credentials as part of routine checks may also be flagged as suspicious activity.
- To manage these false positives, users can create exceptions for specific containers or processes known to perform legitimate searches for AWS credentials. This can be done by whitelisting certain process names or arguments that are part of routine operations.
- Users should regularly review and update their exception lists to ensure that only verified non-threatening behaviors are excluded, maintaining a balance between security and operational efficiency.

### Response and remediation

- Immediately isolate the affected container to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to determine the extent of the compromise, focusing on identifying any unauthorized access to AWS resources.
- Review container logs and AWS CloudTrail logs to trace any suspicious activities or access patterns related to the compromised credentials.
- Revoke and rotate the compromised AWS credentials to prevent further unauthorized access.
- Escalate the incident to the security operations team and relevant stakeholders, providing them with detailed findings and potential impacts.
- Implement enhanced logging and monitoring for container environments, ensuring that all access to sensitive files and credentials is logged and reviewed regularly.
- Integrate security tools that provide real-time alerts for suspicious activities within containers, such as unauthorized searches for credentials.
- Restore the container to its operational state by redeploying it from a known good image, ensuring that all security patches and configurations are up to date.
- Conduct a post-incident review to identify gaps in security controls and update policies and procedures to prevent similar incidents in the future.
- Apply hardening measures to container environments, such as using environment variables for credentials, implementing least privilege access, and regularly scanning for vulnerabilities."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1552"
name = "Unsecured Credentials"
reference = "https://attack.mitre.org/techniques/T1552/"
[[rule.threat.technique.subtechnique]]
id = "T1552.001"
name = "Credentials In Files"
reference = "https://attack.mitre.org/techniques/T1552/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

