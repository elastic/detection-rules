[metadata]
creation_date = "2023/05/12"
integration = ["cloud_defend"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects the use of system search utilities like grep and find to search for private SSH keys or passwords
inside a container. Unauthorized access to these sensitive files could lead to further compromise of the container
environment or facilitate a container breakout to the underlying host machine.
"""
from = "now-6m"
index = ["logs-cloud_defend*"]
interval = "5m"
language = "eql"
license = "Elastic License v2"
name = "Sensitive Keys Or Passwords Searched For Inside A Container"
references = ["https://sysdig.com/blog/cve-2021-25741-kubelet-falco/"]
risk_score = 47
rule_id = "9661ed8b-001c-40dc-a777-0983b7b0c91a"
severity = "medium"
tags = [
    "Data Source: Elastic Defend for Containers",
    "Domain: Container",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where container.id: "*" and event.type== "start" and
((
/*account for tools that execute utilities as a subprocess, in this case the target utility name will appear as a process arg*/  
  (process.name in ("grep", "egrep", "fgrep") or process.args in ("grep", "egrep", "fgrep")) 
    and process.args : ("*BEGIN PRIVATE*", "*BEGIN OPENSSH PRIVATE*", "*BEGIN RSA PRIVATE*", 
"*BEGIN DSA PRIVATE*", "*BEGIN EC PRIVATE*", "*pass*", "*ssh*", "*user*")
) 
or 
(
/*account for tools that execute utilities as a subprocess, in this case the target utility name will appear as a process arg*/
  (process.name in ("find", "locate", "mlocate") or process.args in ("find", "locate", "mlocate")) 
    and process.args : ("*id_rsa*", "*id_dsa*")
))
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Sensitive Keys Or Passwords Searched For Inside A Container

Containers encapsulate applications, isolating them from the host system, but they can still be vulnerable to attacks. Adversaries may exploit search utilities like grep and find to locate sensitive keys or passwords within a container, potentially leading to unauthorized access or container escape. The detection rule identifies suspicious use of these utilities by monitoring process activities and arguments, flagging attempts to search for private keys or password patterns, thus helping to prevent credential theft and maintain container security.

### Possible investigation steps

- Review the alert details to identify the specific container ID (`container.id`) where the suspicious activity was detected. This will help in focusing the investigation on the affected container.
- Examine the process name (`process.name`) and arguments (`process.args`) to determine which utility (e.g., grep, find) was used and what specific patterns or files were being searched for. This can provide insight into the intent of the search.
- Check the event type (`event.type`) to confirm that the process was indeed started, which indicates active execution of the search command.
- Investigate the user context under which the process was executed to determine if it was initiated by a legitimate user or a potential adversary. This can be done by reviewing user-related logs or metadata.
- Use Osquery to gather more information about the container environment. For example, run the following query to list all running processes within the container: `SELECT * FROM processes WHERE pid IN (SELECT pid FROM process_events WHERE container_id = '<container.id>');`
- Analyze the command history within the container, if available, to identify any previous commands that might indicate reconnaissance or preparatory actions leading up to the alert.
- Review network activity logs associated with the container to identify any unusual outbound connections that might suggest data exfiltration attempts.
- Check for any recent changes to the container's filesystem, especially in directories where sensitive keys or passwords are typically stored, to identify potential tampering or unauthorized access.
- Correlate the alert with other security events or logs from the same timeframe to identify any related suspicious activities or patterns that could indicate a broader attack.
- Consult threat intelligence sources to determine if there are any known campaigns or adversaries that use similar tactics, techniques, and procedures (TTPs) as those detected in the alert.

### False positive analysis

- Routine administrative tasks: System administrators may use grep or find to search for configuration files or logs that contain keywords like "pass" or "user" as part of regular maintenance or troubleshooting, which can trigger false positives.
- Automated scripts: Some automated scripts or monitoring tools might use these utilities to check for the presence of certain files or strings as part of their normal operation, leading to benign alerts.
- Development and testing: Developers working within containers might search for test keys or placeholder passwords during development, which are not indicative of malicious activity.
- Excluding known safe processes: Users can handle these false positives by creating exceptions for specific processes or scripts that are known to perform these searches as part of their legitimate function, ensuring that only unexpected or unauthorized searches are flagged.
- Contextual analysis: Reviewing the context in which the search utilities are used, such as the user account executing the command or the time of execution, can help differentiate between legitimate and suspicious activities.

### Response and remediation

- Immediately isolate the affected container to prevent further unauthorized access or potential container breakout.
- Conduct a thorough investigation to identify the source of the suspicious activity, including reviewing logs and process histories within the container.
- Verify if any sensitive keys or passwords have been accessed or exfiltrated, and rotate any compromised credentials promptly.
- Escalate the incident to the security operations team for further analysis and to determine if the threat has spread to other containers or the host system.
- Implement enhanced logging within the container environment to capture detailed process activities and access patterns for future investigations.
- Integrate security monitoring tools with centralized logging solutions to ensure real-time alerting and correlation of suspicious activities.
- Review and update container security policies to enforce least privilege access and restrict the use of search utilities to trusted users only.
- Apply security patches and updates to the container image and underlying host system to mitigate known vulnerabilities.
- Conduct a post-incident review to identify gaps in the current security posture and develop a plan to address these weaknesses.
- Educate development and operations teams on secure coding practices and the importance of safeguarding sensitive information within containers."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1552"
name = "Unsecured Credentials"
reference = "https://attack.mitre.org/techniques/T1552/"
[[rule.threat.technique.subtechnique]]
id = "T1552.001"
name = "Credentials In Files"
reference = "https://attack.mitre.org/techniques/T1552/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

