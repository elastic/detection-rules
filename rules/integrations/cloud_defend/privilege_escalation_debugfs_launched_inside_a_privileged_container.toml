[metadata]
creation_date = "2023/10/26"
integration = ["cloud_defend"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects the use of the built-in Linux DebugFS utility from inside a privileged container. DebugFS is a special
file system debugging utility which supports reading and writing directly from a hard drive device. When launched inside
a privileged container, a container deployed with all the capabilities of the host machine, an attacker can access
sensitive host level files which could be used for further privilege escalation and container escapes to the host
machine.
"""
from = "now-6m"
index = ["logs-cloud_defend*"]
interval = "5m"
language = "eql"
license = "Elastic License v2"
name = "File System Debugger Launched Inside a Privileged Container"
references = [
    "https://cyberark.wistia.com/medias/ygbzkzx93q?wvideo=ygbzkzx93q",
    "https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation#privileged",
]
risk_score = 47
rule_id = "97697a52-4a76-4f0a-aa4f-25c178aae6eb"
severity = "medium"
tags = [
    "Data Source: Elastic Defend for Containers",
    "Domain: Container",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where event.module == "cloud_defend" and     
  event.type == "start" and process.name == "debugfs" and 
  process.args : "/dev/sd*" and not process.args == "-R" and
  container.security_context.privileged == true
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating File System Debugger Launched Inside a Privileged Container

DebugFS is a Linux utility that allows direct interaction with file systems, typically used for debugging purposes. When executed within a privileged container, it can access host-level files, posing a security risk. Adversaries may exploit this to escalate privileges or escape the container. The detection rule identifies such misuse by monitoring DebugFS processes initiated in privileged containers, focusing on specific arguments that indicate potential malicious intent.

### Possible investigation steps

- Review the alert details to confirm the process name is "debugfs" and verify the presence of the specific arguments "/dev/sd*" to ensure the alert is not a false positive.
- Check the container's security context to confirm it is indeed privileged by examining the `container.security_context.privileged` field.
- Investigate the origin of the container by identifying the image and container ID to understand its purpose and whether it should have privileged access.
- Use Osquery to list all running processes within the container to identify any other suspicious activities. Example query: `SELECT * FROM processes WHERE pid IN (SELECT pid FROM process_open_sockets WHERE remote_address != '');`
- Examine the container's logs for any unusual activities or errors around the time the DebugFS process was started.
- Review the user account and credentials used to launch the container to determine if they have been compromised or misused.
- Investigate the host system for any signs of compromise or unauthorized access, focusing on the time frame when the DebugFS process was initiated.
- Check for any recent changes to the container's configuration or deployment scripts that might have inadvertently allowed privileged access.
- Correlate the event with other security alerts or logs from the same host or container to identify potential patterns or related incidents.
- Consult with the development or operations team to verify if there was a legitimate need for using DebugFS within a privileged container and gather context on any recent changes or deployments.

### False positive analysis

- DebugFS may be legitimately used by system administrators for troubleshooting or maintenance tasks within a privileged container, especially in environments where direct disk access is necessary for diagnostics. 
- Automated scripts or monitoring tools that perform regular checks on disk health or integrity might trigger this rule if they utilize DebugFS within a privileged container context.
- Development or testing environments where privileged containers are used to simulate production-like conditions might see DebugFS usage as part of routine operations, leading to false positives.
- To manage these false positives, users can create exceptions for known benign processes or scripts by specifying their unique identifiers or command patterns in the detection rule.
- Implementing a whitelist of trusted users or processes that are allowed to execute DebugFS within privileged containers can help reduce unnecessary alerts.
- Regularly review and update the list of exceptions to ensure that only legitimate activities are excluded, maintaining a balance between security and operational needs.

### Response and remediation

- Immediately isolate the affected container to prevent further access to host-level files and potential privilege escalation.
- Conduct a thorough investigation to determine the extent of the compromise, focusing on logs and process activity related to DebugFS usage.
- Review container deployment configurations to ensure that privileged containers are only used when absolutely necessary and with strict access controls.
- Remove any unauthorized or suspicious processes and files identified during the investigation from the container and host system.
- Apply security patches and updates to the container runtime and host operating system to mitigate known vulnerabilities.
- Implement strict logging policies to capture detailed process execution and container activity, ensuring that logs are stored securely and monitored regularly.
- Integrate security tools with SIEM systems to enhance real-time detection and alerting capabilities for suspicious container activities.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures accordingly.
- Restore the container and host system to a known good state from backups, ensuring that the restored environment is free from any malicious modifications.
- Harden container security by minimizing the use of privileged containers, employing least privilege principles, and using security features like AppArmor or SELinux for additional protection."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1611"
name = "Escape to Host"
reference = "https://attack.mitre.org/techniques/T1611/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

