[metadata]
creation_date = "2023/04/26"
integration = ["cloud_defend"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects an established netcat listener running inside a container. Netcat is a utility used for reading and
writing data across network connections, and it can be used for malicious purposes such as establishing a backdoor for
persistence or exfiltrating data.
"""
false_positives = [
    """
    There is a potential for false positives if the container is used for legitimate tasks that require the use of
    netcat, such as network troubleshooting, testing or system monitoring. It is important to investigate any alerts
    generated by this rule to determine if they are indicative of malicious activity or part of legitimate container
    activity.
    """,
]
from = "now-6m"
index = ["logs-cloud_defend*"]
interval = "5m"
language = "eql"
license = "Elastic License v2"
name = "Netcat Listener Established Inside A Container"
risk_score = 73
rule_id = "a52a9439-d52c-401c-be37-2785235c6547"
severity = "high"
tags = [
    "Data Source: Elastic Defend for Containers",
    "Domain: Container",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Execution",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where container.id: "*" and event.type== "start" 
and event.action in ("fork", "exec") and 
(
process.name:("nc","ncat","netcat","netcat.openbsd","netcat.traditional") or
/*account for tools that execute utilities as a subprocess, in this case the target utility name will appear as a process arg*/
process.args: ("nc","ncat","netcat","netcat.openbsd","netcat.traditional")
) and (
          /* bind shell to echo for command execution */
          (process.args:("-*l*", "--listen", "-*p*", "--source-port") and process.args:("-c", "--sh-exec", "-e", "--exec", "echo","$*"))
          /* bind shell to specific port */
          or process.args:("-*l*", "--listen", "-*p*", "--source-port")
          )
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Netcat Listener Established Inside A Container

Netcat is a versatile networking tool often used for debugging and network exploration. Within container environments, it can be exploited by adversaries to establish unauthorized network connections, acting as a backdoor or facilitating data exfiltration. The detection rule identifies suspicious Netcat activity by monitoring process starts within containers, focusing on specific command-line arguments indicative of a listening service, which may signal malicious intent.

### Possible investigation steps

- Review the alert details to confirm the presence of Netcat-related process names or arguments, such as "nc", "ncat", "netcat", "netcat.openbsd", or "netcat.traditional", in the process.name or process.args fields.
- Examine the container ID (container.id) associated with the alert to identify the specific container where the Netcat listener was established.
- Check the event.type and event.action fields to verify that the process start event corresponds to a "fork" or "exec" action, indicating a new process creation.
- Investigate the command-line arguments (process.args) for any suspicious flags like "-l", "--listen", "-p", "--source-port", "-c", "--sh-exec", "-e", or "--exec" that suggest a listening service or command execution.
- Use Osquery to gather additional context about the container environment by running a query such as: `SELECT * FROM processes WHERE name IN ('nc', 'ncat', 'netcat', 'netcat.openbsd', 'netcat.traditional') AND cmdline LIKE '%-l%' AND cmdline LIKE '%-p%';`
- Analyze the parent process of the Netcat listener to determine how it was initiated and whether it was spawned by a legitimate or suspicious process.
- Review the network connections associated with the container to identify any unusual or unauthorized connections that may indicate data exfiltration or a backdoor.
- Check the container's image and configuration to ensure it aligns with expected baselines and does not include unauthorized modifications or additional tools.
- Investigate the user context under which the Netcat process is running to determine if it aligns with expected user activity or if it indicates potential privilege escalation.
- Correlate the alert with other security events or logs from the same timeframe to identify any related suspicious activities or patterns that could provide further context.

### False positive analysis

- Development and testing environments may frequently use Netcat for legitimate purposes such as debugging or network testing, leading to false positives. Users can handle these by creating exceptions for specific container IDs or process names known to be used in these environments.
- Automated scripts or tools that utilize Netcat for routine network checks or data transfers might trigger the rule. To manage this, users can exclude specific command-line arguments or process arguments that are consistently associated with these benign activities.
- Some containerized applications might use Netcat as part of their normal operation for inter-container communication. In such cases, users should identify and whitelist these applications by excluding their specific process names or container IDs from the detection rule.
- Security tools or monitoring solutions that incorporate Netcat for legitimate network monitoring or penetration testing could also be flagged. Users should document and exclude these tools by adding exceptions for their known process arguments or container environments.

### Response and remediation

- Immediately isolate the affected container to prevent further unauthorized access or data exfiltration.
- Investigate the container's logs and network activity to identify the source and scope of the compromise.
- Terminate the netcat process and any other unauthorized processes running within the container.
- Conduct a thorough review of the container's configuration and deployed applications to identify vulnerabilities or misconfigurations that may have been exploited.
- Escalate the incident to the security operations team for further analysis and to determine if the threat has spread to other parts of the network.
- Implement enhanced logging policies to capture detailed process and network activity within containers for future investigations.
- Integrate threat intelligence feeds and security tools to improve detection capabilities and correlate alerts with known threat actors and tactics.
- Restore the container from a known good backup or rebuild it using secure configurations and updated software versions.
- Apply hardening measures such as disabling unnecessary services, enforcing least privilege access, and using network segmentation to limit exposure.
- Review and update security policies and incident response plans to incorporate lessons learned from the incident and improve readiness for future threats."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

