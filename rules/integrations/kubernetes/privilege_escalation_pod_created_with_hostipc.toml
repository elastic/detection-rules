[metadata]
creation_date = "2022/07/05"
integration = ["kubernetes"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects an attempt to create or modify a pod using the host IPC namespace. This gives access to data used by
any pod that also use the hosts IPC namespace. If any process on the host or any processes in a pod uses the hosts
inter-process communication mechanisms (shared memory, semaphore arrays, message queues, etc.), an attacker can
read/write to those same mechanisms. They may look for files in /dev/shm or use ipcs to check for any IPC facilities
being used.
"""
false_positives = [
    """
    An administrator or developer may want to use a pod that runs as root and shares the host's IPC, Network, and PID
    namespaces for debugging purposes. If something is going wrong in the cluster and there is no easy way to SSH onto
    the host nodes directly, a privileged pod of this nature can be useful for viewing things like iptable rules and
    network namespaces from the host's perspective. Add exceptions for trusted container images using the query field
    "kubernetes.audit.requestObject.spec.container.image"
    """,
]
index = ["logs-kubernetes.*"]
language = "kuery"
license = "Elastic License v2"
name = "Kubernetes Pod Created With HostIPC"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Kubernetes Pod Created With HostIPC

Kubernetes allows pods to share the host's IPC namespace, enabling access to shared memory and other IPC resources. While useful for certain applications, this can be exploited by attackers to access sensitive data or interfere with host processes. The detection rule identifies suspicious pod creation or modification events that enable host IPC, excluding known benign images, to flag potential privilege escalation attempts.

### Possible investigation steps

- Review the Kubernetes audit logs to identify the specific pod creation or modification event that triggered the alert, focusing on the `event.dataset` field to ensure it matches "kubernetes.audit_logs".
- Verify the authorization decision by checking the `kubernetes.audit.annotations.authorization_k8s_io/decision` field to confirm that the action was allowed.
- Examine the `kubernetes.audit.objectRef.resource` field to ensure the resource involved is a pod, and check the `kubernetes.audit.verb` field to determine if the action was a "create", "update", or "patch".
- Investigate the `kubernetes.audit.requestObject.spec.hostIPC` field to confirm that host IPC was indeed enabled for the pod.
- Cross-reference the `kubernetes.audit.requestObject.spec.containers.image` field to ensure the image used is not part of the known benign images, such as "docker.elastic.co/beats/elastic-agent:8.4.0".
- Identify the user or service account responsible for the action by examining the `kubernetes.audit.user.username` field to determine if the action was performed by a legitimate user or service.
- Use Osquery to gather more information about the pod and its containers. For example, run the following Osquery query to list all pods with host IPC enabled: `SELECT name, namespace, host_ipc FROM kubernetes_pods WHERE host_ipc = 1;`.
- Check for any unusual or unauthorized processes running within the pod by querying the process table using Osquery: `SELECT pid, name, cmdline FROM processes WHERE pid IN (SELECT pid FROM process_namespaces WHERE ipc_namespace_id = (SELECT ipc_namespace_id FROM process_namespaces WHERE pid = <PID of the suspicious pod>));`.
- Investigate the `/dev/shm` directory on the host and within the pod for any suspicious files or data that could indicate unauthorized access or data exfiltration.
- Review the network activity associated with the pod to identify any unusual or unauthorized connections that could suggest lateral movement or data exfiltration attempts.

### False positive analysis

- Known false positives may occur when legitimate applications require the use of the host IPC namespace for valid operational reasons, such as performance optimization or specific inter-process communication needs. These applications might include database systems or distributed computing frameworks that rely on shared memory for efficiency.
- Users can handle these false positives by creating exceptions for specific images or namespaces that are known to require host IPC access. This can be done by updating the detection rule to exclude additional trusted images or namespaces beyond the already excluded "docker.elastic.co/beats/elastic-agent:8.4.0".
- Regularly review and update the list of exceptions to ensure that only verified and necessary applications are excluded, minimizing the risk of overlooking potential threats.
- Consider implementing additional monitoring and logging for pods using host IPC to ensure that any unexpected behavior is quickly identified and addressed, even if the pod is part of an exception list.

### Response and remediation

- Immediately isolate the affected pod to prevent further access to the host's IPC namespace and limit potential data exposure.
- Review Kubernetes audit logs to identify the source of the pod creation or modification request and determine if it was authorized.
- Investigate the container image used in the pod to ensure it is not malicious or compromised, focusing on images not excluded by the detection rule.
- Check for any unauthorized access or modifications to shared memory, semaphore arrays, or message queues on the host.
- Escalate the incident to the security team if unauthorized access or malicious activity is confirmed, providing them with detailed findings and logs.
- Implement stricter access controls and policies to prevent unauthorized use of the host IPC namespace in future deployments.
- Enhance logging and monitoring by integrating with security information and event management (SIEM) systems to detect similar threats more effectively.
- Conduct a thorough review of all pods using the host IPC namespace and ensure they are necessary and secure.
- Restore affected systems by redeploying pods with secure configurations and verified container images.
- Apply hardening measures such as network segmentation, least privilege access, and regular security audits to reduce the risk of privilege escalation and host escape attempts.

## Setup

The Kubernetes Fleet integration with Audit Logs enabled or similarly structured data is required to be compatible with this rule."""
references = [
    "https://research.nccgroup.com/2021/11/10/detection-engineering-for-kubernetes-clusters/#part3-kubernetes-detections",
    "https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces",
    "https://bishopfox.com/blog/kubernetes-pod-privilege-escalation",
]
risk_score = 47
rule_id = "764c8437-a581-4537-8060-1fdb0e92c92d"
severity = "medium"
tags = ["Data Source: Kubernetes", "Tactic: Execution", "Tactic: Privilege Escalation"]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.dataset : "kubernetes.audit_logs"
  and kubernetes.audit.annotations.authorization_k8s_io/decision:"allow"
  and kubernetes.audit.objectRef.resource:"pods"
  and kubernetes.audit.verb:("create" or "update" or "patch")
  and kubernetes.audit.requestObject.spec.hostIPC:true
  and not kubernetes.audit.requestObject.spec.containers.image: ("docker.elastic.co/beats/elastic-agent:8.4.0")
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1611"
name = "Escape to Host"
reference = "https://attack.mitre.org/techniques/T1611/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1610"
name = "Deploy Container"
reference = "https://attack.mitre.org/techniques/T1610/"


[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

