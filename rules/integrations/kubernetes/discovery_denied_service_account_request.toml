[metadata]
creation_date = "2022/09/13"
integration = ["kubernetes"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects when a service account makes an unauthorized request for resources from the API server. Service
accounts follow a very predictable pattern of behavior. A service account should never send an unauthorized request to
the API server. This behavior is likely an indicator of compromise or of a problem within the cluster. An adversary may
have gained access to credentials/tokens and this could be an attempt to access or create resources to facilitate
further movement or execution within the cluster.
"""
false_positives = [
    """
    Unauthorized requests from service accounts are highly abnormal and more indicative of human behavior or a serious
    problem within the cluster. This behavior should be investigated further.
    """,
]
index = ["logs-kubernetes.*"]
language = "kuery"
license = "Elastic License v2"
name = "Kubernetes Denied Service Account Request"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Kubernetes Denied Service Account Request

Kubernetes service accounts are integral for managing pod permissions and accessing the API server. They typically follow a consistent access pattern. However, adversaries can exploit compromised credentials to make unauthorized API requests, aiming to discover or manipulate resources. The detection rule identifies such anomalies by flagging denied requests from service accounts, indicating potential misuse or compromise.

### Possible investigation steps

- Review the specific audit log entry that triggered the alert, focusing on the `event.dataset` field to confirm it is from "kubernetes.audit_logs".
- Identify the service account involved by examining the `kubernetes.audit.user.username` field to determine which service account made the unauthorized request.
- Check the `kubernetes.audit.annotations.authorization_k8s_io/decision` field to confirm the request was indeed "forbid" and not a false positive.
- Investigate the source IP and user agent from the audit logs to determine where the request originated from and what tool or application was used.
- Cross-reference the service account with known deployments and pods to understand its typical usage and permissions.
- Use Osquery to list all pods and their associated service accounts to verify if the service account is being used by unexpected or unauthorized pods:
  ```sql
  SELECT name, namespace, service_account_name FROM kubernetes_pods WHERE service_account_name = '<compromised_service_account>';
  ```
- Examine recent changes or deployments in the cluster that might have affected the service account's permissions or behavior.
- Review the cluster's RoleBindings and ClusterRoleBindings to ensure the service account's permissions have not been altered unexpectedly.
- Check for any recent access or modification to the service account's secrets or tokens that could indicate credential compromise.
- Analyze historical audit logs for any patterns of similar unauthorized requests from the same or different service accounts to identify potential broader issues.

### False positive analysis

- Service accounts used in automated testing or development environments may generate denied requests as part of their normal operation, leading to false positives. Users can handle these by creating exceptions for specific service accounts known to exhibit this behavior.
- Misconfigured service accounts that lack necessary permissions might trigger the rule. Regular audits and proper configuration management can help identify and rectify these issues, reducing false positives.
- Service accounts involved in legitimate but unusual operations, such as temporary maintenance tasks, might be flagged. Users should document these operations and adjust the detection rule to exclude these specific activities.
- In some cases, service accounts might be involved in legitimate access attempts that are denied due to temporary network issues or API server misconfigurations. Monitoring network stability and ensuring API server configurations are correct can help mitigate these occurrences.

### Response and remediation

- Immediately isolate the affected service account by revoking its credentials or tokens to prevent further unauthorized access.
- Conduct a thorough investigation to determine the scope of the compromise, including reviewing audit logs for any other suspicious activities associated with the service account.
- Identify and analyze the source of the unauthorized request to understand how the adversary gained access, focusing on potential vulnerabilities or misconfigurations in the cluster.
- Escalate the incident to the security operations team and relevant stakeholders to ensure awareness and coordinated response efforts.
- Implement enhanced logging policies to capture detailed audit logs for all service account activities, ensuring that future unauthorized access attempts are detected promptly.
- Integrate security tools and platforms, such as SIEM systems, to automate the detection and alerting of anomalous service account behaviors.
- Restore the system to its operational state by reissuing new credentials or tokens for the affected service account and ensuring all unauthorized changes are reverted.
- Apply hardening measures by enforcing the principle of least privilege for service accounts, ensuring they have only the necessary permissions to perform their functions.
- Conduct a post-incident review to identify lessons learned and update incident response plans and security policies accordingly.
- Leverage MITRE ATT&CK framework to understand potential adversary tactics and techniques, enhancing threat detection and response capabilities for future incidents.

## Setup

The Kubernetes Fleet integration with Audit Logs enabled or similarly structured data is required to be compatible with this rule."""
references = [
    "https://research.nccgroup.com/2021/11/10/detection-engineering-for-kubernetes-clusters/#part3-kubernetes-detections",
    "https://kubernetes.io/docs/reference/access-authn-authz/authentication/#service-account-tokens",
]
risk_score = 47
rule_id = "63c056a0-339a-11ed-a261-0242ac120002"
severity = "medium"
tags = ["Data Source: Kubernetes", "Tactic: Discovery"]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.dataset: "kubernetes.audit_logs"
  and kubernetes.audit.user.username: system\:serviceaccount\:*
  and kubernetes.audit.annotations.authorization_k8s_io/decision: "forbid"
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1613"
name = "Container and Resource Discovery"
reference = "https://attack.mitre.org/techniques/T1613/"


[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

