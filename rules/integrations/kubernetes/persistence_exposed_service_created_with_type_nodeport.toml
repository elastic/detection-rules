[metadata]
creation_date = "2022/07/05"
integration = ["kubernetes"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects an attempt to create or modify a service as type NodePort. The NodePort service allows a user to
externally expose a set of labeled pods to the internet. This creates an open port on every worker node in the cluster
that has a pod for that service. When external traffic is received on that open port, it directs it to the specific pod
through the service representing it. A malicious user can configure a service as type Nodeport in order to intercept
traffic from other pods or nodes, bypassing firewalls and other network security measures configured for load balancers
within a cluster. This creates a direct method of communication between the cluster and the outside world, which could
be used for more malicious behavior and certainly widens the attack surface of your cluster.
"""
false_positives = [
    """
    Developers may have a legitimate use for NodePorts. For frontend parts of an application you may want to expose a
    Service onto an external IP address without using cloud specific Loadbalancers. NodePort can be used to expose the
    Service on each Node's IP at a static port (the NodePort). You'll be able to contact the NodePort Service from
    outside the cluster, by requesting <NodeIP>:<NodePort>. NodePort unlike Loadbalancers, allow the freedom to set up
    your own load balancing solution, configure environments that aren't fully supported by Kubernetes, or even to
    expose one or more node's IPs directly.
    """,
]
index = ["logs-kubernetes.*"]
language = "kuery"
license = "Elastic License v2"
name = "Kubernetes Exposed Service Created With Type NodePort"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Kubernetes Exposed Service Created With Type NodePort

Kubernetes NodePort services enable external access to pods by opening a port on each node, facilitating direct communication with the cluster. Adversaries may exploit this by configuring NodePort services to intercept or redirect traffic, bypassing security controls. The detection rule identifies such activities by monitoring audit logs for service creation or modification events with NodePort specifications, ensuring any unauthorized exposure is flagged for investigation.

### Possible investigation steps

- Review the Kubernetes audit logs to identify the source of the NodePort service creation or modification by examining the `kubernetes.audit.objectRef.resource` and `kubernetes.audit.verb` fields.
- Check the `kubernetes.audit.annotations.authorization_k8s_io/decision` field to confirm that the action was allowed and not denied, ensuring the alert is valid.
- Identify the user or service account responsible for the action by analyzing the `kubernetes.audit.user.username` field in the audit logs.
- Investigate the context of the service creation or modification by reviewing the `kubernetes.audit.requestObject.spec.type` field to confirm it is set to "NodePort".
- Use Osquery to gather additional context about the nodes involved. For example, run the following query to list all services of type NodePort: `SELECT * FROM kubernetes_services WHERE type = 'NodePort';`
- Examine the network policies in place to determine if there are any existing rules that could have been bypassed due to the NodePort configuration.
- Review the cluster's role-based access control (RBAC) settings to ensure that only authorized users have permissions to create or modify services.
- Analyze the logs for any unusual or unexpected traffic patterns directed towards the NodePort, which could indicate potential misuse or exploitation.
- Cross-reference the NodePort service details with known legitimate services to determine if the creation or modification aligns with expected behavior.
- Investigate any associated pods or applications that are exposed via the NodePort service to assess their security posture and potential vulnerabilities.

### False positive analysis

- Routine administrative tasks: Legitimate administrative actions may involve creating or updating NodePort services for maintenance or deployment purposes. To manage these, users can create exceptions for specific user accounts or service accounts known to perform these tasks regularly.
- Development and testing environments: In non-production environments, NodePort services might be frequently created for testing purposes. Users can exclude these environments from alerts by filtering based on namespace or labels associated with development and testing.
- Automated deployment tools: Continuous integration and deployment tools might automatically create or modify NodePort services as part of their workflows. Users should identify these tools and exclude their activities by recognizing specific user agents or service accounts.
- Internal services with external dependencies: Some internal services may require NodePort configurations to interact with external systems. Users can whitelist these services by specifying known IP ranges or service names that are expected to use NodePort.
- Monitoring and logging tools: Certain monitoring or logging solutions might use NodePort services to collect data from the cluster. Users can manage these by identifying and excluding the specific tools or services involved in these activities.

### Response and remediation

- Immediately isolate the affected NodePort service to prevent further unauthorized access by removing or disabling the service.
- Review Kubernetes audit logs to identify any unauthorized changes or suspicious activities related to NodePort services.
- Verify the identity and permissions of the user or service account that created or modified the NodePort service to ensure it aligns with expected behavior.
- Conduct a thorough investigation to determine if any data was accessed or exfiltrated through the exposed NodePort service.
- Escalate the incident to the security operations team for further analysis and to determine if additional systems or services were compromised.
- Implement network segmentation and firewall rules to restrict NodePort access to only trusted IP addresses and services.
- Enhance logging policies to ensure comprehensive monitoring of Kubernetes audit logs, focusing on service creation and modification events.
- Integrate security tools with Kubernetes to automate the detection and alerting of suspicious NodePort activities.
- Restore the system to its operational state by reconfiguring services to use more secure access methods, such as LoadBalancer or Ingress, instead of NodePort.
- Apply hardening measures by regularly reviewing and updating Kubernetes RBAC policies to minimize permissions and reduce the attack surface.

## Setup

The Kubernetes Fleet integration with Audit Logs enabled or similarly structured data is required to be compatible with this rule."""
references = [
    "https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
    "https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
    "https://www.tigera.io/blog/new-vulnerability-exposes-kubernetes-to-man-in-the-middle-attacks-heres-how-to-mitigate/",
]
risk_score = 47
rule_id = "65f9bccd-510b-40df-8263-334f03174fed"
severity = "medium"
tags = ["Data Source: Kubernetes", "Tactic: Execution", "Tactic: Persistence"]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.dataset : "kubernetes.audit_logs"
  and kubernetes.audit.annotations.authorization_k8s_io/decision:"allow"
  and kubernetes.audit.objectRef.resource:"services"
  and kubernetes.audit.verb:("create" or "update" or "patch")
  and kubernetes.audit.requestObject.spec.type:"NodePort"
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1133"
name = "External Remote Services"
reference = "https://attack.mitre.org/techniques/T1133/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

