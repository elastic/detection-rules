[metadata]
creation_date = "2022/07/05"
integration = ["kubernetes"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects an attempt to create or modify a pod attached to the host PID namespace. HostPID allows a pod to
access all the processes running on the host and could allow an attacker to take malicious action. When paired with
ptrace this can be used to escalate privileges outside of the container. When paired with a privileged container, the
pod can see all of the processes on the host. An attacker can enter the init system (PID 1) on the host. From there,
they could execute a shell and continue to escalate privileges to root.
"""
false_positives = [
    """
    An administrator or developer may want to use a pod that runs as root and shares the hosts IPC, Network, and PID
    namespaces for debugging purposes. If something is going wrong in the cluster and there is no easy way to SSH onto
    the host nodes directly, a privileged pod of this nature can be useful for viewing things like iptable rules and
    network namespaces from the host's perspective. Add exceptions for trusted container images using the query field
    "kubernetes.audit.requestObject.spec.container.image"
    """,
]
index = ["logs-kubernetes.*"]
language = "kuery"
license = "Elastic License v2"
name = "Kubernetes Pod Created With HostPID"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Kubernetes Pod Created With HostPID

Kubernetes allows pods to share the host's process ID (PID) namespace, enabling visibility into host processes. While useful for debugging, this can be exploited by attackers to escalate privileges or execute unauthorized actions. The detection rule identifies attempts to create or modify pods with HostPID enabled, excluding known safe images, to flag potential privilege escalation threats.

### Possible investigation steps

- Review the Kubernetes audit logs to confirm the alert details, focusing on the `event.dataset` field to ensure it matches "kubernetes.audit_logs".
- Verify the `kubernetes.audit.annotations.authorization_k8s_io/decision` field to ensure the action was allowed, indicating a potential security concern.
- Examine the `kubernetes.audit.objectRef.resource` field to confirm the resource type is "pods", ensuring the alert pertains to pod creation or modification.
- Check the `kubernetes.audit.verb` field to determine the action taken, whether it was "create", "update", or "patch", to understand the nature of the change.
- Investigate the `kubernetes.audit.requestObject.spec.hostPID` field to confirm it is set to true, indicating the pod is sharing the host's PID namespace.
- Cross-reference the `kubernetes.audit.requestObject.spec.containers.image` field to ensure the image is not part of the known safe list, such as "docker.elastic.co/beats/elastic-agent:8.4.0".
- Identify the user or service account responsible for the action by examining the `kubernetes.audit.user.username` field to assess if it aligns with expected behavior.
- Use Osquery to gather additional context on the host by running a query like `SELECT * FROM processes WHERE pid IN (SELECT pid FROM processes WHERE name = 'kubelet');` to identify processes that might be interacting with the Kubernetes API.
- Investigate the pod's configuration and deployment history to determine if the use of HostPID was intentional or a potential misconfiguration.
- Review any recent changes in the cluster's configuration or deployments that might have introduced the use of HostPID, correlating with the alert's timestamp.

### False positive analysis

- Known false positives may occur when legitimate administrative tasks require the use of HostPID for debugging or monitoring purposes. These tasks might involve trusted images or tools that are essential for system maintenance.
- Users can handle these false positives by creating exceptions for specific images or namespaces that are known to be safe and frequently use HostPID for legitimate reasons. This can be done by updating the detection rule to exclude additional trusted images or namespaces.
- Another potential false positive scenario involves automated processes or CI/CD pipelines that temporarily require HostPID access for testing or deployment purposes. Users should identify these processes and adjust the rule to exclude them from triggering alerts.
- It is important to regularly review and update the list of exceptions to ensure that only non-threatening behaviors are excluded, maintaining a balance between security and operational efficiency.

### Response and remediation

- Immediately isolate the affected pod to prevent further interaction with the host processes and potential privilege escalation.
- Review Kubernetes audit logs to identify any unauthorized access or modifications to pods with HostPID enabled, focusing on the specific time frame of the alert.
- Verify the integrity of the host system by checking for any unauthorized processes or changes, especially those related to privilege escalation attempts.
- Revoke any unnecessary permissions or roles that may have allowed the creation of pods with HostPID enabled, and ensure that only trusted users have the ability to create such pods.
- Escalate the incident to the security team if evidence of privilege escalation or host compromise is found, providing them with detailed logs and findings.
- Implement stricter pod security policies to prevent the use of HostPID unless absolutely necessary, and ensure that all containers are running with the least privilege.
- Enhance logging and monitoring by integrating with security information and event management (SIEM) systems to detect similar threats in the future.
- Conduct a thorough review of container images and ensure that only approved and secure images are used in the environment.
- Restore the system to its operational state by redeploying affected services with secure configurations and verified images.
- Educate the development and operations teams on the risks associated with HostPID and the importance of adhering to security best practices.

## Setup

The Kubernetes Fleet integration with Audit Logs enabled or similarly structured data is required to be compatible with this rule."""
references = [
    "https://research.nccgroup.com/2021/11/10/detection-engineering-for-kubernetes-clusters/#part3-kubernetes-detections",
    "https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces",
    "https://bishopfox.com/blog/kubernetes-pod-privilege-escalation",
]
risk_score = 47
rule_id = "df7fda76-c92b-4943-bc68-04460a5ea5ba"
severity = "medium"
tags = ["Data Source: Kubernetes", "Tactic: Execution", "Tactic: Privilege Escalation"]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.dataset : "kubernetes.audit_logs"
  and kubernetes.audit.annotations.authorization_k8s_io/decision:"allow"
  and kubernetes.audit.objectRef.resource:"pods"
  and kubernetes.audit.verb:("create" or "update" or "patch")
  and kubernetes.audit.requestObject.spec.hostPID:true
  and not kubernetes.audit.requestObject.spec.containers.image: ("docker.elastic.co/beats/elastic-agent:8.4.0")
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1611"
name = "Escape to Host"
reference = "https://attack.mitre.org/techniques/T1611/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1610"
name = "Deploy Container"
reference = "https://attack.mitre.org/techniques/T1610/"


[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

