[metadata]
creation_date = "2022/07/11"
integration = ["kubernetes"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects when a pod is created with a sensitive volume of type hostPath. A hostPath volume type mounts a
sensitive file or folder from the node to the container. If the container gets compromised, the attacker can use this
mount for gaining access to the node. There are many ways a container with unrestricted access to the host filesystem
can escalate privileges, including reading data from other containers, and accessing tokens of more privileged pods.
"""
false_positives = [
    """
    An administrator may need to attach a hostPath volume for a legitimate reason. This alert should be investigated for
    legitimacy by determining if the kuberenetes.audit.requestObject.spec.volumes.hostPath.path triggered is one needed
    by its target container/pod. For example, when the fleet managed elastic agent is deployed as a daemonset it creates
    several hostPath volume mounts, some of which are sensitive host directories like /proc, /etc/kubernetes, and
    /var/log. Add exceptions for trusted container images using the query field
    "kubernetes.audit.requestObject.spec.container.image"
    """,
]
index = ["logs-kubernetes.*"]
language = "kuery"
license = "Elastic License v2"
name = "Kubernetes Pod created with a Sensitive hostPath Volume"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Kubernetes Pod created with a Sensitive hostPath Volume

Kubernetes allows containers to access host filesystems via hostPath volumes, which can be crucial for certain applications. However, if a container is compromised, adversaries can exploit these mounts to access sensitive host data or escalate privileges. The detection rule identifies when pods are created or modified with hostPath volumes pointing to critical directories, signaling potential misuse or security risks.

### Possible investigation steps

- Review the Kubernetes audit logs to confirm the alert by checking the `event.dataset` field for "kubernetes.audit_logs" and ensure the `kubernetes.audit.annotations.authorization_k8s_io/decision` is "allow".
- Identify the specific pod involved by examining the `kubernetes.audit.objectRef.resource` field for "pods" and note the `kubernetes.audit.verb` to determine if it was a "create", "update", or "patch" action.
- Investigate the `kubernetes.audit.requestObject.spec.volumes.hostPath.path` field to determine which sensitive directory was mounted and assess the potential risk associated with this path.
- Check the `kubernetes.audit.requestObject.spec.containers.image` field to identify the container image used and verify if it is a known or trusted image, excluding "docker.elastic.co/beats/elastic-agent:8.4.0".
- Use Osquery to gather more information about the node where the pod is running. For example, run the query: `SELECT * FROM kubernetes_pods WHERE name = '<pod_name>';` to get details about the pod's configuration and status.
- Examine the Kubernetes cluster's RBAC policies to determine if the service account associated with the pod has excessive permissions that could be exploited.
- Review the pod's logs and any associated application logs for suspicious activity or errors that might indicate a compromise.
- Check for any recent changes in the cluster configuration or deployments that could have introduced vulnerabilities or misconfigurations.
- Investigate network activity from the pod to identify any unusual outbound connections or data exfiltration attempts.
- Correlate the findings with other security tools and logs, such as intrusion detection systems or endpoint protection solutions, to identify any related alerts or incidents.

### False positive analysis

- Certain monitoring or logging agents may require access to hostPath volumes for legitimate purposes, such as collecting system metrics or logs. These agents might trigger the rule if they mount sensitive directories.
- Backup or disaster recovery solutions might use hostPath volumes to access and back up critical data, which could be flagged by the rule.
- Development or testing environments often use hostPath volumes to simulate production-like conditions, which might not pose a security risk in these controlled settings.
- Users can handle these false positives by creating exceptions for known benign applications or agents that require hostPath access. This can be done by excluding specific container images or namespaces from the rule.
- Regularly review and update the list of exceptions to ensure that only trusted applications are excluded, minimizing the risk of overlooking genuine threats.

### Response and remediation

- Immediately isolate the affected pod to prevent further access to sensitive host data and potential privilege escalation.
- Investigate the pod's configuration and logs to determine if there has been unauthorized access or malicious activity.
- Review Kubernetes audit logs to identify any suspicious activities or patterns related to the creation or modification of pods with sensitive hostPath volumes.
- Revoke any unnecessary permissions or access rights that may have been granted to the compromised pod or its associated service account.
- Patch and update the Kubernetes cluster and any affected applications to address known vulnerabilities that could be exploited.
- Escalate the incident to the security team if evidence of a breach or compromise is found, and consider involving incident response experts if necessary.
- Implement logging policies to ensure comprehensive monitoring of Kubernetes audit logs and container activities for future incidents.
- Integrate security tools such as intrusion detection systems and anomaly detection to enhance monitoring and alerting capabilities.
- Restore the system to its operational state by redeploying the affected pod with secure configurations and without sensitive hostPath volumes.
- Harden the Kubernetes environment by enforcing security best practices, such as using network policies, role-based access control (RBAC), and regular security audits.

## Setup

The Kubernetes Fleet integration with Audit Logs enabled or similarly structured data is required to be compatible with this rule."""
references = [
    "https://blog.appsecco.com/kubernetes-namespace-breakout-using-insecure-host-path-volume-part-1-b382f2a6e216",
    "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath",
]
risk_score = 47
rule_id = "2abda169-416b-4bb3-9a6b-f8d239fd78ba"
severity = "medium"
tags = ["Data Source: Kubernetes", "Tactic: Execution", "Tactic: Privilege Escalation"]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.dataset : "kubernetes.audit_logs"
  and kubernetes.audit.annotations.authorization_k8s_io/decision:"allow"
  and kubernetes.audit.objectRef.resource:"pods"
  and kubernetes.audit.verb:("create" or "update" or "patch")
  and kubernetes.audit.requestObject.spec.volumes.hostPath.path:
  ("/" or
  "/proc" or
  "/root" or
  "/var" or
  "/var/run" or
  "/var/run/docker.sock" or
  "/var/run/crio/crio.sock" or
  "/var/run/cri-dockerd.sock" or
  "/var/lib/kubelet" or
  "/var/lib/kubelet/pki" or
  "/var/lib/docker/overlay2" or
  "/etc" or
  "/etc/kubernetes" or
  "/etc/kubernetes/manifests" or
  "/etc/kubernetes/pki" or
  "/home/admin")
  and not kubernetes.audit.requestObject.spec.containers.image: ("docker.elastic.co/beats/elastic-agent:8.4.0")
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1611"
name = "Escape to Host"
reference = "https://attack.mitre.org/techniques/T1611/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1610"
name = "Deploy Container"
reference = "https://attack.mitre.org/techniques/T1610/"


[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

