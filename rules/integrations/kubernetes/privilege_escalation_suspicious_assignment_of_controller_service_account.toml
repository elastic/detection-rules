[metadata]
creation_date = "2022/09/13"
integration = ["kubernetes"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects a request to attach a controller service account to an existing or new pod running in the kube-system
namespace. By default, controllers running as part of the API Server utilize admin-equivalent service accounts hosted in
the kube-system namespace. Controller service accounts aren't normally assigned to running pods and could indicate
adversary behavior within the cluster. An attacker that can create or modify pods or pod controllers in the kube-system
namespace, can assign one of these admin-equivalent service accounts to a pod and abuse their powerful token to escalate
privileges and gain complete cluster control.
"""
false_positives = [
    """
    Controller service accounts aren't normally assigned to running pods, this is abnormal behavior with very few
    legitimate use-cases and should result in very few false positives.
    """,
]
index = ["logs-kubernetes.*"]
language = "kuery"
license = "Elastic License v2"
name = "Kubernetes Suspicious Assignment of Controller Service Account"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Kubernetes Suspicious Assignment of Controller Service Account

Kubernetes uses service accounts to manage pod permissions, with controller service accounts in the kube-system namespace having elevated privileges. Adversaries may exploit this by assigning these powerful accounts to pods, gaining admin-level access. The detection rule identifies such suspicious activity by monitoring audit logs for pod creation events in the kube-system namespace with controller service accounts, signaling potential privilege escalation attempts.

### Possible investigation steps

- Review the audit log entry that triggered the alert, focusing on the `kubernetes.audit.verb`, `kubernetes.audit.objectRef.resource`, and `kubernetes.audit.objectRef.namespace` fields to confirm the creation of a pod in the `kube-system` namespace.
- Verify the `kubernetes.audit.requestObject.spec.serviceAccountName` field to identify the specific controller service account assigned to the pod and assess if it is typically used in your environment.
- Check the `kubernetes.audit.annotations.authorization_k8s_io/decision` field to ensure the action was indeed allowed and not a false positive.
- Investigate the source of the request by examining the `kubernetes.audit.user.username` field to identify the user or service account that initiated the pod creation.
- Analyze the `kubernetes.audit.sourceIPs` field to determine the origin IP address of the request, which can help identify if it was made from a known or suspicious location.
- Use Osquery to gather more information about the pod by running a query such as: `SELECT * FROM kubernetes_pods WHERE namespace = 'kube-system' AND service_account_name LIKE '%controller%';` to list all pods with controller service accounts in the `kube-system` namespace.
- Cross-reference the pod's creation time with other logs and events to identify any correlated suspicious activities or anomalies around the same timeframe.
- Review the pod's configuration and associated resources, such as ConfigMaps and Secrets, to identify any unauthorized or unexpected configurations.
- Investigate the history of the service account in question to determine if it has been used in any other suspicious activities or if there have been recent changes to its permissions.
- Consult with the team responsible for the Kubernetes environment to verify if the pod creation and service account assignment were part of any legitimate maintenance or deployment activities.

### False positive analysis

- Legitimate administrative actions: In some cases, cluster administrators may intentionally assign controller service accounts to pods for maintenance or testing purposes. These actions, while legitimate, can trigger the detection rule. To manage this, users can create exceptions for specific user accounts or IP addresses known to perform these tasks regularly.
- Automated deployment tools: Certain automated deployment or orchestration tools might temporarily assign controller service accounts to pods as part of their operation. Users should identify these tools and exclude their activities from triggering alerts by specifying the tool's service account or namespace in the exception list.
- System updates or upgrades: During system updates or upgrades, Kubernetes might temporarily assign controller service accounts to pods as part of the process. Users can handle these by setting time-based exceptions during known maintenance windows to prevent false positives.
- Testing environments: In testing or development environments, developers might assign controller service accounts to pods to simulate production scenarios. Users can exclude these environments from monitoring or create specific rules that differentiate between production and non-production environments to reduce false positives.

### Response and remediation

- Immediately isolate the affected pod to prevent further unauthorized access or actions within the cluster.
- Review Kubernetes audit logs to identify the source of the suspicious activity and determine if other pods or resources have been compromised.
- Revoke any unauthorized service account tokens and reset credentials for affected accounts to prevent further misuse.
- Conduct a thorough investigation to determine how the adversary gained the ability to assign the controller service account, focusing on potential vulnerabilities or misconfigurations.
- Escalate the incident to the security operations team and relevant stakeholders to ensure awareness and coordinated response efforts.
- Implement stricter role-based access control (RBAC) policies to limit permissions and prevent unauthorized service account assignments in the kube-system namespace.
- Enhance logging and monitoring by integrating with a Security Information and Event Management (SIEM) system to detect similar activities in the future.
- Apply security patches and updates to Kubernetes components and related infrastructure to mitigate known vulnerabilities.
- Restore affected systems and services to their operational state by redeploying clean versions of compromised pods and verifying their integrity.
- Conduct a post-incident review to identify lessons learned and update incident response plans, incorporating additional hardening measures such as network segmentation and regular security audits.

## Setup

The Kubernetes Fleet integration with Audit Logs enabled or similarly structured data is required to be compatible with this rule."""
references = [
    "https://www.paloaltonetworks.com/apps/pan/public/downloadResource?pagePath=/content/pan/en_US/resources/whitepapers/kubernetes-privilege-escalation-excessive-permissions-in-popular-platforms",
]
risk_score = 47
rule_id = "63c05204-339a-11ed-a261-0242ac120002"
severity = "medium"
tags = ["Data Source: Kubernetes", "Tactic: Execution", "Tactic: Privilege Escalation"]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.dataset : "kubernetes.audit_logs"
  and kubernetes.audit.annotations.authorization_k8s_io/decision:"allow"
  and kubernetes.audit.verb : "create"
  and kubernetes.audit.objectRef.resource : "pods"
  and kubernetes.audit.objectRef.namespace : "kube-system"
  and kubernetes.audit.requestObject.spec.serviceAccountName:*controller
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1078"
name = "Valid Accounts"
reference = "https://attack.mitre.org/techniques/T1078/"
[[rule.threat.technique.subtechnique]]
id = "T1078.001"
name = "Default Accounts"
reference = "https://attack.mitre.org/techniques/T1078/001/"



[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

