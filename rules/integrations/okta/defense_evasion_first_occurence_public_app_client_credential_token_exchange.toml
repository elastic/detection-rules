[metadata]
creation_date = "2024/09/11"
integration = ["okta"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.15.0"
min_stack_comments = "Breaking change at 8.15.0 for the Okta Integration."

[rule]
author = ["Elastic"]
description = """
Identifies a failed OAuth 2.0 token grant attempt for a public client app using client credentials. This event is
generated when a public client app attempts to exchange a client credentials grant for an OAuth 2.0 access token, but
the request is denied due to the lack of required scopes. This could indicate compromised client credentials in which an
adversary is attempting to obtain an access token for unauthorized scopes. This is a [New
Terms](https://www.elastic.co/guide/en/security/master/rules-ui-create.html#create-new-terms-rule) rule where the
`okta.actor.display_name` field value has not been seen in the last 14 days regarding this event.
"""
from = "now-9m"
index = ["filebeat-*", "logs-okta*"]
language = "kuery"
license = "Elastic License v2"
name = "Unauthorized Scope for Public App OAuth2 Token Grant with Client Credentials"
references = [
    "https://github.blog/news-insights/company-news/security-alert-stolen-oauth-user-tokens/",
    "https://developer.okta.com/docs/reference/api/event-types/",
    "https://www.elastic.co/security-labs/monitoring-okta-threats-with-elastic-security",
    "https://www.elastic.co/security-labs/starter-guide-to-understanding-okta",
]
risk_score = 47
rule_id = "6649e656-6f85-11ef-8876-f661ea17fbcc"
severity = "medium"
tags = [
    "Domain: SaaS",
    "Data Source: Okta",
    "Use Case: Threat Detection",
    "Use Case: Identity and Access Audit",
    "Tactic: Defense Evasion",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
event.dataset: okta.system
    and event.action: "app.oauth2.as.token.grant"
    and okta.actor.type: "PublicClientApp"
    and okta.debug_context.debug_data.flattened.grantType: "client_credentials"
    and okta.outcome.result: "FAILURE"
    and not okta.client.user_agent.raw_user_agent: "Okta-Integrations"
    and not okta.actor.display_name: (Okta* or Datadog)
    and not okta.debug_context.debug_data.flattened.requestedScopes: ("okta.logs.read" or "okta.eventHooks.read" or "okta.inlineHooks.read")
    and okta.outcome.reason: "no_matching_scope"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Unauthorized Scope for Public App OAuth2 Token Grant with Client Credentials

OAuth 2.0 is a protocol for authorization, allowing apps to access resources on behalf of a user. Public client apps, lacking secure storage, use client credentials for token grants. Adversaries may exploit compromised credentials to request unauthorized scopes. The detection rule identifies failed token requests due to scope mismatches, signaling potential misuse by unfamiliar actors.

### Possible investigation steps

- Review the `okta.actor.display_name` field to identify the actor involved in the failed token grant attempt and determine if this actor is known or expected to request such scopes.
- Examine the `okta.debug_context.debug_data.flattened.requestedScopes` field to understand which unauthorized scopes were requested and assess their potential impact if accessed.
- Analyze the `okta.actor.type` field to confirm that the actor is indeed a "PublicClientApp" and verify if this aligns with the expected behavior of the application.
- Investigate the `okta.outcome.reason` field, specifically looking for "no_matching_scope," to confirm that the failure was due to unauthorized scope requests.
- Check the `okta.client.user_agent.raw_user_agent` field to ensure the request did not originate from known integrations like "Okta-Integrations," which are excluded from the rule.
- Utilize Osquery to gather additional context on the system from which the request originated. For example, run an Osquery query to list recent network connections: `SELECT * FROM process_open_sockets WHERE remote_address = '<IP_of_interest>';`.
- Correlate the event with other logs in the `event.dataset: okta.system` to identify any patterns or repeated attempts from the same actor or IP address.
- Investigate the `okta.outcome.result` field to confirm the failure status and cross-reference with other successful attempts to identify any anomalies.
- Review historical data for the `okta.actor.display_name` to determine if this is the first occurrence of such behavior or if there is a pattern of similar unauthorized attempts.
- Consult with application owners or developers to verify if there have been any recent changes or updates to the application that might explain the unexpected scope request.

### False positive analysis

- Known false positives may occur when legitimate public client apps are misconfigured or updated, leading to failed token requests due to scope mismatches. These apps might not pose a threat but trigger the rule due to their unfamiliar behavior.
- Frequent legitimate actors, such as internal development teams testing new integrations or updates, might inadvertently cause false positives. Monitoring these actors over time can help identify patterns that are non-threatening.
- To manage false positives, users can create exceptions for specific `okta.actor.display_name` values that are known to be safe and frequently involved in legitimate activities. This can be done by adding these values to the exclusion list in the detection rule.
- Regularly review and update the list of excluded scopes and actors to ensure that only non-threatening behaviors are excluded, maintaining the effectiveness of the rule in detecting genuine threats.
- Consider implementing additional logging and monitoring for actors that are excluded to ensure that their behavior remains consistent with expected patterns and does not evolve into a potential threat.

### Response and remediation

- Immediately revoke the compromised client credentials to prevent further unauthorized access attempts.
- Investigate the source of the unauthorized scope request by reviewing logs and identifying the actor's IP address and user agent.
- Conduct a thorough review of recent access logs to identify any other suspicious activities or anomalies associated with the compromised credentials.
- Notify the security team and relevant stakeholders about the incident and provide them with details of the unauthorized access attempt.
- Implement additional logging and monitoring for OAuth 2.0 token requests to detect similar unauthorized attempts in the future.
- Update and enforce strong authentication policies for public client apps, including the use of multi-factor authentication where possible.
- Review and restrict the scopes available to public client apps to minimize the risk of unauthorized access.
- Educate developers and users about secure credential management practices to prevent future credential compromises.
- Consider integrating with a Security Information and Event Management (SIEM) system to enhance threat detection and response capabilities.
- Restore the system to its operational state by ensuring all security patches are applied and conducting a security audit to identify and address any vulnerabilities."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1550"
name = "Use Alternate Authentication Material"
reference = "https://attack.mitre.org/techniques/T1550/"
[[rule.threat.technique.subtechnique]]
id = "T1550.001"
name = "Application Access Token"
reference = "https://attack.mitre.org/techniques/T1550/001/"



[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

[rule.new_terms]
field = "new_terms_fields"
value = ["okta.actor.display_name"]
[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"


