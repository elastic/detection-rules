[metadata]
creation_date = "2023/10/16"
integration = ["problemchild", "endpoint", "windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
anomaly_threshold = 75
author = ["Elastic"]
description = """
A machine learning job has detected a suspicious Windows process. This process has been classified as malicious in two
ways. It was predicted to be malicious by the ProblemChild supervised ML model, and it was found to be an unusual child
process name, for the parent process, by an unsupervised ML model. Such a process may be an instance of suspicious or
malicious activity, possibly involving LOLbins, that may be resistant to detection using conventional search rules.
"""
from = "now-45m"
interval = "15m"
license = "Elastic License v2"
machine_learning_job_id = "problem_child_rare_process_by_parent"
name = "Unusual Process Spawned by a Parent Process"
references = [
    "https://www.elastic.co/guide/en/security/current/prebuilt-ml-jobs.html",
    "https://docs.elastic.co/en/integrations/problemchild",
    "https://www.elastic.co/security-labs/detecting-living-off-the-land-attacks-with-new-elastic-integration",
]
risk_score = 21
rule_id = "ea09ff26-3902-4c53-bb8e-24b7a5d029dd"
setup = """## Setup

The rule requires the Living off the Land (LotL) Attack Detection integration assets to be installed, as well as Windows process events collected by integrations such as Elastic Defend or Winlogbeat.  

### LotL Attack Detection Setup
The LotL Attack Detection integration detects living-off-the-land activity in Windows process events.

#### Prerequisite Requirements:
- Fleet is required for LotL Attack Detection.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).
- Windows process events collected by the [Elastic Defend](https://docs.elastic.co/en/integrations/endpoint) integration or Winlogbeat(https://www.elastic.co/guide/en/beats/winlogbeat/current/_winlogbeat_overview.html).
- To install Elastic Defend, refer to the [documentation](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
- To set up and run Winlogbeat, follow [this](https://www.elastic.co/guide/en/beats/winlogbeat/current/winlogbeat-installation-configuration.html) guide.

#### The following steps should be executed to install assets associated with the LotL Attack Detection integration:
- Go to the Kibana homepage. Under Management, click Integrations.
- In the query bar, search for Living off the Land Attack Detection and select the integration to see more details about it.
- Follow the instructions under the **Installation** section.
- For this rule to work, complete the instructions through **Add preconfigured anomaly detection jobs**.
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Living off the Land Attack Detection",
    "Rule Type: ML",
    "Rule Type: Machine Learning",
    "Tactic: Defense Evasion",
]
type = "machine_learning"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Unusual Process Spawned by a Parent Process

In modern security environments, machine learning models are pivotal in identifying anomalies. The detection rule leverages both supervised and unsupervised ML to flag processes that deviate from normal behavior, indicating potential misuse of legitimate tools (LOLBins) by adversaries. By correlating unusual child processes with known malicious patterns, it effectively uncovers stealthy tactics like masquerading, enhancing defense against evasion techniques.

### Possible investigation steps

- Review the alert details to identify the parent and child process names, process IDs, and the timestamp of the event.
- Cross-reference the parent and child process names against known legitimate and malicious process lists to assess their typical behavior and reputation.
- Use Osquery to gather additional context about the processes. For example, run the following query to retrieve details about the child process: `SELECT * FROM processes WHERE pid = <child_process_id>;`.
- Investigate the command line arguments used by the child process to identify any suspicious or unusual parameters that may indicate malicious activity.
- Check the parent process's historical behavior to determine if spawning the flagged child process is typical or anomalous for this parent.
- Analyze the user account associated with the process execution to determine if it aligns with expected behavior or if it might be compromised.
- Examine the network connections established by the child process using Osquery: `SELECT * FROM process_open_sockets WHERE pid = <child_process_id>;` to identify any unusual or unauthorized external communications.
- Review recent system logs and security events around the time of the alert to identify any correlated activities or anomalies.
- Investigate any file modifications or registry changes made by the child process to assess potential persistence mechanisms or system alterations.
- Consult threat intelligence sources to determine if the process behavior or associated indicators of compromise (IOCs) match known attack patterns or campaigns.

### False positive analysis

- Known false positives for the Unusual Process Spawned by a Parent Process rule often involve legitimate administrative tools or scripts that are frequently used in enterprise environments. These tools may be flagged due to their unusual execution patterns or names that resemble known malicious processes.
- Users can manage these false positives by creating exceptions for processes that are regularly used and verified as safe within their organization. This can be done by maintaining a whitelist of known benign processes or by configuring the detection system to ignore specific parent-child process relationships that are deemed non-threatening.
- It's important to regularly review and update these exceptions to ensure they reflect current operational practices and do not inadvertently allow new threats to go undetected.
- In environments where certain processes are known to exhibit behavior similar to LOLBins but are part of routine operations, users should document these cases and adjust the detection thresholds or rules accordingly to minimize unnecessary alerts.
- Collaboration with IT and security teams is crucial to accurately identify and exclude these benign processes without compromising the overall security posture.

### Response and remediation

- Isolate the affected system from the network to prevent further spread of potential malicious activity.
- Conduct a thorough investigation of the unusual process and its parent process to determine the scope and impact of the activity.
- Terminate the suspicious process and any associated processes that are confirmed to be malicious.
- Review and analyze logs to identify any additional indicators of compromise or related suspicious activities.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and action.
- Implement enhanced logging policies to capture detailed process creation events and network activity for future investigations.
- Integrate threat intelligence feeds to correlate detected anomalies with known threat patterns and adversary tactics.
- Restore the system to its operational state by applying necessary patches, updates, and security configurations.
- Conduct a post-incident review to identify gaps in detection and response capabilities and update security policies accordingly.
- Apply system hardening measures, such as disabling unnecessary services and enforcing least privilege access controls, to reduce the attack surface."""
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1036"
name = "Masquerading"
reference = "https://attack.mitre.org/techniques/T1036/"


[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

