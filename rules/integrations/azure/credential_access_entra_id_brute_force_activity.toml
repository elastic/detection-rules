[metadata]
creation_date = "2024/09/06"
integration = ["azure"]
maturity = "production"
min_stack_comments = "Elastic ESQL values aggregation is more performant in 8.16.5 and above."
min_stack_version = "8.17.0"
updated_date = "2025/07/16"

[rule]
author = ["Elastic"]
description = """
Identifies potential brute-force attacks targeting user accounts by analyzing failed sign-in patterns in Microsoft Entra
ID Sign-In Logs. This detection focuses on a high volume of failed interactive or non-interactive authentication
attempts within a short time window, often indicative of password spraying, credential stuffing, or password guessing.
Adversaries may use these techniques to gain unauthorized access to applications integrated with Entra ID or to
compromise valid user accounts.
"""
false_positives = [
    """
    Automated processes that attempt to authenticate using expired credentials or have misconfigured authentication
    settings may lead to false positives.
    """,
]
from = "now-60m"
interval = "15m"
language = "esql"
license = "Elastic License v2"
name = "Microsoft Entra ID Sign-In Brute Force Activity"
note = """## Triage and analysis

### Investigating Microsoft Entra ID Sign-In Brute Force Activity

This rule detects brute-force authentication activity in Entra ID sign-in logs. It classifies failed sign-in attempts into behavior types such as password spraying, credential stuffing, or password guessing. The classification (`bf_type`) helps prioritize triage and incident response.

### Possible investigation steps

- Review `bf_type`: Determines the brute-force technique being used (`password_spraying`, `credential_stuffing`, or `password_guessing`).
- Examine `user_id_list`: Identify if high-value accounts (e.g., administrators, service principals, federated identities) are being targeted.
- Review `login_errors`: Repetitive error types like `"Invalid Grant"` or `"User Not Found"` suggest automated attacks.
- Check `ip_list` and `source_orgs`: Investigate if the activity originates from suspicious infrastructure (VPNs, hosting providers, etc.).
- Validate `unique_ips` and `countries`: Geographic diversity and IP volume may indicate distributed or botnet-based attacks.
- Compare `total_attempts` vs `duration_seconds`: High rate of failures in a short time period implies automation.
- Analyze `user_agent.original` and `device_detail_browser`: User agents like `curl`, `Python`, or generic libraries may indicate scripting tools.
- Investigate `client_app_display_name` and `incoming_token_type`: Detect potential abuse of legacy or unattended login mechanisms.
- Inspect `target_resource_display_name`: Understand what application or resource the attacker is trying to access.
- Pivot using `session_id` and `device_detail_device_id`: Determine if a device is targeting multiple accounts.
- Review `conditional_access_status`: If not enforced, ensure Conditional Access policies are scoped correctly.

### False positive analysis

- Legitimate automation (e.g., misconfigured scripts, sync processes) can trigger repeated failures.
- Internal red team activity or penetration tests may mimic brute-force behaviors.
- Certain service accounts or mobile clients may generate repetitive sign-in noise if not properly configured.

### Response and remediation

- Notify your identity security team for further analysis.
- Investigate and lock or reset impacted accounts if compromise is suspected.
- Block offending IPs or ASNs at the firewall, proxy, or using Conditional Access.
- Confirm MFA and Conditional Access are enforced for all user types.
- Audit targeted accounts for credential reuse across services.
- Implement account lockout or throttling for failed sign-in attempts where possible.
"""
references = [
    "https://www.proofpoint.com/us/blog/threat-insight/attackers-unleash-teamfiltration-account-takeover-campaign",
    "https://www.microsoft.com/en-us/security/blog/2025/05/27/new-russia-affiliated-actor-void-blizzard-targets-critical-sectors-for-espionage/",
    "https://cloud.hacktricks.xyz/pentesting-cloud/azure-security/az-unauthenticated-enum-and-initial-entry/az-password-spraying",
    "https://learn.microsoft.com/en-us/security/operations/incident-response-playbook-password-spray",
    "https://learn.microsoft.com/en-us/purview/audit-log-detailed-properties",
    "https://securityscorecard.com/research/massive-botnet-targets-m365-with-stealthy-password-spraying-attacks/",
    "https://learn.microsoft.com/en-us/entra/identity-platform/reference-error-codes",
    "https://github.com/0xZDH/Omnispray",
    "https://github.com/0xZDH/o365spray",
]
risk_score = 47
rule_id = "cca64114-fb8b-11ef-86e2-f661ea17fbce"
severity = "medium"
tags = [
    "Domain: Cloud",
    "Domain: Identity",
    "Data Source: Azure",
    "Data Source: Entra ID",
    "Data Source: Entra ID Sign-in Logs",
    "Use Case: Identity and Access Audit",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Resources: Investigation Guide",
]
timestamp_override = "event.ingested"
type = "esql"

query = '''
FROM logs-azure.signinlogs*

// Define a time window for grouping and maintain the original event timestamp
| EVAL esql.time_window.date_trunc = DATE_TRUNC(15 minutes, @timestamp)

// Filter relevant failed authentication events with specific error codes
| WHERE event.dataset == "azure.signinlogs"
    AND event.category == "authentication"
    AND azure.signinlogs.category IN ("NonInteractiveUserSignInLogs", "SignInLogs")
    AND event.outcome == "failure"
    AND azure.signinlogs.properties.authentication_requirement == "singleFactorAuthentication"
    AND azure.signinlogs.properties.status.error_code IN (
        50034,  // UserAccountNotFound
        50126,  // InvalidUsernameOrPassword
        50055,  // PasswordExpired
        50056,  // InvalidPassword
        50057,  // UserDisabled
        50064,  // CredentialValidationFailure
        50076,  // MFARequiredButNotPassed
        50079,  // MFARegistrationRequired
        50105,  // EntitlementGrantsNotFound
        70000,  // InvalidGrant
        70008,  // ExpiredOrRevokedRefreshToken
        70043,  // BadTokenDueToSignInFrequency
        80002,  // OnPremisePasswordValidatorRequestTimedOut
        80005,  // OnPremisePasswordValidatorUnpredictableWebException
        50144,  // InvalidPasswordExpiredOnPremPassword
        50135,  // PasswordChangeCompromisedPassword
        50142,  // PasswordChangeRequiredConditionalAccess
        120000, // PasswordChangeIncorrectCurrentPassword
        120002, // PasswordChangeInvalidNewPasswordWeak
        120020  // PasswordChangeFailure
    )
    AND azure.signinlogs.properties.user_principal_name IS NOT NULL AND azure.signinlogs.properties.user_principal_name != ""
    AND user_agent.original != "Mozilla/5.0 (compatible; MSAL 1.0) PKeyAuth/1.0"
    AND source.`as`.organization.name != "MICROSOFT-CORP-MSN-AS-BLOCK"

| STATS
    esql.azure.signinlogs.properties.authentication_requirement.values = VALUES(azure.signinlogs.properties.authentication_requirement),
    esql.azure.signinlogs.properties.app_id.values = VALUES(azure.signinlogs.properties.app_id),
    esql.azure.signinlogs.properties.app_display_name.values = VALUES(azure.signinlogs.properties.app_display_name),
    esql.azure.signinlogs.properties.resource_id.values = VALUES(azure.signinlogs.properties.resource_id),
    esql.azure.signinlogs.properties.resource_display_name.values = VALUES(azure.signinlogs.properties.resource_display_name),
    esql.azure.signinlogs.properties.conditional_access_status.values = VALUES(azure.signinlogs.properties.conditional_access_status),
    esql.azure.signinlogs.properties.device_detail.browser.values = VALUES(azure.signinlogs.properties.device_detail.browser),
    esql.azure.signinlogs.properties.device_detail.device_id.values = VALUES(azure.signinlogs.properties.device_detail.device_id),
    esql.azure.signinlogs.properties.device_detail.operating_system.values = VALUES(azure.signinlogs.properties.device_detail.operating_system),
    esql.azure.signinlogs.properties.incoming_token_type.values = VALUES(azure.signinlogs.properties.incoming_token_type),
    esql.azure.signinlogs.properties.risk_state.values = VALUES(azure.signinlogs.properties.risk_state),
    esql.azure.signinlogs.properties.session_id.values = VALUES(azure.signinlogs.properties.session_id),
    esql.azure.signinlogs.properties.user_id.values = VALUES(azure.signinlogs.properties.user_id),
    esql.azure.signinlogs.properties.user_principal_name.values = VALUES(azure.signinlogs.properties.user_principal_name),
    esql.azure.signinlogs.result_description.values = VALUES(azure.signinlogs.result_description),
    esql.azure.signinlogs.result_signature.values = VALUES(azure.signinlogs.result_signature),
    esql.azure.signinlogs.result_type.values = VALUES(azure.signinlogs.result_type),

    esql.azure.signinlogs.properties.user_id.unique_count = COUNT_DISTINCT(azure.signinlogs.properties.user_id),
    esql.azure.signinlogs.properties.user_id.list = VALUES(azure.signinlogs.properties.user_id),
    esql.azure.signinlogs.result_description.values_all = VALUES(azure.signinlogs.result_description),
    esql.azure.signinlogs.result_description.unique_count = COUNT_DISTINCT(azure.signinlogs.result_description),
    esql.azure.signinlogs.properties.status.error_code.values = VALUES(azure.signinlogs.properties.status.error_code),
    esql.azure.signinlogs.properties.status.error_code.unique_count = COUNT_DISTINCT(azure.signinlogs.properties.status.error_code),
    esql.azure.signinlogs.properties.incoming_token_type.values_all = VALUES(azure.signinlogs.properties.incoming_token_type),
    esql.azure.signinlogs.properties.app_display_name.values_all = VALUES(azure.signinlogs.properties.app_display_name),
    esql.source.ip.values = VALUES(source.ip),
    esql.source.ip.unique_count = COUNT_DISTINCT(source.ip),
    esql.source.`as`.organization.name.values = VALUES(source.`as`.organization.name),
    esql.source.geo.country_name.values = VALUES(source.geo.country_name),
    esql.source.geo.country_name.unique_count = COUNT_DISTINCT(source.geo.country_name),
    esql.source.`as`.organization.name.unique_count = COUNT_DISTINCT(source.`as`.organization.name),
    esql.first_seen = MIN(@timestamp),
    esql.last_seen = MAX(@timestamp),
    esql.total_attempts = COUNT()
BY esql.time_window.date_trunc

| EVAL
    esql.duration.seconds = DATE_DIFF("seconds", esql.first_seen, esql.last_seen),
    esql.brute_force.type = CASE(
        esql.azure.signinlogs.properties.user_id.unique_count >= 10 AND esql.total_attempts >= 30 AND esql.azure.signinlogs.result_description.unique_count <= 3
            AND esql.source.ip.unique_count >= 5
            AND esql.duration.seconds <= 600
            AND esql.azure.signinlogs.properties.user_id.unique_count > esql.source.ip.unique_count,
        "credential_stuffing",

        esql.azure.signinlogs.properties.user_id.unique_count >= 15 AND esql.azure.signinlogs.result_description.unique_count == 1 AND esql.total_attempts >= 15 AND esql.duration.seconds <= 1800,
        "password_spraying",

        (esql.azure.signinlogs.properties.user_id.unique_count == 1 AND esql.azure.signinlogs.result_description.unique_count == 1 AND esql.total_attempts >= 30 AND esql.duration.seconds <= 300)
            OR (esql.azure.signinlogs.properties.user_id.unique_count <= 3 AND esql.source.ip.unique_count > 30 AND esql.total_attempts >= 100),
        "password_guessing",

        "other"
    )

| KEEP
    esql.time_window.date_trunc,
    esql.brute_force.type,
    esql.duration.seconds,
    esql.total_attempts,
    esql.first_seen,
    esql.last_seen,
    esql.azure.signinlogs.properties.user_id.unique_count,
    esql.azure.signinlogs.properties.user_id.list,
    esql.azure.signinlogs.result_description.values_all,
    esql.azure.signinlogs.result_description.unique_count,
    esql.azure.signinlogs.properties.status.error_code.unique_count,
    esql.azure.signinlogs.properties.status.error_code.values,
    esql.azure.signinlogs.properties.incoming_token_type.values_all,
    esql.azure.signinlogs.properties.app_display_name.values_all,
    esql.source.ip.values,
    esql.source.ip.unique_count,
    esql.source.`as`.organization.name.values,
    esql.source.geo.country_name.values,
    esql.source.geo.country_name.unique_count,
    esql.source.`as`.organization.name.unique_count,
    esql.azure.signinlogs.properties.authentication_requirement.values,
    esql.azure.signinlogs.properties.app_id.values,
    esql.azure.signinlogs.properties.app_display_name.values,
    esql.azure.signinlogs.properties.resource_id.values,
    esql.azure.signinlogs.properties.resource_display_name.values,
    esql.azure.signinlogs.properties.conditional_access_status.values,
    esql.azure.signinlogs.properties.device_detail.browser.values,
    esql.azure.signinlogs.properties.device_detail.device_id.values,
    esql.azure.signinlogs.properties.device_detail.operating_system.values,
    esql.azure.signinlogs.properties.incoming_token_type.values,
    esql.azure.signinlogs.properties.risk_state.values,
    esql.azure.signinlogs.properties.session_id.values,
    esql.azure.signinlogs.properties.user_id.values,
    esql.azure.signinlogs.properties.user_principal_name.values,
    esql.azure.signinlogs.result_description.values,
    esql.azure.signinlogs.result_signature.values,
    esql.azure.signinlogs.result_type.values

| WHERE esql.brute_force.type != "other"
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1110"
name = "Brute Force"
reference = "https://attack.mitre.org/techniques/T1110/"
[[rule.threat.technique.subtechnique]]
id = "T1110.001"
name = "Password Guessing"
reference = "https://attack.mitre.org/techniques/T1110/001/"

[[rule.threat.technique.subtechnique]]
id = "T1110.003"
name = "Password Spraying"
reference = "https://attack.mitre.org/techniques/T1110/003/"

[[rule.threat.technique.subtechnique]]
id = "T1110.004"
name = "Credential Stuffing"
reference = "https://attack.mitre.org/techniques/T1110/004/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

