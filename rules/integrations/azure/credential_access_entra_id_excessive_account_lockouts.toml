[metadata]
creation_date = "2025/07/01"
integration = ["azure"]
maturity = "production"
updated_date = "2025/07/16"

[rule]
author = ["Elastic"]
description = """
Identifies a high count of failed Microsoft Entra ID sign-in attempts as the result of the target user account being
locked out. Adversaries may attempt to brute-force user accounts by repeatedly trying to authenticate with incorrect
credentials, leading to account lockouts by Entra ID Smart Lockout policies.
"""
false_positives = [
    """
    Automated processes that attempt to authenticate using expired credentials or have misconfigured authentication
    settings may lead to false positives.
    """,
]
from = "now-60m"
interval = "15m"
language = "esql"
license = "Elastic License v2"
name = "Microsoft Entra ID Exccessive Account Lockouts Detected"
note = """## Triage and analysis

### Investigating Microsoft Entra ID Exccessive Account Lockouts Detected

This rule detects a high number of sign-in failures due to account lockouts (error code `50053`) in Microsoft Entra ID sign-in logs. These lockouts are typically caused by repeated authentication failures, often as a result of brute-force tactics such as password spraying, credential stuffing, or automated guessing. This detection is time-bucketed and aggregates attempts to identify bursts or coordinated campaigns targeting multiple users.

### Possible investigation steps

- Review `user_id_list` and `user_principal_name`: Check if targeted users include high-value accounts such as administrators, service principals, or shared inboxes.
- Check `error_codes` and `result_description`: Validate that `50053` (account locked) is the consistent failure type. Messages indicating "malicious IP" activity suggest Microsoftâ€™s backend flagged the source.
- Analyze `ip_list` and `source_orgs`: Identify whether the activity originated from known malicious infrastructure (e.g., VPNs, botnets, or public cloud providers). In the example, traffic originates from `MASSCOM`, which should be validated.
- Inspect `device_detail_browser` and `user_agent`: Clients like `"Python Requests"` indicate scripted automation rather than legitimate login attempts.
- Evaluate `unique_users` vs. `total_attempts`: A high ratio suggests distributed attacks across multiple accounts, characteristic of password spraying.
- Correlate `client_app_display_name` and `incoming_token_type`: PowerShell or unattended sign-in clients may be targeted for automation or legacy auth bypass.
- Review `conditional_access_status` and `risk_state`: If Conditional Access was not applied and risk was not flagged, policy scope or coverage should be reviewed.
- Validate time range (`first_seen`, `last_seen`): Determine whether the attack is a short burst or part of a longer campaign.

### False positive analysis

- Misconfigured clients, scripts, or services with outdated credentials may inadvertently cause lockouts.
- Repeated lockouts from known internal IPs or during credential rotation windows could be benign.
- Legacy applications without modern auth support may repeatedly fail and trigger Smart Lockout.
- Specific known user agents (e.g., corporate service accounts).
- Internal IPs or cloud-hosted automation with expected failure behavior.

### Response and remediation

- Investigate locked accounts immediately. Confirm if the account was successfully accessed prior to lockout.
- Reset credentials for impacted users and enforce MFA before re-enabling accounts.
- Block malicious IPs or ASN at the firewall, identity provider, or Conditional Access level.
- Audit authentication methods in use, and enforce modern auth (OAuth, SAML) over legacy protocols.
- Strengthen Conditional Access policies to reduce exposure from weak locations, apps, or clients.
- Conduct credential hygiene audits to assess reuse and rotation for targeted accounts.
"""
references = [
    "https://www.microsoft.com/en-us/security/blog/2025/05/27/new-russia-affiliated-actor-void-blizzard-targets-critical-sectors-for-espionage/",
    "https://cloud.hacktricks.xyz/pentesting-cloud/azure-security/az-unauthenticated-enum-and-initial-entry/az-password-spraying",
    "https://learn.microsoft.com/en-us/security/operations/incident-response-playbook-password-spray",
    "https://www.sprocketsecurity.com/blog/exploring-modern-password-spraying",
    "https://learn.microsoft.com/en-us/purview/audit-log-detailed-properties",
    "https://learn.microsoft.com/en-us/entra/identity-platform/reference-error-codes",
    "https://github.com/0xZDH/Omnispray",
    "https://github.com/0xZDH/o365spray",
]
risk_score = 73
rule_id = "2d6f5332-42ea-11f0-b09a-f661ea17fbcd"
severity = "high"
tags = [
    "Domain: Cloud",
    "Domain: Identity",
    "Data Source: Azure",
    "Data Source: Entra ID",
    "Data Source: Entra ID Sign-in Logs",
    "Use Case: Identity and Access Audit",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Resources: Investigation Guide",
]
timestamp_override = "event.ingested"
type = "esql"

query = '''
FROM logs-azure.signinlogs*

| EVAL
    esql.time_window.date_trunc = DATE_TRUNC(30 minutes, @timestamp),
    esql.azure.signinlogs.properties.user_principal_name.lower = TO_LOWER(azure.signinlogs.properties.user_principal_name),
    esql.azure.signinlogs.properties.incoming_token_type.lower = TO_LOWER(azure.signinlogs.properties.incoming_token_type),
    esql.azure.signinlogs.properties.app_display_name.lower = TO_LOWER(azure.signinlogs.properties.app_display_name)

| WHERE event.dataset == "azure.signinlogs"
    AND event.category == "authentication"
    AND azure.signinlogs.category IN ("NonInteractiveUserSignInLogs", "SignInLogs")
    AND event.outcome == "failure"
    AND azure.signinlogs.properties.authentication_requirement == "singleFactorAuthentication"
    AND azure.signinlogs.properties.status.error_code == 50053
    AND azure.signinlogs.properties.user_principal_name IS NOT NULL
    AND azure.signinlogs.properties.user_principal_name != ""
    AND source.`as`.organization.name != "MICROSOFT-CORP-MSN-AS-BLOCK"

| STATS
    esql.azure.signinlogs.properties.authentication_requirement.values = VALUES(azure.signinlogs.properties.authentication_requirement),
    esql.azure.signinlogs.properties.app_id.values = VALUES(azure.signinlogs.properties.app_id),
    esql.azure.signinlogs.properties.app_display_name.values = VALUES(azure.signinlogs.properties.app_display_name),
    esql.azure.signinlogs.properties.resource_id.values = VALUES(azure.signinlogs.properties.resource_id),
    esql.azure.signinlogs.properties.resource_display_name.values = VALUES(azure.signinlogs.properties.resource_display_name),
    esql.azure.signinlogs.properties.conditional_access_status.values = VALUES(azure.signinlogs.properties.conditional_access_status),
    esql.azure.signinlogs.properties.device_detail.browser.values = VALUES(azure.signinlogs.properties.device_detail.browser),
    esql.azure.signinlogs.properties.device_detail.device_id.values = VALUES(azure.signinlogs.properties.device_detail.device_id),
    esql.azure.signinlogs.properties.device_detail.operating_system.values = VALUES(azure.signinlogs.properties.device_detail.operating_system),
    esql.azure.signinlogs.properties.incoming_token_type.values = VALUES(azure.signinlogs.properties.incoming_token_type),
    esql.azure.signinlogs.properties.risk_state.values = VALUES(azure.signinlogs.properties.risk_state),
    esql.azure.signinlogs.properties.session_id.values = VALUES(azure.signinlogs.properties.session_id),
    esql.azure.signinlogs.properties.user_id.values = VALUES(azure.signinlogs.properties.user_id),
    esql.azure.signinlogs.properties.user_principal_name.values = VALUES(azure.signinlogs.properties.user_principal_name),
    esql.azure.signinlogs.result_description.values = VALUES(azure.signinlogs.result_description),
    esql.azure.signinlogs.result_signature.values = VALUES(azure.signinlogs.result_signature),
    esql.azure.signinlogs.result_type.values = VALUES(azure.signinlogs.result_type),

    esql.azure.signinlogs.properties.user_principal_name.lower.count_distinct = COUNT_DISTINCT(esql.azure.signinlogs.properties.user_principal_name.lower),
    esql.azure.signinlogs.properties.user_principal_name.lower.values = VALUES(esql.azure.signinlogs.properties.user_principal_name.lower),
    esql.azure.signinlogs.result_description.count_distinct = COUNT_DISTINCT(azure.signinlogs.result_description),
    esql.azure.signinlogs.properties.status.error_code.count_distinct = COUNT_DISTINCT(azure.signinlogs.properties.status.error_code),
    esql.azure.signinlogs.properties.status.error_code.values = VALUES(azure.signinlogs.properties.status.error_code),
    esql.azure.signinlogs.properties.incoming_token_type.lower.values = VALUES(esql.azure.signinlogs.properties.incoming_token_type.lower),
    esql.azure.signinlogs.properties.app_display_name.lower.values = VALUES(esql.azure.signinlogs.properties.app_display_name.lower),
    esql.source.ip.values = VALUES(source.ip),
    esql.source.ip.count_distinct = COUNT_DISTINCT(source.ip),
    esql.source.`as`.organization.name.values = VALUES(source.`as`.organization.name),
    esql.source.`as`.organization.name.count_distinct = COUNT_DISTINCT(source.`as`.organization.name),
    esql.source.geo.country_name.values = VALUES(source.geo.country_name),
    esql.source.geo.country_name.count_distinct = COUNT_DISTINCT(source.geo.country_name),
    esql.@timestamp.min = MIN(@timestamp),
    esql.@timestamp.max = MAX(@timestamp),
    esql.event.count = COUNT()
BY esql.time_window.date_trunc

| WHERE esql.azure.signinlogs.properties.user_principal_name.lower.count_distinct >= 15 AND esql.event.count >= 20

| KEEP
    esql.time_window.date_trunc,
    esql.event.count,
    esql.@timestamp.min,
    esql.@timestamp.max,
    esql.azure.signinlogs.properties.user_principal_name.lower.count_distinct,
    esql.azure.signinlogs.properties.user_principal_name.lower.values,
    esql.azure.signinlogs.result_description.count_distinct,
    esql.azure.signinlogs.result_description.values,
    esql.azure.signinlogs.properties.status.error_code.count_distinct,
    esql.azure.signinlogs.properties.status.error_code.values,
    esql.azure.signinlogs.properties.incoming_token_type.lower.values,
    esql.azure.signinlogs.properties.app_display_name.lower.values,
    esql.source.ip.values,
    esql.source.ip.count_distinct,
    esql.source.`as`.organization.name.values,
    esql.source.`as`.organization.name.count_distinct,
    esql.source.geo.country_name.values,
    esql.source.geo.country_name.count_distinct,
    esql.azure.signinlogs.properties.authentication_requirement.values,
    esql.azure.signinlogs.properties.app_id.values,
    esql.azure.signinlogs.properties.app_display_name.values,
    esql.azure.signinlogs.properties.resource_id.values,
    esql.azure.signinlogs.properties.resource_display_name.values,
    esql.azure.signinlogs.properties.conditional_access_status.values,
    esql.azure.signinlogs.properties.device_detail.browser.values,
    esql.azure.signinlogs.properties.device_detail.device_id.values,
    esql.azure.signinlogs.properties.device_detail.operating_system.values,
    esql.azure.signinlogs.properties.incoming_token_type.values,
    esql.azure.signinlogs.properties.risk_state.values,
    esql.azure.signinlogs.properties.session_id.values,
    esql.azure.signinlogs.properties.user_id.values,
    esql.azure.signinlogs.properties.user_principal_name.values,
    esql.azure.signinlogs.result_description.values,
    esql.azure.signinlogs.result_signature.values,
    esql.azure.signinlogs.result_type.values
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1110"
name = "Brute Force"
reference = "https://attack.mitre.org/techniques/T1110/"
[[rule.threat.technique.subtechnique]]
id = "T1110.001"
name = "Password Guessing"
reference = "https://attack.mitre.org/techniques/T1110/001/"

[[rule.threat.technique.subtechnique]]
id = "T1110.003"
name = "Password Spraying"
reference = "https://attack.mitre.org/techniques/T1110/003/"

[[rule.threat.technique.subtechnique]]
id = "T1110.004"
name = "Credential Stuffing"
reference = "https://attack.mitre.org/techniques/T1110/004/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

