[metadata]
creation_date = "2020/08/19"
integration = ["azure"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies a rotation to storage account access keys in Azure. Regenerating access keys can affect any applications or
Azure services that are dependent on the storage account key. Adversaries may regenerate a key as a means of acquiring
credentials to access systems and resources.
"""
false_positives = [
    """
    It's recommended that you rotate your access keys periodically to help keep your storage account secure. Normal key
    rotation can be exempted from the rule. An abnormal time frame and/or a key rotation from unfamiliar users, hosts,
    or locations should be investigated.
    """,
]
from = "now-25m"
index = ["filebeat-*", "logs-azure*"]
language = "kuery"
license = "Elastic License v2"
name = "Azure Storage Account Key Regenerated"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Azure Storage Account Key Regenerated

Azure Storage Account keys are critical credentials that grant access to storage resources. They are often used by applications and services to authenticate and interact with Azure Storage. Adversaries may regenerate these keys to gain unauthorized access, potentially disrupting services or exfiltrating data. The detection rule monitors for successful key regeneration events, signaling potential credential misuse, and aligns with known threat tactics to alert security teams.

### Possible investigation steps

- Review the alert details to confirm the event dataset is `azure.activitylogs` and the operation name is `MICROSOFT.STORAGE/STORAGEACCOUNTS/REGENERATEKEY/ACTION` with a successful outcome.
- Identify the user or service principal associated with the key regeneration event by examining the `azure.activitylogs.caller` field.
- Check the timestamp of the key regeneration event to determine when the action occurred and correlate it with other security events or anomalies around the same time.
- Investigate the storage account involved by reviewing the `azure.activitylogs.resource_id` field to understand which resources might be affected.
- Analyze the `azure.activitylogs.correlation_id` to trace related activities and identify any other suspicious operations performed by the same user or service principal.
- Use Osquery to gather additional context on the system where the key regeneration was initiated. For example, run the following query to list recent Azure CLI commands executed: `SELECT * FROM shell_history WHERE command LIKE '%az storage%' ORDER BY time DESC LIMIT 10;`.
- Review the access patterns and usage of the storage account before and after the key regeneration event to identify any unusual data access or exfiltration attempts.
- Check for any recent changes in permissions or roles assigned to the user or service principal involved in the key regeneration to assess if there was a privilege escalation.
- Investigate any other alerts or incidents involving the same storage account or user to determine if this event is part of a broader attack campaign.
- Consult with the application or service owners using the storage account to verify if the key regeneration was authorized and necessary for operational purposes.

### False positive analysis

- Routine administrative tasks: Regularly scheduled key rotations by IT administrators for security best practices can trigger this alert. To manage this, create exceptions for known maintenance windows or specific user accounts responsible for these tasks.
- Automated scripts or tools: Some organizations use automated processes to periodically regenerate keys for compliance or security reasons. Identify these scripts and exclude their activity from triggering alerts by whitelisting their associated service accounts or IP addresses.
- Third-party integrations: Certain third-party services may require key regeneration as part of their normal operation. Review and document these integrations, then configure exceptions for their expected behavior to prevent false positives.
- Testing environments: In development or testing environments, frequent key regenerations may occur as part of testing procedures. Exclude these environments from alerting by using tags or specific resource group identifiers to differentiate them from production systems.

### Response and remediation

- Immediately revoke the regenerated storage account keys to prevent unauthorized access and assess the impact on dependent applications and services.
- Conduct a thorough investigation to determine the source and intent of the key regeneration, reviewing logs and correlating with other security events.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are compromised.
- Implement Azure Key Vault to manage and rotate storage account keys securely, reducing the risk of unauthorized key regeneration.
- Enable and configure Azure Monitor and Azure Security Center to enhance logging and alerting capabilities for storage account activities.
- Review and update access controls and permissions for Azure Storage Accounts to ensure the principle of least privilege is enforced.
- Conduct a security awareness session for administrators and developers on the importance of key management and the risks associated with key regeneration.
- Restore affected applications and services by updating them with new, secure access keys and verifying their operational status.
- Implement multi-factor authentication (MFA) and conditional access policies for accessing Azure resources to add an additional layer of security.
- Regularly review and update incident response plans to incorporate lessons learned from the incident and improve future response efforts.

## Setup

The Azure Fleet integration, Filebeat module, or similarly structured data is required to be compatible with this rule."""
references = [
    "https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage?tabs=azure-portal",
]
risk_score = 21
rule_id = "1e0b832e-957e-43ae-b319-db82d228c908"
severity = "low"
tags = [
    "Domain: Cloud",
    "Data Source: Azure",
    "Use Case: Identity and Access Audit",
    "Tactic: Credential Access",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.dataset:azure.activitylogs and azure.activitylogs.operation_name:"MICROSOFT.STORAGE/STORAGEACCOUNTS/REGENERATEKEY/ACTION" and event.outcome:(Success or success)
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1528"
name = "Steal Application Access Token"
reference = "https://attack.mitre.org/techniques/T1528/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

