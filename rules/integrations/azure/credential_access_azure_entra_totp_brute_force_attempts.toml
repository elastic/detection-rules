[metadata]
creation_date = "2024/12/11"
integration = ["azure"]
maturity = "production"
min_stack_comments = "ES|QL not available until 8.13.0 in technical preview."
min_stack_version = "8.13.0"
updated_date = "2024/12/11"

[rule]
author = ["Elastic"]
description = """
Identifies brute force attempts against Azure Entra multi-factor authentication (MFA) Time-based One-Time Password
(TOTP) verification codes. This rule detects high frequency failed TOTP code attempts for a single user in a short
time-span. Adversaries with valid credentials, when attempting to login to Azure portal or other Azure services, may be
prompted to provide a TOTP code as part of the MFA process. If successful, adversaries can bypass MFA and gain
unauthorized access to Azure resources.
"""
false_positives = [
    """
    Based on the high-frequency threshold, it would be unlikely for a legitimate user to exceed the threshold for failed
    TOTP code attempts in a short time-span.
    """,
]
from = "now-9m"
language = "esql"
license = "Elastic License v2"
name = "Azure Entra MFA TOTP Brute Force Attempts"
note = """## Triage and Analysis

### Investigating Azure Entra MFA TOTP Brute Force Attempts

This rule detects high-frequency failed TOTP code attempts for a single user in a short time span. Such behavior could indicate an adversary attempting to bypass multi-factor authentication (MFA) protections using valid credentials. Understanding the context of the user's typical behavior and identifying anomalies in the log data are critical to determining the nature of the activity.

#### Possible Investigation Steps:

**Review the Source IP Address**:
    - Check the `source.ip` or `azure.signinlogs.caller_ip_address` field.
    - Determine if the IP address is associated with the user’s typical login locations.
    - Look for unusual geographic patterns or anomalous IP addresses (e.g., proxies, VPNs, or locations outside the user’s normal activity).

**Analyze User Activity**:
    - Identify the user from the `azure.signinlogs.properties.sign_in_identifier` field.
    - Determine if the user is currently active from another device or session. Session hijacking could explain parallel activity with failed attempts.
    - Review past logs for the user to determine whether MFA failures or other anomalies are consistent or new.

**Inspect the Authentication Method**:
    - Evaluate the `azure.signinlogs.properties.mfa_detail.auth_method` field: `OATH verification code`.
    - Confirm if the user typically uses TOTP codes or another MFA method (e.g., push notifications).
    - Verify if there are any recent changes to the user’s MFA settings that may explain multiple failed attempts.

**Evaluate the User Agent**:
    - Check the `user_agent.original` field.
    - Identify if the user agent matches a typical browser or a potentially malicious script (e.g., Python-based).
    - Look for deviations in operating system or browser versions from the user’s normal activity.

**Analyze Conditional Access Policies**:
    - Review the `azure.signinlogs.properties.applied_conditional_access_policies` for enforced grant controls.
    - Verify if MFA failures are tied to legitimate security policies (`display_name: Require multifactor authentication for admins`).

**Correlate with Other Events**:
    - Search for other authentication attempts involving the same `azure.signinlogs.caller_ip_address`, `user_principal_name`, or `azure.signinlogs.properties.app_id`.
    - Look for suspicious activity patterns, such as password resets, privilege escalation, or account lockouts.


#### False Positive Analysis:

- **Unintentional User Behavior**:
    - Verify if the failed attempts could result from the user’s unfamiliarity with TOTP codes or issues with device synchronization.
    - Check if the user recently switched MFA methods or devices, which could explain multiple failures.
    - Determine if this is whitebox testing or a developer testing MFA integration.

- **Administrative Actions**:
    - Determine if the activity is related to legitimate administrative testing or configuration changes in the MFA system.

#### Response and Remediation:

- **Immediate Actions**:
    - If proven malicious, lock the affected account temporarily to prevent further unauthorized attempts.
    - Notify the user of suspicious activity and validate their access to the account.
    - Reset passwords and MFA settings for the affected user to prevent unauthorized access while communicating with the user.

- **Strengthen Authentication Policies**:
    - Ensure conditional access policies are configured to monitor and restrict anomalous login behavior.
    - Consider a different MFA method or additional security controls to prevent future bypass attempts.

- **Monitor and Audit**:
    - Implement additional monitoring to track high-frequency authentication failures across the environment.
    - Audit historical logs for similar patterns involving other accounts to identify broader threats.

- **Educate and Train Users**:
    - Provide guidance on the secure use of MFA and the importance of recognizing and reporting suspicious activity.
"""
references = [
    "https://www.oasis.security/resources/blog/oasis-security-research-team-discovers-microsoft-azure-mfa-bypass",
    "https://learn.microsoft.com/en-us/entra/identity/",
    "https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-sign-ins",
]
risk_score = 47
rule_id = "3fac01b2-b811-11ef-b25b-f661ea17fbce"
setup = """#### Required Azure Entra Sign-In Logs
This rule requires the Azure logs integration be enabled and configured to collect all logs, including sign-in logs from Entra. In Entra, sign-in logs must be enabled and streaming to the Event Hub used for the Azure logs integration.
"""
severity = "medium"
tags = [
    "Domain: Cloud",
    "Domain: SaaS",
    "Data Source: Azure",
    "Data Source: Entra ID",
    "Data Source: Entra ID Sign-in",
    "Use Case: Identity and Access Audit",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
]
timestamp_override = "event.ingested"
type = "esql"

query = '''
from logs-azure.signinlogs* metadata _id, _version, _index
| where
    // filter for Entra Sign-In Logs
    event.dataset == "azure.signinlogs"
    and azure.signinlogs.operation_name == "Sign-in activity"

    // filter for MFA attempts with OATH conditional access attempts or TOTP
    and azure.signinlogs.properties.authentication_requirement == "multiFactorAuthentication"
    and azure.signinlogs.properties.mfa_detail.auth_method == "OATH verification code"

    // filter on failures only from brute-force attempts
    and azure.signinlogs.properties.conditional_access_status == "failure"
    and azure.signinlogs.result_description == "Authentication failed during strong authentication request."
| keep azure.signinlogs.properties.sign_in_identifier
| stats
    // aggregate by the sign-in account or principal
    failed_totp_code_attempts = count(*) by azure.signinlogs.properties.sign_in_identifier
| where
    // filter on high frequency for a single user
    failed_totp_code_attempts > 30
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1110"
name = "Brute Force"
reference = "https://attack.mitre.org/techniques/T1110/"
[[rule.threat.technique.subtechnique]]
id = "T1110.001"
name = "Password Guessing"
reference = "https://attack.mitre.org/techniques/T1110/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

