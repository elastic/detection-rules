[metadata]
creation_date = "2024/06/24"
integration = ["azure"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies device code authentication with an Azure broker client for Entra ID. Adversaries abuse Primary Refresh Tokens (PRTs) to bypass multi-factor authentication (MFA) and gain unauthorized access to Azure resources. PRTs are used in Conditional Access policies to enforce device-based controls. Compromising PRTs allows attackers to bypass these policies and gain unauthorized access. This rule detects successful sign-ins using device code authentication with the Entra ID broker client application ID (29d9ed98-a469-4536-ade2-f981bc1d605e).
"""
from = "now-9m"
index = ["filebeat-*", "logs-azure.signinlogs-*", "logs-azure.activitylogs-*"]
language = "kuery"
license = "Elastic License v2"
name = "Entra ID Device Code Auth with Broker Client"
references =[
    "https://dirkjanm.io/assets/raw/Phishing%20the%20Phishing%20Resistant.pdf",
    "https://learn.microsoft.com/en-us/troubleshoot/azure/entra/entra-id/governance/verify-first-party-apps-sign-in",
    "https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/signinlogs"
]
risk_score = 47
rule_id = "a83b3dac-325a-11ef-b3e6-f661ea17fbce"
setup = """
This rule optionally requires Azure Sign-In logs from the Azure integration. Ensure that the Azure integration is correctly set up and that the required data is being collected.
"""
severity = "medium"
tags = [
    "Domain: Cloud",
    "Data Source: Azure",
    "Data Source: Microsoft Entra ID",
    "Use Case: Identity and Access Audit",
    "Tactic: Credential Access",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
 event.dataset:(azure.activitylogs or azure.signinlogs)
    and azure.signinlogs.properties.authentication_protocol:deviceCode
    and azure.signinlogs.properties.conditional_access_audiences.application_id:29d9ed98-a469-4536-ade2-f981bc1d605e
    and event.outcome:success or (
        azure.activitylogs.properties.appId:29d9ed98-a469-4536-ade2-f981bc1d605e
        and azure.activitylogs.properties.authentication_protocol:deviceCode)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Entra ID Device Code Auth with Broker Client

Entra ID Device Code Authentication facilitates seamless access to Azure resources by leveraging device-based controls and Primary Refresh Tokens (PRTs). Adversaries exploit PRTs to bypass multi-factor authentication, gaining unauthorized access. The detection rule identifies suspicious sign-ins by monitoring device code authentications linked to a specific broker client application, flagging potential misuse of PRTs.

### Possible investigation steps

- Review the alert details to confirm the presence of the Entra ID broker client application ID (29d9ed98-a469-4536-ade2-f981bc1d605e) in the sign-in logs, focusing on the `azure.signinlogs.properties.conditional_access_audiences.application_id` field.
- Examine the `event.dataset` field to determine whether the alert originated from `azure.activitylogs` or `azure.signinlogs`, as this will guide the context of the investigation.
- Analyze the `azure.signinlogs.properties.authentication_protocol` field to verify that the authentication protocol used was `deviceCode`, confirming the method of access.
- Check the `event.outcome` field to ensure the sign-in attempt was successful, which is crucial for identifying unauthorized access.
- Investigate the user account associated with the alert to determine if there are any known security incidents or unusual activities linked to this account.
- Use Osquery to gather additional context on the device involved in the authentication attempt. For example, run a query to list all recent logins on the device: `SELECT * FROM logins WHERE user = '<username>';`.
- Review the `azure.activitylogs.properties.appId` field in the activity logs to identify any other applications accessed using the same broker client application ID.
- Correlate the sign-in event with other security logs to identify any concurrent suspicious activities, such as changes in user permissions or unusual data access patterns.
- Investigate the IP address and location associated with the sign-in attempt to determine if it aligns with the user's typical access patterns or if it appears suspicious.
- Check for any recent changes in Conditional Access policies that might have inadvertently allowed the bypass of multi-factor authentication, focusing on policies related to device-based controls.

### False positive analysis

- Legitimate device code authentications by trusted applications or services may trigger the rule if they use the same broker client application ID. Users should verify the source of the authentication and assess whether it aligns with expected behavior.
- Frequent sign-ins from known and secure devices using device code authentication might be flagged. To manage this, users can create exceptions for specific device IDs or IP addresses that are consistently verified as non-threatening.
- Automated processes or scripts that utilize device code authentication for legitimate purposes could be misidentified as suspicious. Users should document and exclude these processes by adding them to an allowlist based on their application ID or other identifying attributes.
- Organizations with a high volume of device code authentications due to legitimate business operations may experience numerous alerts. Implementing a baseline of normal activity and adjusting the rule's sensitivity can help reduce false positives.
- Collaboration tools or third-party applications integrated with Azure that use device code authentication might be mistakenly flagged. Users should review these integrations and, if deemed safe, exclude them from the rule by specifying their application IDs.

### Response and remediation

- Immediately isolate the affected device from the network to prevent further unauthorized access.
- Revoke all active Primary Refresh Tokens (PRTs) associated with the compromised account to disrupt the adversary's access.
- Conduct a thorough investigation of the sign-in logs and activity logs to identify any unauthorized access or actions taken by the adversary.
- Reset passwords and enforce multi-factor authentication (MFA) for all accounts involved in the incident to enhance security.
- Escalate the incident to the security operations center (SOC) for further analysis and to determine if additional systems or accounts have been compromised.
- Implement enhanced logging policies to capture detailed authentication and access events, ensuring comprehensive monitoring of device code authentications.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to correlate and analyze suspicious activities in real-time.
- Restore the affected systems to their operational state by applying the latest security patches and updates, and verifying the integrity of critical files and configurations.
- Conduct a post-incident review to identify gaps in security controls and update the incident response plan accordingly.
- Implement hardening measures such as restricting device code authentication to trusted devices and applications, and regularly reviewing and updating Conditional Access policies."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1528"
name = "Steal Application Access Token"
reference = "https://attack.mitre.org/techniques/T1528/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

