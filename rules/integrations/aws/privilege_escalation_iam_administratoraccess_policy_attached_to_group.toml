[metadata]
creation_date = "2024/05/31"
integration = ["aws"]
maturity = "production"
updated_date = "2025/10/13"

[rule]
author = ["Elastic"]
description = """
An adversary with access to a set of compromised credentials may attempt to persist or escalate privileges by attaching
additional permissions to user groups the compromised user account belongs to. This rule looks for use of the IAM
AttachGroupPolicy API operation to attach the highly permissive AdministratorAccess AWS managed policy to an existing
IAM user group.
"""
false_positives = [
    """
    While this can be normal behavior, it should be investigated to ensure validity. Verify whether the user identity
    should be using the IAM `AttachGroupPolicy` API operation to attach the `AdministratorAccess` policy to the user
    group.
    """,
]
from = "now-6m"
index = ["filebeat-*", "logs-aws.cloudtrail-*"]
language = "eql"
license = "Elastic License v2"
name = "AWS IAM AdministratorAccess Policy Attached to Group"
note = """## Triage and analysis

> **Disclaimer**:
> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating AWS IAM AdministratorAccess Policy Attached to Group

The AWS-managed `AdministratorAccess` policy grants full administrative privileges across all AWS services.  
When attached to a group, all group members inherit this access, often unintentionally broadening the blast radius of a compromise.  
Adversaries can exploit `iam:AttachGroupPolicy` permissions to escalate privileges or establish persistence by attaching this policy to an existing user group.

#### Possible investigation steps

- **Identify the affected group and calling principal.**  
  Review `aws.cloudtrail.user_identity.arn` (caller) and `aws.cloudtrail.request_parameters.groupName` (target group).  
  Validate whether this aligns with legitimate change management or automation workflows.  

- **Review group membership.**  
  Enumerate current members using `aws iam get-group`.  
  Determine whether unauthorized users could have gained administrative access as a result.  

- **Inspect CloudTrail details.**  
  Check `source.ip`, `user_agent.original`, and `source.geo` fields for anomalies.  
  Compare with historical operations by the same principal.  

- **Correlate related IAM activity.**  
  Search for adjacent events such as `AddUserToGroup`, `CreateUser`, or `AttachUserPolicy`.  
  These may indicate chained privilege escalation.  

- **Assess propagation of privileges.**  
  If the group has many members or is linked to cross-account roles, the impact may extend beyond a single user.  
  Document all affected identities for containment.  

### False positive analysis

- **Intentional access updates.**  
  Policy attachment may occur during legitimate administrative provisioning. Confirm via ticketing systems.  
- **Automation or compliance tasks.**  
  Some environments use centralized scripts to attach AdministratorAccess temporarily. Validate through automation logs.  

### Response and remediation

**1. Immediate containment**
- Detach the policy from the affected group (`aws iam detach-group-policy`).  
- Review and limit group membership. Temporarily remove non-essential users or disable access for impacted accounts.  
- Rotate credentials for users who inherited admin privileges from the attachment.  
- Enable MFA on all impacted accounts.  

**2. Evidence preservation**
- Export the triggering `AttachGroupPolicy` event and related CloudTrail entries Â±30 minutes from the alert.  
- Preserve AWS Config and GuardDuty records to support forensic analysis.  

**3. Scoping and investigation**
- Review additional IAM operations from the same caller (`CreateAccessKey`, `AttachRolePolicy`, `UpdateAssumeRolePolicy`).  
- Identify whether new groups or roles were created shortly before or after the event.  
- Check for subsequent API activity by newly privileged users (for example, S3, EC2, or IAM modifications).  

**4. Recovery and hardening**
- Reinforce least privilege, avoid assigning `AdministratorAccess` to groups.  
- Use role-based access control with scoped permissions.   
- Enable CloudTrail, GuardDuty, and Security Hub across all regions.  
- Implement SCPs at the organization level to restrict direct `AdministratorAccess` attachments.  

### Additional information
- **[AWS IR Playbooks](https://github.com/aws-samples/aws-incident-response-playbooks/blob/c151b0dc091755fffd4d662a8f29e2f6794da52c/playbooks/): response steps related to IAM policy modification and unauthorized privilege escalation..  
- **[AWS Customer Playbook Framework](https://github.com/aws-samples/aws-customer-playbook-framework/): for containment, analysis, and recovery guidance.
- **AWS Documentation:** [AdministratorAccess Policy](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_job-functions.html#jf_administrator).
"""
references = [
    "https://docs.aws.amazon.com/IAM/latest/APIReference/API_AttachGroupPolicy.html",
    "https://docs.aws.amazon.com/aws-managed-policy/latest/reference/AdministratorAccess.html",
    "https://hackingthe.cloud/aws/exploitation/iam_privilege_escalation/",
]
risk_score = 47
rule_id = "df919b5e-a0f6-4fd8-8598-e3ce79299e3b"
severity = "medium"
tags = [
    "Domain: Cloud",
    "Data Source: AWS",
    "Data Source: Amazon Web Services",
    "Data Source: AWS IAM",
    "Use Case: Identity and Access Audit",
    "Tactic: Privilege Escalation",
    "Tactic: Persistence",
    "Resources: Investigation Guide",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
iam where event.dataset == "aws.cloudtrail"
   and event.provider == "iam.amazonaws.com"
   and event.action == "AttachGroupPolicy"
   and event.outcome == "success"
   and stringContains(aws.cloudtrail.request_parameters, "policyArn=arn:aws:iam::aws:policy/AdministratorAccess")
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1098"
name = "Account Manipulation"
reference = "https://attack.mitre.org/techniques/T1098/"
[[rule.threat.technique.subtechnique]]
id = "T1098.003"
name = "Additional Cloud Roles"
reference = "https://attack.mitre.org/techniques/T1098/003/"



[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1098"
name = "Account Manipulation"
reference = "https://attack.mitre.org/techniques/T1098/"
[[rule.threat.technique.subtechnique]]
id = "T1098.003"
name = "Additional Cloud Roles"
reference = "https://attack.mitre.org/techniques/T1098/003/"



[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

[rule.investigation_fields]
field_names = [
    "@timestamp",
    "user.name",
    "user_agent.original",
    "source.ip",
    "aws.cloudtrail.user_identity.arn",
    "aws.cloudtrail.user_identity.type",
    "aws.cloudtrail.user_identity.access_key_id",
    "event.action",
    "group.name",
    "event.outcome",
    "cloud.account.id",
    "cloud.region",
    "aws.cloudtrail.request_parameters",
]

