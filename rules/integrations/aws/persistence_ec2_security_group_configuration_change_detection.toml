[metadata]
creation_date = "2021/05/05"
integration = ["aws"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic", "Austin Songer"]
description = """
Identifies a change to an AWS Security Group Configuration. A security group is like a virtual firewall, and modifying
configurations may allow unauthorized access. Threat actors may abuse this to establish persistence, exfiltrate data, or
pivot in an AWS environment.
"""
false_positives = [
    """
    A security group may be created by a system or network administrator. Verify whether the user identity, user agent,
    and/or hostname should be making changes in your environment. Security group creations by unfamiliar users or hosts
    should be investigated. If known behavior is causing false positives, it can be exempted from the rule.
    """,
]
from = "now-9m"
index = ["filebeat-*", "logs-aws.cloudtrail-*"]
language = "kuery"
license = "Elastic License v2"
name = "AWS EC2 Security Group Configuration Change"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating AWS EC2 Security Group Configuration Change

AWS EC2 Security Groups act as virtual firewalls, controlling inbound and outbound traffic to instances. Adversaries may exploit changes in these configurations to gain unauthorized access, maintain persistence, or move laterally within an AWS environment. The detection rule monitors successful changes to security group settings, such as rule modifications or group creation, to identify potential misuse by threat actors.

### Possible investigation steps

- Review the specific `event.action` that triggered the alert to understand the type of change made to the security group configuration.
- Examine the `event.dataset` and `event.provider` fields to confirm the event source and ensure it is related to AWS EC2.
- Check the `event.outcome` field to verify that the change was successful, as unsuccessful attempts may indicate probing or testing by an adversary.
- Identify the `user.identity` or `user.name` associated with the event to determine who made the change and assess if this user has legitimate access and reasons for the modification.
- Investigate the `source.ip` or `source.address` to determine the origin of the request and assess if it is from a known or expected location.
- Review the `aws.region` field to ensure the change was made in an expected region, as unexpected regions may indicate unauthorized activity.
- Analyze the `event.time` to correlate the timing of the change with other suspicious activities or known incidents.
- Use Osquery to gather additional context on the affected instances. For example, run the following query to list all security groups and their rules: `SELECT * FROM ec2_security_groups WHERE group_id = '<affected_group_id>';`
- Cross-reference the security group changes with recent IAM policy changes or user activity logs to identify potential privilege escalation or misuse.
- Investigate any other related CloudTrail logs around the same timeframe to identify additional suspicious activities or patterns that may indicate a broader attack.

### False positive analysis

- Routine administrative tasks: Changes made by authorized personnel during regular maintenance or updates can trigger alerts. To manage this, users can create exceptions for specific user accounts or roles known to perform these tasks regularly.
- Automated scripts or tools: Security group modifications by automated processes or tools used for infrastructure management may be flagged. Users should identify these tools and exclude their actions from triggering alerts by specifying their associated IAM roles or user accounts.
- CloudFormation or other infrastructure as code deployments: Deployments that involve security group changes as part of infrastructure updates can result in false positives. Users can handle these by excluding changes initiated by specific CloudFormation stacks or deployment tools.
- Third-party integrations: Some third-party services may require security group modifications for functionality. Users should review and whitelist these services if they are deemed non-threatening, ensuring that their actions do not trigger unnecessary alerts.

### Response and remediation

- Immediately review the AWS CloudTrail logs to identify the source and nature of the security group changes, focusing on the user or service account responsible for the modifications.
- Contain the potential threat by reverting unauthorized security group changes to their previous state and temporarily restricting access to critical resources.
- Investigate the IAM roles and permissions associated with the user or service account that made the changes to ensure they are appropriate and not overly permissive.
- If unauthorized access is confirmed, rotate credentials and access keys for affected accounts and services to prevent further unauthorized actions.
- Escalate the incident to the security operations team for a deeper investigation into potential lateral movement or persistence mechanisms used by the threat actor.
- Implement enhanced logging and monitoring policies to capture detailed information on security group changes and other critical AWS activities.
- Integrate AWS GuardDuty and other threat detection services to provide real-time alerts on suspicious activities and potential security breaches.
- Restore the system to its operational state by ensuring all security group configurations are aligned with the organization's security policies and best practices.
- Conduct a post-incident review to identify gaps in the current security posture and update security policies and procedures accordingly.
- Apply hardening measures such as implementing least privilege access, enabling multi-factor authentication, and regularly reviewing security group rules to minimize the risk of future incidents.

### Investigating AWS EC2 Security Group Configuration Change

This rule identifies any changes to an AWS Security Group, which functions as a virtual firewall controlling inbound and outbound traffic for resources like EC2 instances. Modifications to a security group configuration could expose critical assets to unauthorized access. Threat actors may exploit such changes to establish persistence, exfiltrate data, or pivot within an AWS environment.

#### Possible Investigation Steps

1. **Identify the Modified Security Group**:
   - **Security Group ID**: Check the `aws.cloudtrail.flattened.request_parameters.groupId` field to identify the specific security group affected.
   - **Rule Changes**: Review `aws.cloudtrail.flattened.response_elements.securityGroupRuleSet` to determine the new rules or configurations, including any added or removed IP ranges, protocol changes, and port specifications.

2. **Review User Context**:
   - **User Identity**: Inspect the `aws.cloudtrail.user_identity.arn` field to determine which user or role made the modification. Verify if this is an authorized administrator or a potentially compromised account.
   - **Access Patterns**: Analyze whether this user regularly interacts with security group configurations or if this event is out of the ordinary for their account.

3. **Analyze the Configuration Change**:
   - **Egress vs. Ingress**: Determine if the change affected inbound (ingress) or outbound (egress) traffic by reviewing fields like `isEgress` in the `securityGroupRuleSet`. Unauthorized changes to outbound traffic can indicate data exfiltration attempts.
   - **IP Ranges and Ports**: Assess any added IP ranges, especially `0.0.0.0/0`, which exposes resources to the internet. Port changes should also be evaluated to ensure only necessary ports are open.

4. **Check User Agent and Source IP**:
   - **User Agent Analysis**: Examine the `user_agent.original` field to identify the tool or application used, such as `AWS Console` or `Terraform`, which may reveal if the action was automated or manual.
   - **Source IP and Geolocation**: Use `source.address` and `source.geo` fields to verify if the IP address and geolocation match expected locations for your organization. Unexpected IPs or regions may indicate unauthorized access.

5. **Evaluate for Persistence Indicators**:
   - **Repeated Changes**: Investigate if similar changes were recently made across multiple security groups, which may suggest an attempt to maintain or expand access.
   - **Permissions Review**: Confirm that the userâ€™s IAM policies are configured to limit changes to security groups only as necessary.

6. **Correlate with Other CloudTrail Events**:
   - **Cross-Reference Other Security Events**: Look for related actions like `AuthorizeSecurityGroupIngress`, `CreateSecurityGroup`, or `RevokeSecurityGroupIngress` that may indicate additional or preparatory steps for unauthorized access.
   - **Monitor for IAM or Network Changes**: Check for IAM modifications, network interface changes, or other configuration updates in the same timeframe to detect broader malicious activities.

### False Positive Analysis

- **Routine Security Changes**: Security group modifications may be part of regular infrastructure maintenance. Verify if this action aligns with known, scheduled administrative activities.
- **Automated Configuration Management**: If you are using automated tools like `Terraform` or `CloudFormation`, confirm if the change matches expected configuration drift corrections or deployments.

### Response and Remediation

- **Revert Unauthorized Changes**: If unauthorized, revert the security group configuration to its previous state to secure the environment.
- **Restrict Security Group Permissions**: Remove permissions to modify security groups from any compromised or unnecessary accounts to limit future access.
- **Quarantine Affected Resources**: If necessary, isolate any affected instances or resources to prevent further unauthorized activity.
- **Audit IAM and Security Group Policies**: Regularly review permissions related to security groups to ensure least privilege access and prevent excessive access.

### Additional Information

For more details on managing AWS Security Groups and best practices, refer to the [AWS EC2 Security Groups Documentation](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-security-groups.html) and AWS security best practices.
"""
references = ["https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-security-groups.html"]
risk_score = 21
rule_id = "29052c19-ff3e-42fd-8363-7be14d7c5469"
severity = "low"
tags = [
    "Domain: Cloud",
    "Data Source: AWS",
    "Data Source: Amazon Web Services",
    "Data Source: AWS EC2",
    "Use Case: Network Security Monitoring",
    "Resources: Investigation Guide",
    "Tactic: Persistence",
    "Tactic: Defense Evasion"
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.dataset: "aws.cloudtrail"
    and event.provider: "ec2.amazonaws.com"
    and event.action:(
            "AuthorizeSecurityGroupEgress" or
            "CreateSecurityGroup" or
            "ModifyInstanceAttribute" or
            "ModifySecurityGroupRules" or
            "RevokeSecurityGroupEgress" or
            "RevokeSecurityGroupIngress")
    and event.outcome: "success"
'''

[rule.investigation_fields]
field_names = [
   "@timestamp",
   "user.name",
   "aws.cloudtrail.user_identity.arn",
   "aws.cloudtrail.user_identity.type",
   "user_agent.original",
   "aws.cloudtrail.flattened.request_parameters.instanceId",
   "event.action",
   "event.outcome",
   "cloud.region",
   "event.provider",
   "aws.cloudtrail.request_parameters",
   "aws.cloudtrail.response_elements"
]


[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1562"
name = "Impair Defenses"
reference = "https://attack.mitre.org/techniques/T1562/"
[[rule.threat.technique.subtechnique]]
id = "T1562.007"
name = "Disable or Modify Cloud Firewall"
reference = "https://attack.mitre.org/techniques/T1562/007/"



[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

