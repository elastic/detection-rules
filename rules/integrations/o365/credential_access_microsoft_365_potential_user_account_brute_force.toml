[metadata]
creation_date = "2020/11/30"
integration = ["o365"]
maturity = "production"
updated_date = "2025/07/16"

[rule]
author = ["Elastic", "Willem D'Haese", "Austin Songer"]
description = """
Identifies brute-force authentication activity targeting Microsoft 365 user accounts using failed sign-in patterns that
match password spraying, credential stuffing, or password guessing behavior. Adversaries may attempt brute-force
authentication with credentials obtained from previous breaches, leaks, marketplaces or guessable passwords.
"""
false_positives = [
    """
    Automated processes that attempt to authenticate using expired credentials and unbounded retries may lead to false
    positives.
    """,
]
from = "now-60m"
interval = "10m"
language = "esql"
license = "Elastic License v2"
name = "Potential Microsoft 365 User Account Brute Force"
note = """## Triage and Analysis

### Investigating Potential Microsoft 365 User Account Brute Force

Identifies brute-force authentication activity targeting Microsoft 365 user accounts using failed sign-in patterns that match password spraying, credential stuffing, or password guessing behavior. Adversaries may attempt brute-force authentication with credentials obtained from previous breaches, leaks, marketplaces or guessable passwords.

### Possible investigation steps

- Review `user_id_list`: Enumerates the user accounts targeted. Look for naming patterns or privilege levels (e.g., admins).
- Check `login_errors`: A consistent error such as `"InvalidUserNameOrPassword"` confirms a spray-style attack using one or a few passwords.
- Examine `ip_list` and `source_orgs`: Determine if the traffic originates from a known corporate VPN, datacenter, or suspicious ASN like hosting providers or anonymizers.
- Review `countries` and `unique_country_count`: Geographic anomalies (e.g., login attempts from unexpected regions) may indicate malicious automation.
- Validate `total_attempts` vs `duration_seconds`: A high frequency of login attempts over a short period may suggest automation rather than manual logins.
- Cross-reference with successful logins: Pivot to surrounding sign-in logs (`azure.signinlogs`) or risk detections (`identityprotection`) for any account that eventually succeeded.
- Check for multi-factor challenges or bypasses: Determine if any of the accounts were protected or if the attack bypassed MFA.

### False positive analysis

- IT administrators using automation tools (e.g., PowerShell) during account provisioning may trigger false positives if login attempts cluster.
- Penetration testing or red team simulations may resemble spray activity.
- Infrequent, low-volume login testing tools like ADFS testing scripts can exhibit similar patterns.

### Response and remediation

- Initiate an internal incident ticket and inform the affected identity/IT team.
- Temporarily disable impacted user accounts if compromise is suspected.
- Investigate whether any login attempts succeeded after the spray window.
- Block the offending IPs or ASN temporarily via firewall or conditional access policies.
- Rotate passwords for all targeted accounts and audit for password reuse.
- Enforce or verify MFA is enabled for all user accounts.
- Consider deploying account lockout or progressive delay mechanisms if not already enabled.
"""
references = [
    "https://learn.microsoft.com/en-us/security/operations/incident-response-playbook-password-spray",
    "https://learn.microsoft.com/en-us/purview/audit-log-detailed-properties",
    "https://securityscorecard.com/research/massive-botnet-targets-m365-with-stealthy-password-spraying-attacks/",
    "https://github.com/0xZDH/Omnispray",
    "https://github.com/0xZDH/o365spray",
]
risk_score = 47
rule_id = "26f68dba-ce29-497b-8e13-b4fde1db5a2d"
severity = "medium"
tags = [
    "Domain: Cloud",
    "Domain: SaaS",
    "Data Source: Microsoft 365",
    "Data Source: Microsoft 365 Audit Logs",
    "Use Case: Identity and Access Audit",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Resources: Investigation Guide",
]
timestamp_override = "event.ingested"
type = "esql"

query = '''
FROM logs-o365.audit-*
| MV_EXPAND event.category
| EVAL
    esql.time_window.date_trunc = DATE_TRUNC(5 minutes, @timestamp),
    esql.o365.audit.UserId.lower = TO_LOWER(o365.audit.UserId),
    esql.o365.audit.LogonError = o365.audit.LogonError,
    esql.o365.audit.ExtendedProperties.RequestType.lower = TO_LOWER(o365.audit.ExtendedProperties.RequestType)
| WHERE
    event.dataset == "o365.audit" AND
    event.category == "authentication" AND
    event.provider IN ("AzureActiveDirectory", "Exchange") AND
    event.action IN ("UserLoginFailed", "PasswordLogonInitialAuthUsingPassword") AND
    esql.o365.audit.ExtendedProperties.RequestType.lower RLIKE "(oauth.*||.*login.*)" AND
    esql.o365.audit.LogonError != "IdsLocked" AND
    esql.o365.audit.LogonError NOT IN (
        "EntitlementGrantsNotFound",
        "UserStrongAuthEnrollmentRequired",
        "UserStrongAuthClientAuthNRequired",
        "InvalidReplyTo",
        "SsoArtifactExpiredDueToConditionalAccess",
        "PasswordResetRegistrationRequiredInterrupt",
        "SsoUserAccountNotFoundInResourceTenant",
        "UserStrongAuthExpired",
        "CmsiInterrupt"
    ) AND
    esql.o365.audit.UserId.lower != "not available" AND
    o365.audit.Target.Type IN ("0", "2", "6", "10")
| STATS
    esql.user.id.count_distinct = COUNT_DISTINCT(esql.o365.audit.UserId.lower),
    esql.o365.audit.UserId.lower.values = VALUES(esql.o365.audit.UserId.lower),
    esql.o365.audit.LogonError.values = VALUES(esql.o365.audit.LogonError),
    esql.o365.audit.LogonError.count_distinct = COUNT_DISTINCT(esql.o365.audit.LogonError),
    esql.o365.audit.ExtendedProperties.RequestType.values = VALUES(esql.o365.audit.ExtendedProperties.RequestType.lower),
    esql.source.ip.values = VALUES(source.ip),
    esql.source.ip.count_distinct = COUNT_DISTINCT(source.ip),
    esql.source.`as`.organization.name.values = VALUES(source.`as`.organization.name),
    esql.source.geo.country_name.values = VALUES(source.geo.country_name),
    esql.source.geo.country_name.count_distinct = COUNT_DISTINCT(source.geo.country_name),
    esql.source.`as`.organization.name.count_distinct = COUNT_DISTINCT(source.`as`.organization.name),
    esql.event.first_seen = MIN(@timestamp),
    esql.event.last_seen = MAX(@timestamp),
    esql.event.count = COUNT(*)
  BY esql.time_window.date_trunc
| EVAL
    esql.event.duration.seconds = DATE_DIFF("seconds", esql.event.first_seen, esql.event.last_seen),
    esql.brute_force.type = CASE(
        esql.user.id.count_distinct >= 15 AND esql.o365.audit.LogonError.count_distinct == 1 AND esql.event.count >= 10 AND esql.event.duration.seconds <= 1800, "password_spraying",
        esql.user.id.count_distinct >= 8 AND esql.event.count >= 15 AND esql.o365.audit.LogonError.count_distinct <= 3 AND esql.source.ip.count_distinct <= 5 AND esql.event.duration.seconds <= 600, "credential_stuffing",
        esql.user.id.count_distinct == 1 AND esql.o365.audit.LogonError.count_distinct == 1 AND esql.event.count >= 20 AND esql.event.duration.seconds <= 300, "password_guessing",
        "other"
    )
| KEEP
    esql.time_window.date_trunc,
    esql.user.id.count_distinct,
    esql.o365.audit.UserId.lower.values,
    esql.o365.audit.LogonError.values,
    esql.o365.audit.LogonError.count_distinct,
    esql.o365.audit.ExtendedProperties.RequestType.values,
    esql.source.ip.values,
    esql.source.ip.count_distinct,
    esql.source.`as`.organization.name.values,
    esql.source.geo.country_name.values,
    esql.source.geo.country_name.count_distinct,
    esql.source.`as`.organization.name.count_distinct,
    esql.event.first_seen,
    esql.event.last_seen,
    esql.event.duration.seconds,
    esql.event.count,
    esql.brute_force.type
| WHERE esql.brute_force.type != "other"
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1110"
name = "Brute Force"
reference = "https://attack.mitre.org/techniques/T1110/"
[[rule.threat.technique.subtechnique]]
id = "T1110.001"
name = "Password Guessing"
reference = "https://attack.mitre.org/techniques/T1110/001/"

[[rule.threat.technique.subtechnique]]
id = "T1110.003"
name = "Password Spraying"
reference = "https://attack.mitre.org/techniques/T1110/003/"

[[rule.threat.technique.subtechnique]]
id = "T1110.004"
name = "Credential Stuffing"
reference = "https://attack.mitre.org/techniques/T1110/004/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

