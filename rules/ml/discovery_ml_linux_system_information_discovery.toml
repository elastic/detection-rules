[metadata]
creation_date = "2020/09/03"
integration = ["auditd_manager", "endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
anomaly_threshold = 75
author = ["Elastic"]
description = """
Looks for commands related to system information discovery from an unusual user context. This can be due to uncommon
troubleshooting activity or due to a compromised account. A compromised account may be used to engage in system
information discovery in order to gather detailed information about system configuration and software versions. This may
be a precursor to selection of a persistence mechanism or a method of privilege elevation.
"""
false_positives = [
    """
    Uncommon user command activity can be due to an engineer logging onto a server instance in order to perform manual
    troubleshooting or reconfiguration.
    """,
]
from = "now-45m"
interval = "15m"
license = "Elastic License v2"
machine_learning_job_id = ["v3_linux_system_information_discovery"]
name = "Unusual Linux System Information Discovery Activity"
setup = """## Setup

This rule requires the installation of associated Machine Learning jobs, as well as data coming in from one of the following integrations:
- Elastic Defend
- Auditd Manager

### Anomaly Detection Setup

Once the rule is enabled, the associated Machine Learning job will start automatically. You can view the Machine Learning job linked under the "Definition" panel of the detection rule. If the job does not start due to an error, the issue must be resolved for the job to commence successfully. For more details on setting up anomaly detection jobs, refer to the [helper guide](https://www.elastic.co/guide/en/kibana/current/xpack-ml-anomalies.html).

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration to your system:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).

### Auditd Manager Integration Setup
The Auditd Manager Integration receives audit events from the Linux Audit Framework which is a part of the Linux kernel.
Auditd Manager provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system.

#### The following steps should be executed in order to add the Elastic Agent System integration "auditd_manager" to your system:
- Go to the Kibana home page and click “Add integrations”.
- In the query bar, search for “Auditd Manager” and select the integration to see more details about it.
- Click “Add Auditd Manager”.
- Configure the integration name and optionally add a description.
- Review optional and advanced settings accordingly.
- Add the newly installed “auditd manager” to an existing or a new agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
- Click “Save and Continue”.
- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/auditd_manager).

#### Rule Specific Setup Note
Auditd Manager subscribes to the kernel and receives events as they occur without any additional configuration.
However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.
- For this detection rule no additional audit rules are required.
"""
risk_score = 21
rule_id = "d4af3a06-1e0a-48ec-b96a-faf2309fae46"
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Rule Type: ML",
    "Rule Type: Machine Learning",
    "Tactic: Discovery",
]
type = "machine_learning"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Unusual Linux System Information Discovery Activity

Linux systems often use commands like `uname`, `lscpu`, or `lsb_release` for legitimate system information discovery, aiding in troubleshooting and system management. However, adversaries can exploit these commands to gather critical system details, potentially leading to privilege escalation or persistence. The detection rule identifies atypical usage patterns by monitoring command execution from unexpected user contexts, signaling possible account compromise or malicious intent.

### Possible investigation steps

- Review the alert details to identify the specific command executed, the user account involved, and the timestamp of the activity.
- Check the user account's login history and recent activity using `last` and `lastlog` commands to determine if the account has been accessed from unusual locations or at odd times.
- Examine the user's shell history files (e.g., `.bash_history`) to identify any other suspicious commands executed around the same time.
- Use Osquery to gather additional context about the system and user activity. For example, run the following query to list recent commands executed by the user: `SELECT * FROM shell_history WHERE uid = (SELECT uid FROM users WHERE username = 'suspicious_user');`
- Investigate the parent process of the suspicious command execution to determine if it was initiated by a legitimate process or a potentially malicious one.
- Analyze system logs, such as `/var/log/auth.log` or `/var/log/secure`, for any authentication anomalies or failed login attempts around the time of the alert.
- Check for any recent changes to user permissions or group memberships that could indicate privilege escalation attempts.
- Review network activity logs to identify any unusual outbound connections or data exfiltration attempts following the suspicious command execution.
- Correlate the alert with other security events or alerts in the environment to identify potential patterns or related incidents.
- Consult threat intelligence sources to determine if the observed activity matches known tactics, techniques, and procedures (TTPs) associated with specific threat actors or malware.

### False positive analysis

- System administrators or IT personnel may execute system information discovery commands during routine maintenance or troubleshooting, which could trigger the rule. To manage this, users can create exceptions for specific user accounts or roles known to perform these tasks regularly.
- Automated scripts or monitoring tools that run system information commands as part of their normal operation might also be flagged. Users should identify these scripts and whitelist them by their execution paths or associated service accounts to prevent false positives.
- Developers or engineers working on performance testing or system optimization might use these commands in non-production environments. Users can exclude specific environments or IP ranges from monitoring to reduce unnecessary alerts.
- In educational or research institutions, students or researchers might execute these commands as part of their learning or experimentation processes. Users can implement exceptions for specific user groups or departments to accommodate these activities without compromising security.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to determine the scope of the compromise, focusing on identifying the user account involved and any other systems that may have been accessed.
- Review system logs and command history to identify unusual patterns or unauthorized commands executed, correlating with MITRE ATT&CK technique T1082 for system information discovery.
- Reset passwords for the compromised account and any other accounts that may have been accessed, ensuring the use of strong, unique passwords.
- Remove any unauthorized users or processes identified during the investigation and ensure that all system software is up to date with the latest security patches.
- Restore the system from a known good backup if necessary, ensuring that the backup is free from any malicious modifications.
- Implement enhanced logging and monitoring policies to capture detailed command execution and user activity, integrating with SIEM solutions for real-time alerting.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures accordingly.
- Provide security awareness training to users, emphasizing the importance of recognizing and reporting suspicious activity.
- Consider deploying additional security measures such as multi-factor authentication and endpoint detection and response (EDR) solutions to enhance system hardening and threat detection capabilities."""
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1082"
name = "System Information Discovery"
reference = "https://attack.mitre.org/techniques/T1082/"


[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

