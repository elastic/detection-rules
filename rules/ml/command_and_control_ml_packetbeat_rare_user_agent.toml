[metadata]
creation_date = "2020/03/25"
integration = ["endpoint", "network_traffic"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
anomaly_threshold = 50
author = ["Elastic"]
description = """
A machine learning job detected a rare and unusual user agent indicating web browsing activity by an unusual process
other than a web browser. This can be due to persistence, command-and-control, or exfiltration activity. Uncommon user
agents coming from remote sources to local destinations are often the result of scanners, bots, and web scrapers, which
are part of common Internet background traffic. Much of this is noise, but more targeted attacks on websites using tools
like Burp or SQLmap can sometimes be discovered by spotting uncommon user agents. Uncommon user agents in traffic from
local sources to remote destinations can be any number of things, including harmless programs like weather monitoring or
stock-trading programs. However, uncommon user agents from local sources can also be due to malware or scanning
activity.
"""
false_positives = [
    """
    Web activity that is uncommon, like security scans, may trigger this alert and may need to be excluded. A new or
    rarely used program that calls web services may trigger this alert.
    """,
]
from = "now-45m"
interval = "15m"
license = "Elastic License v2"
machine_learning_job_id = "packetbeat_rare_user_agent"
name = "Unusual Web User Agent"
setup = """## Setup

This rule requires the installation of associated Machine Learning jobs, as well as data coming in from one of the following integrations:
- Elastic Defend
- Network Packet Capture

### Anomaly Detection Setup

Once the rule is enabled, the associated Machine Learning job will start automatically. You can view the Machine Learning job linked under the "Definition" panel of the detection rule. If the job does not start due to an error, the issue must be resolved for the job to commence successfully. For more details on setting up anomaly detection jobs, refer to the [helper guide](https://www.elastic.co/guide/en/kibana/current/xpack-ml-anomalies.html).

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration to your system:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).

### Network Packet Capture Integration Setup
The Network Packet Capture integration sniffs network packets on a host and dissects known protocols. Monitoring the network traffic is critical to gaining observability and securing your environment — ensuring high levels of performance and security. The Network Packet Capture integration captures the network traffic between your application servers, decodes common application layer protocols and records the interesting fields for each transaction.

#### The following steps should be executed in order to add the Elastic Agent System integration "network_traffic" to your system:
- Go to the Kibana home page and click “Add integrations”.
- In the query bar, search for “Network Packet Capture” and select the integration to see more details about it.
- Click “Add Network Packet Capture”.
- Configure the integration name and optionally add a description.
- Review optional and advanced settings accordingly.
- Add the newly installed “network_traffic” to an existing or a new agent policy, and deploy the agent on your system from which network log files are desirable.
- Click “Save and Continue”.
- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/network_traffic).
"""
references = ["https://www.elastic.co/guide/en/security/current/prebuilt-ml-jobs.html"]
risk_score = 21
rule_id = "91f02f01-969f-4167-8d77-07827ac4cee0"
severity = "low"
tags = [
    "Use Case: Threat Detection",
    "Rule Type: ML",
    "Rule Type: Machine Learning",
    "Tactic: Command and Control",
]
type = "machine_learning"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Unusual Web User Agent
User agents identify applications making web requests, typically browsers. However, adversaries may exploit this by using non-standard user agents for malicious activities like persistence or data exfiltration. The 'Unusual Web User Agent' detection rule leverages machine learning to identify rare user agents, flagging potential threats from unexpected processes, thus aiding in uncovering malicious web activities.

### Possible investigation steps

- Review the alert details to identify the specific unusual user agent string and the process associated with it.
- Check the source and destination IP addresses involved in the alert to determine if the traffic is internal or external.
- Investigate the process that generated the unusual user agent by examining process creation logs and command-line arguments.
- Use Osquery to gather more information about the process. Example query: `SELECT name, path, cmdline, pid FROM processes WHERE name = '<process_name>';`
- Analyze network traffic logs to identify any patterns or anomalies associated with the unusual user agent, such as repeated access to specific domains or IPs.
- Cross-reference the unusual user agent with known malicious user agents or those associated with legitimate applications to assess potential threats.
- Check for any recent changes or updates on the system that might have introduced new software or scripts using the unusual user agent.
- Investigate any related alerts or logs that might provide additional context, such as failed login attempts or other suspicious activities around the same time.
- Consult threat intelligence sources to determine if the unusual user agent has been reported in recent attacks or campaigns.
- Document findings and gather evidence to support further analysis or escalation if the unusual user agent is deemed suspicious or malicious.

### False positive analysis

- Uncommon user agents from legitimate applications such as weather monitoring or stock-trading programs can trigger false positives. Users should identify these applications and create exceptions to prevent unnecessary alerts.
- Automated tools like web scrapers, bots, or scanners that are part of regular internet traffic may be flagged. Regularly review and whitelist known benign sources to reduce noise.
- Internal network monitoring tools or scripts that use custom user agents for legitimate purposes might be detected. Ensure these are documented and excluded from the detection rule.
- Software updates or patches that temporarily use unusual user agents can cause alerts. Monitor update schedules and adjust detection parameters accordingly.
- Development or testing environments where custom user agents are used for simulation purposes may trigger false positives. Implement environment-specific exceptions to manage these alerts.

### Response and remediation

- Isolate the affected system from the network to prevent further data exfiltration or command-and-control communication.
- Conduct a thorough investigation to identify the process using the unusual user agent and determine if it is malicious or benign.
- Review system and network logs to trace the origin and scope of the activity, focusing on any connections to known malicious IP addresses or domains.
- If malware is detected, remove it using updated antivirus or anti-malware tools and ensure the system is clean.
- Escalate the incident to the security operations center (SOC) or incident response team if the activity is confirmed as malicious or if it involves sensitive data.
- Implement enhanced logging policies to capture detailed user agent strings and associated process information for future analysis.
- Integrate threat intelligence feeds to correlate unusual user agents with known threat actor tools and techniques.
- Restore the system to its operational state by applying necessary patches, updates, and verifying system integrity.
- Conduct a post-incident review to identify gaps in detection and response, and update security policies and procedures accordingly.
- Harden the system by disabling unnecessary services, applying least privilege principles, and ensuring all software is up to date."""
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1071"
name = "Application Layer Protocol"
reference = "https://attack.mitre.org/techniques/T1071/"
[[rule.threat.technique.subtechnique]]
id = "T1071.001"
name = "Web Protocols"
reference = "https://attack.mitre.org/techniques/T1071/001/"



[rule.threat.tactic]
id = "TA0011"
name = "Command and Control"
reference = "https://attack.mitre.org/tactics/TA0011/"

