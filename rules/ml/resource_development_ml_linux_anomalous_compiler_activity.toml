[metadata]
creation_date = "2020/09/03"
integration = ["auditd_manager", "endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
anomaly_threshold = 50
author = ["Elastic"]
description = """
Looks for compiler activity by a user context which does not normally run compilers. This can be the result of ad-hoc
software changes or unauthorized software deployment. This can also be due to local privilege elevation via locally run
exploits or malware activity.
"""
false_positives = [
    """
    Uncommon compiler activity can be due to an engineer running a local build on a production or staging instance in
    the course of troubleshooting or fixing a software issue.
    """,
]
from = "now-45m"
interval = "15m"
license = "Elastic License v2"
machine_learning_job_id = ["v3_linux_rare_user_compiler"]
name = "Anomalous Linux Compiler Activity"
setup = """## Setup

This rule requires the installation of associated Machine Learning jobs, as well as data coming in from one of the following integrations:
- Elastic Defend
- Auditd Manager

### Anomaly Detection Setup

Once the rule is enabled, the associated Machine Learning job will start automatically. You can view the Machine Learning job linked under the "Definition" panel of the detection rule. If the job does not start due to an error, the issue must be resolved for the job to commence successfully. For more details on setting up anomaly detection jobs, refer to the [helper guide](https://www.elastic.co/guide/en/kibana/current/xpack-ml-anomalies.html).

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration to your system:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).

### Auditd Manager Integration Setup
The Auditd Manager Integration receives audit events from the Linux Audit Framework which is a part of the Linux kernel.
Auditd Manager provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system.

#### The following steps should be executed in order to add the Elastic Agent System integration "auditd_manager" to your system:
- Go to the Kibana home page and click “Add integrations”.
- In the query bar, search for “Auditd Manager” and select the integration to see more details about it.
- Click “Add Auditd Manager”.
- Configure the integration name and optionally add a description.
- Review optional and advanced settings accordingly.
- Add the newly installed “auditd manager” to an existing or a new agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
- Click “Save and Continue”.
- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/auditd_manager).

#### Rule Specific Setup Note
Auditd Manager subscribes to the kernel and receives events as they occur without any additional configuration.
However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.
- For this detection rule no additional audit rules are required.
"""
risk_score = 21
rule_id = "cd66a419-9b3f-4f57-8ff8-ac4cd2d5f530"
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Rule Type: ML",
    "Rule Type: Machine Learning",
    "Tactic: Resource Development",
]
type = "machine_learning"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Anomalous Linux Compiler Activity

Compilers transform source code into executable programs, a routine task in development environments. However, in atypical user contexts, such activity may signal unauthorized software changes or privilege escalation attempts. Adversaries exploit compilers to deploy malware or execute exploits. The detection rule identifies unusual compiler usage patterns, flagging potential threats by monitoring deviations from normal user behavior.

### Possible investigation steps

- Review the alert details to identify the specific user and host involved in the anomalous compiler activity.
- Check the historical activity of the user to determine if compiler usage is indeed unusual for this user context.
- Analyze the specific compiler command executed, including any flags or options, to understand the nature of the compilation.
- Investigate the source code or files being compiled to assess if they are legitimate or potentially malicious.
- Use Osquery to gather additional context on the host. For example, run the following query to list recent processes executed by the user: `SELECT pid, name, path, cmdline, start_time FROM processes WHERE user = '<username>';`
- Examine the file system for any newly created or modified executable files that may have resulted from the compilation.
- Check for any recent privilege escalation attempts or suspicious activities in system logs that coincide with the compiler activity.
- Correlate the event with other security alerts or logs to identify if this activity is part of a broader attack pattern.
- Verify the integrity and origin of the compiler binary used to ensure it has not been tampered with or replaced.
- Consult threat intelligence sources to determine if the observed activity matches known tactics, techniques, or procedures (TTPs) associated with adversaries.

### False positive analysis

- Development environments or users who occasionally compile software for legitimate purposes may trigger false positives. To manage this, users can create exceptions for specific user accounts or directories known for regular development activities.
- Automated build systems or continuous integration pipelines that compile code as part of their routine operations might be flagged. Exclude these systems by identifying their unique user accounts or IP addresses and adding them to an allowlist.
- System updates or package installations that involve compiling components can also be mistaken for anomalous activity. Users should monitor and document regular update schedules and exclude these activities during known maintenance windows.
- Educational or research environments where users compile code for learning or experimentation may generate alerts. Implement user-specific exceptions based on the context of their activities and the educational tools they use.
- Temporary projects or one-time tasks that require compilation might be misinterpreted as threats. Users can temporarily disable the rule or add time-bound exceptions for these specific tasks to prevent unnecessary alerts.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or spread of potential malware.
- Conduct a thorough investigation to identify the source and scope of the anomalous compiler activity, reviewing logs and user activity to determine if it aligns with known threat patterns such as those described in MITRE ATT&CK T1588.
- Verify the integrity of critical system files and executables to ensure they have not been altered or replaced by malicious versions.
- Remove any unauthorized software or malware identified during the investigation, using trusted antivirus or anti-malware tools.
- Reset credentials and review user permissions to ensure no unauthorized privilege escalations have occurred.
- Escalate the incident to the security operations center (SOC) or incident response team if the activity is linked to a broader attack campaign or if sensitive data may have been compromised.
- Implement enhanced logging policies to capture detailed information on compiler usage and other potentially suspicious activities for future investigations.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to improve detection and response capabilities against similar threats.
- Restore the system to its operational state by applying verified backups and patches, ensuring all security updates are current.
- Conduct a post-incident review to identify gaps in security controls and implement hardening measures, such as application whitelisting and stricter access controls, to prevent recurrence."""
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1588"
name = "Obtain Capabilities"
reference = "https://attack.mitre.org/techniques/T1588/"
[[rule.threat.technique.subtechnique]]
id = "T1588.001"
name = "Malware"
reference = "https://attack.mitre.org/techniques/T1588/001/"



[rule.threat.tactic]
id = "TA0042"
name = "Resource Development"
reference = "https://attack.mitre.org/tactics/TA0042/"

