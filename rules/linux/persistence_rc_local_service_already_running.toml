[metadata]
creation_date = "2024/06/21"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects the potential execution of the `/etc/rc.local` script through the `already_running` event action
created by the `rc-local.service` systemd service. The `/etc/rc.local` script is a legacy initialization script that is
executed at the end of the boot process. The `/etc/rc.local` script is not enabled by default on most Linux
distributions. The `/etc/rc.local` script can be used by attackers to persistently execute malicious commands or scripts
on a compromised system at reboot. As the rc.local file is executed prior to the initialization of Elastic Defend, the
execution event is not ingested, and therefore the `already_running` event is leveraged to provide insight into the
potential execution of `rc.local`.
"""
from = "now-9m"
index = ["logs-endpoint.events.process*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Execution of rc.local Script"
references = [
    "https://www.intezer.com/blog/malware-analysis/hiddenwasp-malware-targeting-linux-systems/",
    "https://pberba.github.io/security/2022/02/06/linux-threat-hunting-for-persistence-initialization-scripts-and-shell-configuration/#8-boot-or-logon-initialization-scripts-rc-scripts",
    "https://www.cyberciti.biz/faq/how-to-enable-rc-local-shell-script-on-systemd-while-booting-linux-system/",
    "https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms",
]
risk_score = 47
rule_id = "7318affb-bfe8-4d50-a425-f617833be160"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "info" and event.action == "already_running" and 
process.parent.args == "/etc/rc.local" and process.parent.args == "start"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Execution of rc.local Script

The `/etc/rc.local` script is a legacy Linux initialization script executed at the end of the boot process. While not enabled by default, attackers can exploit it to run malicious commands persistently at startup. The detection rule identifies potential misuse by monitoring for the `already_running` event action linked to `rc-local.service`, indicating the script's execution, thus alerting to possible unauthorized activities.

### Possible investigation steps

- Review the alert details to confirm the presence of the `already_running` event action associated with the `rc-local.service` systemd service, indicating potential execution of the `/etc/rc.local` script.
- Verify the system's configuration to determine if the `/etc/rc.local` script is enabled and check for any recent modifications to the file by examining its last modified timestamp.
- Use Osquery to list the contents of the `/etc/rc.local` file to identify any suspicious or unauthorized commands or scripts. Example query: `SELECT * FROM file WHERE path = '/etc/rc.local';`
- Investigate the parent process details captured in the alert, specifically focusing on `process.parent.args` to understand the context in which the `/etc/rc.local` script was executed.
- Check system logs, such as `/var/log/syslog` or `/var/log/messages`, for any entries around the time of the alert that might provide additional context or indicate other suspicious activities.
- Examine the system's boot logs, such as `journalctl -b`, to identify any anomalies or errors during the boot process that could be related to the execution of the `/etc/rc.local` script.
- Investigate user accounts and permissions to determine if unauthorized users have access to modify or execute the `/etc/rc.local` script.
- Review recent changes to system services and startup scripts to identify any unauthorized modifications that could indicate persistence mechanisms.
- Use Osquery to check for other persistence mechanisms on the system, such as cron jobs or other startup scripts, that might be used in conjunction with the `/etc/rc.local` script. Example query: `SELECT * FROM crontab;`
- Correlate the alert with other security events or alerts from the same host to identify patterns or additional indicators of compromise that might suggest a broader attack campaign.

### False positive analysis

- The execution of legitimate administrative scripts or maintenance tasks via `/etc/rc.local` can trigger false positives. System administrators may use this script for benign purposes, such as configuring network settings or starting essential services at boot.
- Some Linux distributions or custom configurations might still rely on `/etc/rc.local` for legitimate startup processes, leading to alerts that are not indicative of malicious activity.
- To manage these false positives, users can create exceptions for known and verified scripts or commands within `/etc/rc.local` by specifying them in the detection rule's exclusion list.
- Regularly review and update the exclusion list to ensure that only trusted and necessary scripts are allowed, minimizing the risk of overlooking potential threats.
- Consider implementing additional monitoring or logging for `/etc/rc.local` modifications to quickly identify unauthorized changes that could indicate malicious intent.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or execution of malicious scripts.
- Conduct a thorough investigation to identify any unauthorized changes to the `/etc/rc.local` script and review the script's contents for malicious commands.
- Check system logs and use forensic tools to trace the origin of the unauthorized changes and identify any other compromised systems.
- Remove any malicious entries from the `/etc/rc.local` script and restore it to its default state if necessary.
- Apply patches and updates to the operating system and installed software to mitigate known vulnerabilities that could have been exploited.
- Implement strict access controls and permissions for critical system files, including `/etc/rc.local`, to prevent unauthorized modifications.
- Enhance logging and monitoring by enabling detailed audit logs for system changes and integrating with a centralized logging solution for real-time alerts.
- Consider deploying additional security tools, such as host-based intrusion detection systems (HIDS), to detect and prevent similar threats in the future.
- Escalate the incident to the security team or relevant authorities if the investigation reveals a broader compromise or if sensitive data has been accessed.
- Educate users and administrators on security best practices and the importance of monitoring for unusual system behavior to prevent future incidents."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1037"
name = "Boot or Logon Initialization Scripts"
reference = "https://attack.mitre.org/techniques/T1037/"
[[rule.threat.technique.subtechnique]]
id = "T1037.004"
name = "RC Scripts"
reference = "https://attack.mitre.org/techniques/T1037/004/"



[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

