[metadata]
creation_date = "2024/06/25"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Detects file creation events in the plugin directories for the Yum package manager. In Linux, DNF (Dandified YUM) is a
command-line utility used for handling packages on Fedora-based systems, providing functions for installing, updating,
upgrading, and removing software along with managing package repositories. Attackers can backdoor DNF to gain
persistence by injecting malicious code into plugins that DNF runs, thereby ensuring continued unauthorized access or
control each time DNF is used for package management.
"""
from = "now-9m"
index = ["logs-endpoint.events.file*"]
language = "eql"
license = "Elastic License v2"
name = "DNF Package Manager Plugin File Creation"
references = [
    "https://pwnshift.github.io/2020/10/01/persistence.html",
    "https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms",
]
risk_score = 21
rule_id = "3fe4e20c-a600-4a86-9d98-3ecb1ef23550"
setup = """## Setup
This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.

For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.

For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "linux" and event.action in ("rename", "creation") and
file.path : ("/usr/lib/python*/site-packages/dnf-plugins/*", "/etc/dnf/plugins/*") and not (
  process.executable in (
    "/bin/dockerd", "/usr/bin/dockerd", "/usr/sbin/dockerd", "/bin/microdnf", "/usr/bin/microdnf", "/bin/rpm",
    "/usr/bin/rpm", "/bin/snapd", "/usr/bin/snapd", "/bin/yum", "/usr/bin/yum", "/bin/dnf", "/usr/bin/dnf",
    "/bin/podman", "/usr/bin/podman", "/bin/dnf-automatic", "/usr/bin/dnf-automatic", "/sbin/apk", "/usr/sbin/apk",
    "/usr/local/sbin/apk", "/bin/podman", "/usr/bin/podman", "/usr/bin/puppet", "/bin/puppet",
    "/opt/puppetlabs/puppet/bin/puppet", "/usr/bin/chef-client", "/bin/chef-client", "/bin/autossl_check",
    "/usr/bin/autossl_check", "/proc/self/exe", "/dev/fd/*", "/usr/lib/snapd/snapd", "/usr/local/bin/dockerd",
    "/usr/libexec/netplan/generate"
  ) or
  file.extension in ("swp", "swpx", "swx") or
  process.executable : (
    "/nix/store/*", "/var/lib/dpkg/*", "/tmp/vmis.*", "/snap/*", "/dev/fd/*", "/usr/lib/*", "/usr/libexec/*",
    "/etc/kernel/*"
  ) or
  process.executable == null or
  (process.name == "sed" and file.name : "sed*") or
  (process.name == "perl" and file.name : "e2scrub_all.tmp*") 
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating DNF Package Manager Plugin File Creation

DNF, a package manager for Fedora-based systems, manages software installations and updates. Adversaries may exploit DNF by inserting malicious code into its plugins, ensuring persistent access whenever DNF is used. The detection rule identifies suspicious file creation or renaming in plugin directories, excluding benign processes and temporary files, to flag potential backdoor attempts.

### Possible investigation steps

- Review the alert details to identify the specific file path and event action (creation or rename) that triggered the alert. Focus on paths like `/usr/lib/python*/site-packages/dnf-plugins/*` and `/etc/dnf/plugins/*`.
- Check the process executable that initiated the file creation or rename event. Ensure it is not one of the benign processes listed in the exclusion criteria, such as `/bin/dnf` or `/usr/bin/yum`.
- Investigate the file extension of the newly created or renamed file to ensure it is not a temporary file with extensions like `swp`, `swpx`, or `swx`.
- Use Osquery to gather more information about the file. For example, run the query: `SELECT * FROM file WHERE path = '/usr/lib/python*/site-packages/dnf-plugins/*' OR path = '/etc/dnf/plugins/*';` to get details about the file's metadata and attributes.
- Examine the file's contents to identify any suspicious or unauthorized code that may have been injected. Look for unusual scripts or commands that do not align with typical plugin functionality.
- Cross-reference the file creation or rename event with recent system logs to identify any correlated activities or anomalies around the time of the event.
- Verify the integrity of the DNF package manager and its plugins by comparing the current state with known good baselines or checksums, if available.
- Investigate the user account associated with the process that created or renamed the file to determine if it has the necessary permissions and if the activity aligns with expected behavior.
- Check for any recent changes in user privileges or group memberships that could have facilitated unauthorized access to the plugin directories.
- Review historical data to identify any previous similar alerts or patterns that could indicate a persistent threat or ongoing attack campaign targeting the DNF package manager.

### False positive analysis

- Routine system updates or administrative tasks may trigger file creation or renaming events in the DNF plugin directories, especially when legitimate software updates or configurations are applied. Users should verify if these events coincide with scheduled maintenance or updates.
- Automated scripts or configuration management tools like Puppet or Chef might create or modify files in these directories as part of their normal operations. Users can exclude these processes by adding them to the exception list if they are verified as non-malicious.
- Temporary files created by text editors or system processes, such as those with extensions like "swp", "swpx", or "swx", can be mistakenly flagged. Users should ensure these extensions are included in the exclusion criteria to prevent false alerts.
- Processes running from specific directories like "/nix/store/*" or "/var/lib/dpkg/*" may be part of legitimate package management activities. Users can add these paths to the exclusion list if they are confirmed to be safe.
- If the process executable is null, it might indicate a transient or incomplete event capture. Users should investigate these cases further to determine if they are benign or require additional context for exclusion.
- Specific processes like "sed" or "perl" might create temporary files during their operations. Users can exclude these processes when they match known benign patterns, such as "sed*" or "e2scrub_all.tmp*", to reduce false positives.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify any malicious code within the DNF plugin directories and determine the extent of the compromise.
- Review recent file creation and modification events in the DNF plugin directories to identify unauthorized changes and potential backdoor installations.
- Remove any identified malicious files or code from the DNF plugin directories and restore legitimate files from a known good backup.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging for DNF-related activities and file system changes to improve detection of future unauthorized modifications.
- Integrate security tools with threat intelligence feeds to identify known malicious indicators related to DNF plugin tampering.
- Apply security patches and updates to the DNF package manager and related software to mitigate known vulnerabilities.
- Conduct a post-incident review to identify gaps in security controls and update policies and procedures to prevent similar incidents.
- Educate system administrators and users on recognizing signs of compromise and the importance of maintaining secure configurations."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique]]
id = "T1546"
name = "Event Triggered Execution"
reference = "https://attack.mitre.org/techniques/T1546/"
[[rule.threat.technique.subtechnique]]
id = "T1546.016"
name = "Installer Packages"
reference = "https://attack.mitre.org/techniques/T1546/016/"


[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

