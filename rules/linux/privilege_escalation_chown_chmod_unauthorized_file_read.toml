[metadata]
creation_date = "2023/07/28"
integration = ["endpoint", "auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for the execution of the "chown" and "chmod" commands with command line flags that could indicate a
wildcard injection attack. Linux wildcard injection is a type of security vulnerability where attackers manipulate
commands or input containing wildcards (e.g., *, ?, []) to execute unintended operations or access sensitive data by
tricking the system into interpreting the wildcard characters in unexpected ways.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*", "auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Unauthorized Access via Wildcard Injection Detected"
references = ["https://www.exploit-db.com/papers/33930"]
risk_score = 21
rule_id = "4a99ac6f-9a54-4ba5-a64f-6eb65695841b"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Tactic: Credential Access",
    "Data Source: Elastic Endgame",
    "Data Source: Elastic Defend",
    "Data Source: Auditd Manager",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action in ("exec", "exec_event", "executed", "process_started")
 and process.name in ("chown", "chmod") and process.args == "-R" and process.args : "--reference=*"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Unauthorized Access via Wildcard Injection Detected

In Linux environments, commands like `chown` and `chmod` are used to change file ownership and permissions. Adversaries may exploit wildcard characters in these commands to escalate privileges or access sensitive data by executing unintended operations. The detection rule identifies suspicious use of these commands with recursive flags and wildcard references, signaling potential misuse for privilege escalation.

### Possible investigation steps

- Review the alert details to confirm the presence of the `chown` or `chmod` command execution with the `-R` flag and wildcard references in the `process.args` field.
- Examine the `process.name` field to verify which command (`chown` or `chmod`) was executed and assess the potential impact based on the command's function.
- Check the `host.os.type` field to ensure the alert is relevant to a Linux environment, as the rule is designed for Linux systems.
- Investigate the `event.type` and `event.action` fields to confirm the process was indeed started and executed, indicating the command was run.
- Analyze the `process.args` field further to identify any specific patterns or anomalies in the arguments that could suggest malicious intent or misuse.
- Use Osquery to gather additional context about the process by running a query such as: `SELECT * FROM processes WHERE name IN ('chown', 'chmod') AND cmdline LIKE '%-R%' AND cmdline LIKE '%--reference=%';` to identify other instances of similar command executions.
- Review system logs and audit logs for any additional context around the time of the alert to identify any preceding or subsequent suspicious activities.
- Investigate the user account associated with the process execution to determine if the account has a history of suspicious activity or if it has been compromised.
- Check for any recent changes in file ownership or permissions on critical files or directories that could indicate successful exploitation.
- Correlate the alert with other security events or alerts in the environment to identify potential patterns or coordinated attacks.

### False positive analysis

- Routine administrative tasks: System administrators often use `chown` and `chmod` with recursive flags and wildcards for legitimate purposes, such as updating permissions across multiple files or directories. These actions can trigger the rule, leading to false positives.
- Automated scripts: Scheduled scripts or cron jobs that perform regular maintenance tasks using these commands might also be flagged. These scripts are typically non-threatening if verified as part of standard operations.
- Software installations or updates: Some software packages or updates may use these commands with wildcards during installation or configuration processes, which can be mistakenly identified as suspicious activity.
- To manage false positives, users can create exceptions for known safe operations by whitelisting specific scripts, users, or directories that frequently trigger the rule. This can be done by adjusting the detection rule to exclude certain command patterns or by using a monitoring tool's built-in exception handling features.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify the source and scope of the wildcard injection attack, reviewing logs and process execution details.
- Terminate any suspicious processes that are running with elevated privileges or accessing sensitive data.
- Review and update user permissions and access controls to ensure the principle of least privilege is enforced, reducing the risk of privilege escalation.
- Apply patches and updates to the operating system and any vulnerable applications to mitigate known exploits, including those related to wildcard injection.
- Implement enhanced logging policies to capture detailed command execution and process activity, aiding in future investigations.
- Integrate security tools such as intrusion detection systems (IDS) and endpoint detection and response (EDR) solutions to monitor for similar threats.
- Restore the system to its operational state by verifying the integrity of critical files and configurations, and re-establishing network connectivity once secure.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Educate users and administrators on the risks of wildcard injection and best practices for secure command execution to prevent future incidents."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1068"
name = "Exploitation for Privilege Escalation"
reference = "https://attack.mitre.org/techniques/T1068/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.008"
name = "/etc/passwd and /etc/shadow"
reference = "https://attack.mitre.org/techniques/T1003/008/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

