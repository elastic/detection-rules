[metadata]
creation_date = "2024/07/15"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects a suspicious egress network connection attempt from a Git hook script. Git hooks are scripts that Git
executes before or after events such as: commit, push, and receive. An attacker can abuse these features to execute
arbitrary commands on the system, establish persistence or to initialize a network connection to a remote server and
exfiltrate data or download additional payloads.
"""
from = "now-9m"
index = ["logs-endpoint.events.process*", "logs-endpoint.events.network*"]
language = "eql"
license = "Elastic License v2"
name = "Git Hook Egress Network Connection"
references = [
    "https://swisskyrepo.github.io/InternalAllTheThings/redteam/persistence/linux-persistence/#backdooring-git",
    "https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms",
]
risk_score = 47
rule_id = "9822c5a1-1494-42de-b197-487197bb540c"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Execution",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id with maxspan=3s
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and
   process.parent.name == "git" and process.args : ".git/hooks/*" and
   process.name in ("bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish")] by process.entity_id
  [network where host.os.type == "linux" and event.type == "start" and event.action == "connection_attempted" and not (
     destination.ip == null or destination.ip == "0.0.0.0" or cidrmatch(
       destination.ip, "10.0.0.0/8", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.0.0/29",
       "192.0.0.8/32", "192.0.0.9/32", "192.0.0.10/32", "192.0.0.170/32", "192.0.0.171/32", "192.0.2.0/24",
       "192.31.196.0/24", "192.52.193.0/24", "192.168.0.0/16", "192.88.99.0/24", "224.0.0.0/4", "100.64.0.0/10",
       "192.175.48.0/24","198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "240.0.0.0/4", "::1", "FE80::/10",
       "FF00::/8", "172.31.0.0/16"
     )
   )
  ] by process.parent.entity_id
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Git Hook Egress Network Connection

Git hooks are scripts triggered by Git events like commits or pushes, allowing automation of tasks. Adversaries can exploit these hooks to execute unauthorized commands, maintain persistence, or initiate network connections for data exfiltration. The detection rule identifies suspicious network activities by monitoring script executions from Git hooks and subsequent external network connections, flagging potential misuse.

### Possible investigation steps

- Review the alert details to identify the specific Git hook script involved by examining the `process.args` field for the path and name of the script.
- Check the `process.name` field to determine which shell was used to execute the Git hook script, as this might provide insight into the attacker's familiarity with the environment.
- Investigate the `destination.ip` field in the network event to identify the external IP address the connection was attempted to, and perform a reputation check on this IP address to assess its potential maliciousness.
- Use the `process.entity_id` and `process.parent.entity_id` fields to correlate the process execution and network connection events, confirming the sequence of actions.
- Examine the `host.id` field to identify the affected host and gather additional context about its role and importance within the network.
- Utilize Osquery to gather more information about the Git configuration and hooks on the affected system. For example, run the following Osquery query to list all Git hooks present on the system: `SELECT path, content FROM file WHERE path LIKE '/path/to/repo/.git/hooks/%';`
- Check the system's process execution history around the time of the alert to identify any other suspicious activities or processes that might be related.
- Review the system logs for any unusual or unauthorized access attempts or changes around the time of the alert to identify potential indicators of compromise.
- Investigate the user account associated with the process execution to determine if it has been compromised or if there are any signs of unauthorized access.
- Analyze any additional network traffic from the affected host to identify other potential connections to suspicious or unauthorized external IP addresses.

### False positive analysis

- Legitimate automation scripts: Developers often use Git hooks for automation tasks such as triggering CI/CD pipelines or deploying applications. These scripts might initiate network connections to internal servers or cloud services, which could be flagged as suspicious. Users can handle these by creating exceptions for known and trusted scripts or IP addresses.
- Internal network connections: Git hooks might connect to internal resources for tasks like fetching dependencies or updating configurations. These connections could be mistakenly identified as egress attempts. To manage this, users can exclude specific internal IP ranges or domains from the detection rule.
- Development tools and integrations: Some development tools or integrations might use Git hooks to communicate with external services for legitimate purposes, such as code quality checks or notifications. Users should identify these tools and add them to an allowlist to prevent false positives.
- Testing environments: In testing or staging environments, developers might intentionally use Git hooks to simulate network activities for testing purposes. Users can exclude these environments from monitoring or adjust the rule to account for known testing activities.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify the specific Git hook script responsible for the suspicious activity and review its contents for malicious code.
- Terminate any unauthorized processes initiated by the Git hook to halt ongoing malicious activities.
- Analyze network logs to identify any external IP addresses contacted during the incident and block these addresses at the firewall level.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine the scope of the compromise.
- Restore the affected system from a known good backup to ensure the removal of any persistent threats.
- Implement enhanced logging policies to capture detailed process execution and network connection attempts for future investigations.
- Integrate threat intelligence feeds to correlate detected activities with known threat actors and tactics, techniques, and procedures (TTPs).
- Review and update Git hook permissions and configurations to limit execution to trusted scripts and users only.
- Conduct a security awareness session for developers and system administrators on the risks associated with Git hooks and best practices for secure coding and configuration."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

