[metadata]
creation_date = "2023/07/28"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for the execution of a set of linux binaries, that are potentially vulnerable to wildcard injection,
with suspicious command line flags followed by a shell spawn event. Linux wildcard injection is a type of security
vulnerability where attackers manipulate commands or input containing wildcards (e.g., *, ?, []) to execute unintended
operations or access sensitive data by tricking the system into interpreting the wildcard characters in unexpected ways.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Shell via Wildcard Injection Detected"
references = ["https://www.exploit-db.com/papers/33930"]
risk_score = 47
rule_id = "0b803267-74c5-444d-ae29-32b5db2d562a"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id with maxspan=1s
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and (
    (process.name == "tar" and process.args : "--checkpoint=*" and process.args : "--checkpoint-action=*") or
    (process.name == "rsync" and process.args : "-e*") or
    (process.name == "zip" and process.args == "--unzip-command")
   ) and not process.executable : "/tmp/newroot/*"
  ]  by process.entity_id
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and 
     process.parent.name : ("tar", "rsync", "zip") and 
     process.name : ("bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish")
  ] by process.parent.entity_id
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Shell via Wildcard Injection Detected

Wildcard injection exploits vulnerabilities in Linux command-line utilities by manipulating wildcard characters to execute unauthorized commands. Adversaries may leverage this to escalate privileges or access sensitive data. The detection rule identifies suspicious executions of vulnerable binaries like `tar`, `rsync`, and `zip`, followed by shell spawns, indicating potential exploitation attempts.

### Possible investigation steps

- Review the alert details to identify the specific binary (e.g., `tar`, `rsync`, `zip`) and the suspicious command line flags that triggered the alert.
- Examine the `process.entity_id` and `process.parent.entity_id` fields to trace the process lineage and understand the parent-child relationship of the processes involved.
- Check the `host.id` and `host.os.type` fields to confirm the affected host and ensure it is running a Linux operating system.
- Investigate the `process.args` field to analyze the exact command line arguments used, looking for any unusual or unexpected patterns that could indicate manipulation.
- Use Osquery to gather additional context about the processes involved. For example, run the following query to list recent processes executed by the same user: `SELECT * FROM processes WHERE uid = (SELECT uid FROM processes WHERE pid = <suspicious_process_id>);`
- Review the `event.type` and `event.action` fields to confirm the nature of the process execution events and ensure they align with the expected behavior of the binaries.
- Check for any recent changes or anomalies in the `/tmp/newroot/` directory, as the query excludes processes executed from this path, which might indicate an attempt to bypass detection.
- Investigate the `process.parent.name` field to determine if the shell spawn was legitimate or if it indicates an unauthorized shell access attempt.
- Correlate the alert with other security events or logs from the same host to identify any additional suspicious activities or patterns.
- Consult threat intelligence sources or internal knowledge bases to determine if there are known vulnerabilities or exploits associated with the specific binaries and command line flags observed.

### False positive analysis

- Known false positives may occur when legitimate administrative scripts or automated processes use the `tar`, `rsync`, or `zip` commands with wildcard characters for routine operations, such as backups or file synchronization, which may inadvertently match the detection criteria.
- System administrators often use `tar` with `--checkpoint` and `--checkpoint-action` flags for monitoring purposes during large file operations, which can trigger the rule without malicious intent.
- The `rsync` command with `-e` options is commonly used in secure file transfer scripts, which might be flagged if the script spawns a shell for legitimate reasons.
- The `zip` command with `--unzip-command` is sometimes used in custom scripts to handle specific file extraction tasks, potentially leading to false positives if a shell is invoked as part of the process.
- To manage these false positives, users can create exceptions by excluding specific scripts or processes known to perform these operations safely. This can be done by adding the paths or process names to an exclusion list within the detection rule configuration.
- Regularly review and update the exclusion list to ensure it reflects current legitimate usage patterns, minimizing the risk of overlooking genuine threats while reducing noise from benign activities.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify the scope of the intrusion, focusing on logs and process trees related to the detected binaries (tar, rsync, zip) and subsequent shell spawns.
- Terminate any unauthorized processes that were spawned as a result of the wildcard injection to halt any ongoing malicious activities.
- Review and analyze system logs to determine if any sensitive data was accessed or exfiltrated during the exploitation attempt.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the attack is part of a larger campaign.
- Apply patches or updates to the affected binaries and the operating system to mitigate the vulnerability and prevent future exploitation.
- Implement enhanced logging policies to capture detailed command-line arguments and process execution details for better visibility in future investigations.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to detect similar patterns of behavior and improve threat detection capabilities.
- Restore the system to its operational state by reinstalling the operating system and applications from trusted sources, ensuring all security patches are applied.
- Harden the system by disabling unnecessary services, enforcing the principle of least privilege, and implementing application whitelisting to reduce the attack surface."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1068"
name = "Exploitation for Privilege Escalation"
reference = "https://attack.mitre.org/techniques/T1068/"

[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
