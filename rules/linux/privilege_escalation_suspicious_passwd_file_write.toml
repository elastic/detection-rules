[metadata]
creation_date = "2024/01/22"
integration = ["endpoint", "auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Monitors for the generation of a passwd password entry via openssl, followed by a file write activity on the
"/etc/passwd" file. The "/etc/passwd" file in Linux stores user account information, including usernames, user IDs,
group IDs, home directories, and default shell paths. Attackers may exploit a misconfiguration in the "/etc/passwd" file
permissions or other privileges to add a new entry to the "/etc/passwd" file with root permissions, and leverage this
new user account to login as root.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Suspicious Passwd File Event Action"
risk_score = 47
rule_id = "71d6a53d-abbd-40df-afee-c21fff6aafb0"
setup = """## Setup


This rule requires data coming in from Elastic Defend and Auditd Manager.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows
the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest to select "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).

### Auditd Manager Integration Setup
The Auditd Manager Integration receives audit events from the Linux Audit Framework which is a part of the Linux kernel.
Auditd Manager provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system.

#### The following steps should be executed in order to add the Elastic Agent System integration "auditd_manager" on a Linux System:
- Go to the Kibana home page and click “Add integrations”.
- In the query bar, search for “Auditd Manager” and select the integration to see more details about it.
- Click “Add Auditd Manager”.
- Configure the integration name and optionally add a description.
- Review optional and advanced settings accordingly.
- Add the newly installed “auditd manager” to an existing or a new agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
- Click “Save and Continue”.
- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/auditd_manager).

#### Rule Specific Setup Note
Auditd Manager subscribes to the kernel and receives events as they occur without any additional configuration.
However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.
- For this detection rule the following additional audit rules are required to be added to the integration:
  -- "-w /etc/passwd -p wa -k etcpasswd"
"""
severity = "medium"
tags = [
    "Data Source: Auditd Manager",
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id, process.parent.pid with maxspan=1m
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and
   process.name == "openssl" and process.args == "passwd" and user.id != "0"]
  [file where host.os.type == "linux" and file.path == "/etc/passwd" and process.parent.pid != 1 and
   not auditd.data.a2 == "80000" and event.outcome == "success" and user.id != "0"]
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious Passwd File Event Action

In Linux environments, the `/etc/passwd` file is crucial for managing user accounts. Adversaries may exploit vulnerabilities or misconfigurations to insert unauthorized entries, potentially gaining root access. The detection rule identifies suspicious activity by monitoring for the use of `openssl` to generate password entries, followed by unauthorized modifications to the `/etc/passwd` file, indicating potential privilege escalation attempts.

### Possible investigation steps

- Review the alert details to confirm the host.id and process.parent.pid involved in the suspicious activity to ensure accurate context.
- Verify the user.id associated with the openssl process execution to determine if a non-root user attempted to generate a password entry.
- Check the process.args field to confirm the use of "openssl passwd" and gather any additional arguments that might indicate the password generation method.
- Investigate the file write activity on the /etc/passwd file by examining the file.path and event.outcome fields to confirm unauthorized modifications.
- Use Osquery to list recent processes executed by the user.id in question to identify any other suspicious activities: `SELECT pid, name, path, cmdline FROM processes WHERE uid = <user_id>;`
- Examine the process.parent.pid to trace the parent process and understand the context of how the openssl command was executed.
- Review system logs for any login attempts or successful logins by the newly created user account, focusing on the time frame around the alert.
- Check for any recent changes in file permissions or ownership of the /etc/passwd file that could have facilitated unauthorized access.
- Investigate other security alerts or anomalies on the same host.id to identify potential lateral movement or additional compromise indicators.
- Correlate the activity with known MITRE ATT&CK techniques, specifically T1068, to assess if this is part of a broader privilege escalation attempt.

### False positive analysis

- Legitimate administrative tasks: System administrators may use `openssl` to generate password entries for valid user account management. To handle this, users can create exceptions for specific user IDs or processes known to perform these tasks regularly.
- Automated scripts: Some automated maintenance scripts might use `openssl` for password management and modify the `/etc/passwd` file as part of their routine operations. Users should identify these scripts and exclude them from triggering alerts by specifying their process names or paths.
- Non-root user activities: Developers or non-root users might use `openssl` for testing purposes, leading to false positives. Users can exclude specific user IDs or groups from the detection rule to prevent unnecessary alerts.
- System updates or installations: During system updates or software installations, legitimate processes might modify the `/etc/passwd` file. Users should monitor these activities and temporarily disable the rule or whitelist known update processes to avoid false positives.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify any unauthorized entries in the `/etc/passwd` file and remove them. Verify the integrity of the file against a known good backup.
- Review system logs and process execution history to trace the source of the unauthorized `openssl` command and any subsequent actions taken by the adversary.
- Change all passwords for user accounts on the affected system, especially those with elevated privileges, to prevent further unauthorized access.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if other systems are affected.
- Implement enhanced logging and monitoring for critical files like `/etc/passwd` and processes involving `openssl` to detect similar activities in the future.
- Apply security patches and updates to the operating system and applications to mitigate known vulnerabilities that could be exploited for privilege escalation.
- Conduct a security audit of user account permissions and file access controls to ensure they adhere to the principle of least privilege.
- Restore the system from a clean backup if necessary, ensuring that all unauthorized changes are removed and the system is returned to a secure operational state.
- Educate users and administrators on secure password practices and the importance of monitoring for suspicious activities to enhance overall security awareness."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1068"
name = "Exploitation for Privilege Escalation"
reference = "https://attack.mitre.org/techniques/T1068/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

