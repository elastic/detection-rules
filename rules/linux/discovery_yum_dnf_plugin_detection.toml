[metadata]
creation_date = "2024/06/25"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects the execution of the `grep` command with the `plugins` argument on Linux systems. This command is used
to search for YUM/DNF configurations and/or plugins with an enabled state. This behavior may indicate an attacker is
attempting to establish persistence in a YUM or DNF plugin.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*"]
language = "eql"
license = "Elastic License v2"
name = "Yum/DNF Plugin Status Discovery"
references = [
    "https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/local/yum_package_manager_persistence.rb",
    "https://pwnshift.github.io/2020/10/01/persistence.html",
    "https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms",
]
risk_score = 21
rule_id = "78390eb5-c838-4c1d-8240-69dd7397cfb7"
setup = """## Setup
This rule requires data coming in from Elastic Defend.
### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.
#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).
#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Data Source: Elastic Defend",
    "Data Source: Elastic Endgame",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action in ("exec", "exec_event") and
process.name == "grep" and process.args : "plugins*" and process.args : (
  "/etc/yum.conf", "/usr/lib/yum-plugins/*", "/etc/yum/pluginconf.d/*",
  "/usr/lib/python*/site-packages/dnf-plugins/*", "/etc/dnf/plugins/*", "/etc/dnf/dnf.conf"
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Yum/DNF Plugin Status Discovery

Yum and DNF are package managers for Linux, managing software installations and updates. They support plugins to extend functionality, which can be targeted by attackers to maintain persistence. Adversaries may use commands like `grep` to identify active plugins, indicating potential tampering. The detection rule identifies such suspicious activity by monitoring for specific command executions that query plugin configurations, signaling possible malicious intent.

### Possible investigation steps

- Review the alert details to confirm the presence of the `grep` command execution with arguments related to Yum/DNF plugin configurations, as specified in the detection rule.
- Examine the process execution context, including the `process.name` and `process.args` fields, to verify if the command was executed with the intent to discover plugin status.
- Check the `host.os.type` field to ensure the alert is relevant to a Linux system, as the rule is designed for Linux environments.
- Investigate the user account associated with the process execution to determine if it is a legitimate user or potentially compromised.
- Analyze the command's parent process to understand the origin of the execution and identify any suspicious parent-child process relationships.
- Utilize Osquery to gather additional context on Yum/DNF configurations by running a query such as: `SELECT * FROM file WHERE path IN ('/etc/yum.conf', '/etc/dnf/dnf.conf');` to check for any unauthorized modifications.
- Review system logs around the time of the alert to identify any other suspicious activities or related events that could indicate a broader attack.
- Check for any recent changes in the `/etc/yum/pluginconf.d/` and `/etc/dnf/plugins/` directories to identify potential unauthorized plugin installations or modifications.
- Investigate network connections from the host to determine if there are any unusual outbound connections that could suggest data exfiltration or command-and-control activity.
- Correlate this alert with other security events or alerts from the same host to identify patterns or indicators of a larger compromise.

### False positive analysis

- System administrators or automated scripts may regularly use the `grep` command to check the status of Yum/DNF plugins as part of routine maintenance or compliance checks, leading to false positives.
- Developers or IT personnel might execute similar commands during debugging or when developing custom plugins, which can trigger the detection rule.
- To manage these false positives, users can create exceptions for specific user accounts or scripts known to perform these actions regularly, ensuring that only unexpected or unauthorized executions are flagged.
- Implementing a whitelist of trusted processes or users that frequently interact with Yum/DNF configurations can help reduce noise from legitimate activities.
- Monitoring the context of the command execution, such as the user account and the associated process tree, can provide additional insights to differentiate between benign and suspicious activities.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or persistence.
- Conduct a thorough investigation to confirm the presence of malicious activity by reviewing system logs, particularly focusing on the execution of the `grep` command with plugin-related arguments.
- Identify and document any unauthorized changes to YUM/DNF plugin configurations and revert them to their original state.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine the scope of the compromise.
- Implement enhanced logging policies to capture detailed command execution and configuration changes, ensuring future detection of similar activities.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to correlate and analyze suspicious activities across the network.
- Restore the system to its operational state by reinstalling or updating affected packages and ensuring all configurations are secure and verified.
- Apply hardening measures such as restricting access to configuration files, disabling unnecessary plugins, and enforcing the principle of least privilege.
- Conduct a post-incident review to identify gaps in detection and response capabilities, and update security policies and procedures accordingly.
- Educate users and administrators on recognizing signs of compromise and the importance of reporting suspicious activities promptly."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1082"
name = "System Information Discovery"
reference = "https://attack.mitre.org/techniques/T1082/"


[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

