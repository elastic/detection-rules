[metadata]
creation_date = "2023/08/30"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for the potential memory dump of the init process (PID 1) through gdb. Attackers may leverage memory
dumping techniques to attempt secret extraction from privileged processes. Tools that display this behavior include
"truffleproc" and "bash-memory-dump". This behavior should not happen by default, and should be investigated thoroughly.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*"]
language = "eql"
license = "Elastic License v2"
name = "Linux init (PID 1) Secret Dump via GDB"
references = ["https://github.com/controlplaneio/truffleproc", "https://github.com/hajzer/bash-memory-dump"]
risk_score = 47
rule_id = "d4ff2f53-c802-4d2e-9fb9-9ecc08356c3f"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
    "Data Source: Elastic Endgame",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action in ("exec", "exec_event") and 
process.name == "gdb" and process.args in ("--pid", "-p") and process.args == "1"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Linux init (PID 1) Secret Dump via GDB

In Linux, the init process (PID 1) is the first process started by the kernel and is responsible for initializing the system. Adversaries may exploit debugging tools like GDB to dump memory from this process, potentially extracting sensitive information. The detection rule identifies suspicious GDB executions targeting PID 1, flagging unauthorized memory access attempts for investigation.

### Possible investigation steps

- Review the alert details to confirm the presence of GDB execution targeting PID 1, focusing on the `process.name` and `process.args` fields to ensure they match the rule criteria.
- Check the user context under which the GDB process was executed to determine if it was initiated by a legitimate user or an unauthorized account.
- Investigate the parent process of the GDB execution to understand how it was initiated, using the `parent_process.name` and `parent_process.args` fields.
- Examine the command history of the user who executed GDB to identify any suspicious commands or patterns leading up to the event.
- Use Osquery to gather additional context about the GDB process and its parent process. Example query: `SELECT * FROM processes WHERE pid = (SELECT parent FROM processes WHERE name = 'gdb' AND pid = 1);`
- Analyze system logs around the time of the event to identify any other suspicious activities or anomalies that may correlate with the GDB execution.
- Check for any recent changes to system binaries or configuration files that could indicate tampering or preparation for the attack.
- Review network logs to identify any unusual outbound connections that may suggest data exfiltration attempts following the memory dump.
- Investigate any other alerts or indicators of compromise on the host that may suggest a broader attack campaign.
- Consult threat intelligence sources to determine if there are any known campaigns or adversaries using similar techniques, focusing on the MITRE ATT&CK technique T1003 for context.

### False positive analysis

- System administrators or developers may use GDB to debug legitimate issues with the init process, leading to false positives. In such cases, verify the identity and intent of the user executing GDB and consider adding exceptions for known maintenance activities.
- Automated scripts or monitoring tools might inadvertently trigger this rule if they include debugging or diagnostic routines involving PID 1. Review these scripts to ensure they are authorized and adjust the rule to exclude these specific processes or users.
- Security or forensic tools that perform regular system checks might mimic the behavior flagged by this rule. Confirm the legitimacy of these tools and, if necessary, whitelist them to prevent repeated alerts.
- In development environments, testing of new system initialization scripts or processes might involve debugging the init process. Ensure that these activities are documented and authorized, and create exceptions for these environments to reduce noise.
- If a known and trusted application requires debugging access to the init process for functionality, document this requirement and configure the rule to exclude this application's specific execution context.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Verify the legitimacy of the GDB process targeting PID 1 by checking user permissions and the context of execution.
- Conduct a thorough investigation to identify any unauthorized access or data extraction attempts, focusing on logs and system changes.
- Terminate any unauthorized GDB processes and any other suspicious processes identified during the investigation.
- Review and analyze system logs, including authentication logs, to identify any other potential indicators of compromise or lateral movement.
- Escalate the incident to the security operations team for further analysis and to determine if additional systems are affected.
- Restore the system to a known good state using backups, ensuring that any compromised credentials are reset and access controls are reviewed.
- Implement enhanced logging policies to capture detailed process execution and memory access events for future investigations.
- Integrate security tools with SIEM solutions to improve detection capabilities and automate alerting for similar threats.
- Apply system hardening measures, such as restricting debugging tools to authorized users only and implementing strict access controls on critical processes."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.007"
name = "Proc Filesystem"
reference = "https://attack.mitre.org/techniques/T1003/007/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

