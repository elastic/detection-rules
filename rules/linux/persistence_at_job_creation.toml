[metadata]
creation_date = "2024/05/31"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for at jobs being created or renamed. Linux at jobs are scheduled tasks that can be leveraged by
system administrators to set up scheduled tasks, but may be abused by malicious actors for persistence, privilege
escalation and command execution. By creating or modifying cron job configurations, attackers can execute malicious
commands or scripts at predefined intervals, ensuring their continued presence and enabling unauthorized activities.
"""
from = "now-9m"
index = ["logs-endpoint.events.file*"]
language = "eql"
license = "Elastic License v2"
name = "At Job Created or Modified"
references = ["https://www.elastic.co/security-labs/primer-on-persistence-mechanisms"]
risk_score = 47
rule_id = "84755a05-78c8-4430-8681-89cd6c857d71"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Privilege Escalation",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "linux" and
event.action in ("rename", "creation") and file.path : "/var/spool/cron/atjobs/*" and not (
  process.executable in (
    "/bin/dpkg", "/usr/bin/dpkg", "/bin/dockerd", "/usr/bin/dockerd", "/usr/sbin/dockerd", "/bin/microdnf",
    "/usr/bin/microdnf", "/bin/rpm", "/usr/bin/rpm", "/bin/snapd", "/usr/bin/snapd", "/bin/yum", "/usr/bin/yum",
    "/bin/dnf", "/usr/bin/dnf", "/bin/podman", "/usr/bin/podman", "/bin/dnf-automatic", "/usr/bin/dnf-automatic",
    "/bin/pacman", "/usr/bin/pacman", "/usr/bin/dpkg-divert", "/bin/dpkg-divert", "/sbin/apk", "/usr/sbin/apk",
    "/usr/local/sbin/apk", "/usr/bin/apt", "/usr/sbin/pacman", "/bin/podman", "/usr/bin/podman", "/usr/bin/puppet",
    "/bin/puppet", "/opt/puppetlabs/puppet/bin/puppet", "/usr/bin/chef-client", "/bin/chef-client",
    "/bin/autossl_check", "/usr/bin/autossl_check", "/proc/self/exe", "/dev/fd/*",  "/usr/bin/pamac-daemon",
    "/bin/pamac-daemon", "/usr/local/bin/dockerd"
  ) or
  file.extension in ("swp", "swpx", "swx", "dpkg-remove") or
  file.Ext.original.extension == "dpkg-new" or
  process.executable : ("/nix/store/*", "/var/lib/dpkg/*", "/tmp/vmis.*", "/snap/*", "/dev/fd/*") or
  process.executable == null or
  (process.name == "sed" and file.name : "sed*") or
  (process.name == "perl" and file.name : "e2scrub_all.tmp*") 
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating At Job Created or Modified

The 'at' command in Linux schedules tasks for future execution, aiding system administrators in automating routine jobs. However, attackers can exploit this by creating or altering 'at' jobs to maintain persistence, escalate privileges, or execute unauthorized commands. The detection rule identifies suspicious 'at' job activities by monitoring file changes in specific directories, excluding benign processes and extensions, thus highlighting potential malicious actions.

### Possible investigation steps

- Review the alert details to identify the specific file path and process executable involved in the 'at' job creation or modification, focusing on the `file.path` and `process.executable` fields.
- Verify the legitimacy of the process executable by checking its hash against known good hashes or using threat intelligence sources to determine if it is associated with known malicious activity.
- Use Osquery to list all scheduled 'at' jobs on the system to identify any unexpected or unauthorized entries. Example query: `SELECT * FROM at_jobs;`
- Investigate the user account associated with the process that created or modified the 'at' job to determine if it has been compromised or is being misused.
- Check the process tree to understand the parent process and any child processes spawned by the suspicious executable, which can provide context on how the 'at' job was created or modified.
- Examine system logs, such as `/var/log/auth.log` or `/var/log/secure`, for any unusual login attempts or privilege escalation activities around the time the 'at' job was created or modified.
- Analyze the contents of the 'at' job script or command to determine its purpose and whether it contains any malicious or unauthorized actions.
- Cross-reference the timing of the 'at' job creation or modification with other security alerts or incidents to identify potential correlations or patterns of attack.
- Investigate any network connections initiated by the process executable to external IP addresses, which may indicate data exfiltration or command-and-control communication.
- Review the system's history of software installations and updates to ensure that the process executable is not part of a legitimate software update or installation process.

### False positive analysis

- System updates and package management activities can trigger false positives as they often involve creating or modifying files in the `/var/spool/cron/atjobs/` directory. Processes like `dpkg`, `rpm`, `yum`, and `dnf` are commonly involved in these activities and should be excluded to prevent unnecessary alerts.
- Container management tools such as `dockerd` and `podman` may also modify files in the monitored directory during normal operations. Excluding these processes can help reduce false positives.
- Automated system maintenance scripts, such as those run by `puppet` or `chef-client`, might create or modify at jobs as part of their configuration management tasks. These should be considered for exclusion if they are part of regular, authorized operations.
- Temporary files created by text editors (e.g., with extensions like `.swp`, `.swpx`, `.swx`) can be mistaken for suspicious activity. Excluding these file extensions can help in minimizing false alerts.
- Processes running from specific directories like `/nix/store/`, `/var/lib/dpkg/`, or `/snap/` are often part of legitimate system operations and can be safely excluded if verified as non-threatening.
- Users can manage false positives by regularly reviewing and updating the exclusion list to include any new benign processes or file patterns that are identified during routine system operations.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or execution of malicious tasks.
- Review the 'at' job entries in the /var/spool/cron/atjobs/ directory to identify any unauthorized or suspicious jobs and remove them.
- Investigate the process that created or modified the 'at' job by examining logs and process details to determine if it was a legitimate action or part of a malicious activity.
- Check for other signs of compromise on the system, such as unexpected user accounts, unauthorized software installations, or unusual network activity.
- Restore the system from a known good backup if the investigation confirms a compromise, ensuring that all malicious changes are removed.
- Update and patch the system to the latest security standards to mitigate any vulnerabilities that may have been exploited.
- Implement enhanced logging policies to capture detailed information about process executions and file modifications, aiding in future investigations.
- Integrate security solutions such as intrusion detection systems (IDS) and endpoint detection and response (EDR) tools to monitor for similar activities in the future.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures accordingly.
- Educate users and administrators about the risks associated with scheduled tasks and the importance of monitoring and securing these configurations."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1053"
name = "Scheduled Task/Job"
reference = "https://attack.mitre.org/techniques/T1053/"
[[rule.threat.technique.subtechnique]]
id = "T1053.002"
name = "At"
reference = "https://attack.mitre.org/techniques/T1053/002/"



[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1053"
name = "Scheduled Task/Job"
reference = "https://attack.mitre.org/techniques/T1053/"
[[rule.threat.technique.subtechnique]]
id = "T1053.002"
name = "At"
reference = "https://attack.mitre.org/techniques/T1053/002/"



[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1053"
name = "Scheduled Task/Job"
reference = "https://attack.mitre.org/techniques/T1053/"
[[rule.threat.technique.subtechnique]]
id = "T1053.002"
name = "At"
reference = "https://attack.mitre.org/techniques/T1053/002/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

