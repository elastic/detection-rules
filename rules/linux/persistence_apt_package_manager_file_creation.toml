[metadata]
creation_date = "2024/06/03"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Detects file creation events in the configuration directory for the APT package manager. In Linux, APT (Advanced Package
Tool) is a command-line utility used for handling packages on (by default) Debian-based systems, providing functions for
installing, updating, upgrading, and removing software along with managing package repositories. Attackers can backdoor
APT to gain persistence by injecting malicious code into scripts that APT runs, thereby ensuring continued unauthorized
access or control each time APT is used for package management.
"""
from = "now-9m"
index = ["logs-endpoint.events.file*"]
language = "eql"
license = "Elastic License v2"
name = "APT Package Manager Configuration File Creation"
references = [
    "https://packetstormsecurity.com/files/152668/APT-Package-Manager-Persistence.html",
    "https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms",
]
risk_score = 47
rule_id = "7c2e1297-7664-42bc-af11-6d5d35220b6b"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "linux" and event.action in ("rename", "creation") and
file.path : "/etc/apt/apt.conf.d/*" and not (
  process.executable in (
    "/bin/dpkg", "/usr/bin/dpkg", "/bin/dockerd", "/usr/bin/dockerd", "/usr/sbin/dockerd", "/bin/microdnf",
    "/usr/bin/microdnf", "/bin/rpm", "/usr/bin/rpm", "/bin/snapd", "/usr/bin/snapd", "/bin/yum", "/usr/bin/yum",
    "/bin/dnf", "/usr/bin/dnf", "/bin/podman", "/usr/bin/podman", "/bin/dnf-automatic", "/usr/bin/dnf-automatic",
    "/bin/pacman", "/usr/bin/pacman", "/usr/bin/dpkg-divert", "/bin/dpkg-divert", "/sbin/apk", "/usr/sbin/apk",
    "/usr/local/sbin/apk", "/usr/bin/apt", "/usr/sbin/pacman", "/bin/podman", "/usr/bin/podman", "/usr/bin/puppet",
    "/bin/puppet", "/opt/puppetlabs/puppet/bin/puppet", "/usr/bin/chef-client", "/bin/chef-client",
    "/bin/autossl_check", "/usr/bin/autossl_check", "/proc/self/exe", "/dev/fd/*",  "/usr/bin/pamac-daemon",
    "/bin/pamac-daemon", "/usr/lib/snapd/snapd", "/usr/local/bin/dockerd", "/usr/libexec/netplan/generate",
    "/usr/local/bin/apt-get", "/usr/bin/apt-get"
  ) or
  file.path :("/etc/apt/apt.conf.d/*.tmp*") or
  file.extension in ("swp", "swpx", "swx", "dpkg-remove") or
  file.Ext.original.extension == "dpkg-new" or
  process.executable : (
    "/nix/store/*", "/var/lib/dpkg/*", "/tmp/vmis.*", "/snap/*", "/dev/fd/*", "/usr/lib/*", "/usr/libexec/*",
    "/etc/kernel/*"
  ) or
  process.executable == null or
  process.name in ("pveupdate", "perl") or
  (process.name == "sed" and file.name : "sed*") or
  (process.name == "perl" and file.name : "e2scrub_all.tmp*") 
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating APT Package Manager Configuration File Creation

APT, a key utility in Debian-based Linux systems, manages software packages and repositories. Adversaries may exploit APT by inserting malicious scripts into its configuration files, ensuring persistent unauthorized access. The detection rule identifies suspicious file creation or renaming in APT's configuration directory, excluding legitimate processes, to flag potential backdoor attempts.

### Possible investigation steps

- Review the alert details to identify the specific file path and name involved in the creation or renaming event within the `/etc/apt/apt.conf.d/` directory.
- Check the `process.executable` field to determine which process was responsible for the file creation or renaming. Verify if it matches any known legitimate processes or if it appears suspicious.
- Investigate the `process.name` field to identify the process name associated with the event. Cross-reference this with known benign processes to rule out false positives.
- Examine the `file.extension` and `file.Ext.original.extension` fields to ensure the file does not have extensions commonly associated with temporary or transitional files, such as "swp", "swpx", "swx", or "dpkg-new".
- Use Osquery to gather more context about the file and process. For example, run the following query to list details about the file and its associated process: `SELECT * FROM file WHERE path = '/etc/apt/apt.conf.d/<file_name>';`.
- Investigate the parent process of the suspicious process using the `process.parent` field to understand the process hierarchy and identify potential sources of the unauthorized action.
- Check system logs, such as `/var/log/auth.log` or `/var/log/syslog`, for any related entries around the time of the event to identify any unusual activity or unauthorized access attempts.
- Review recent user activity on the system to determine if any user accounts were active during the time of the event and if they have a history of legitimate administrative actions.
- Analyze network logs to identify any outbound connections from the host that may indicate data exfiltration or communication with a command and control server.
- Correlate the event with other security alerts or incidents in the environment to determine if this is part of a larger attack campaign or isolated incident.

### False positive analysis

- Legitimate package management operations: System administrators or automated processes may create or rename files in the APT configuration directory during routine package management tasks. These actions are typically performed by trusted package management tools like `dpkg`, `apt-get`, or `snapd`, which are already excluded in the detection rule.
- Temporary files: Editors like `vim` or `nano` may create temporary files with extensions such as `.swp` or `.swx` while editing configuration files. These are non-threatening and are excluded by checking for specific file extensions.
- System updates and maintenance scripts: Automated scripts or system maintenance tools may modify APT configuration files as part of their normal operation. Users can handle these by adding exceptions for known maintenance scripts or processes.
- Custom scripts or tools: Organizations may use custom scripts or third-party tools for managing APT configurations. Users should identify these scripts and add their paths or process names to the exclusion list to prevent false positives.
- Exclude specific directories: If certain directories within `/etc/apt/apt.conf.d/` are known to be used for legitimate purposes, users can modify the rule to exclude these paths from monitoring.
- Monitor process context: Ensure that the process context of file creation or renaming events is analyzed. If a known and trusted process is responsible, consider adding it to the exclusion list to reduce false positives.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify the source of the malicious file creation, examining logs and process histories to trace the attack vector.
- Remove any unauthorized or suspicious files from the APT configuration directory and restore original configuration files from a known good backup.
- Review and update the system's APT package manager and related software to the latest versions to patch any vulnerabilities.
- Implement enhanced logging for file creation and modification events in critical directories, ensuring logs are sent to a centralized logging solution for continuous monitoring.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to correlate alerts and improve detection capabilities.
- Conduct a comprehensive security audit of the system to identify and remediate any additional vulnerabilities or misconfigurations.
- Escalate the incident to the appropriate internal security team or external cybersecurity experts if the attack appears to be part of a larger campaign or if advanced persistent threat (APT) actors are suspected.
- Restore the system to its operational state by verifying the integrity of all system files and configurations, ensuring no backdoors or malicious scripts remain.
- Implement hardening measures such as restricting write permissions to critical directories, enforcing the principle of least privilege, and regularly reviewing user access rights."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique]]
id = "T1546"
name = "Event Triggered Execution"
reference = "https://attack.mitre.org/techniques/T1546/"
[[rule.threat.technique.subtechnique]]
id = "T1546.016"
name = "Installer Packages"
reference = "https://attack.mitre.org/techniques/T1546/016/"


[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

