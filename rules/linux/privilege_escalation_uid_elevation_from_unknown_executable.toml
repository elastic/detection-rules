[metadata]
creation_date = "2023/10/26"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Monitors for the elevation of regular user permissions to root permissions through a previously unknown executable.
Attackers may attempt to evade detection by hijacking the execution flow and hooking certain functions/syscalls through
a rootkit in order to provide easy access to root via a special modified command.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "UID Elevation from Previously Unknown Executable"
risk_score = 47
rule_id = "7787362c-90ff-4b1a-b313-8808b1020e64"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows
the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click Add integrations.
- In the query bar, search for Elastic Defend and select the integration to see more details about it.
- Click Add Elastic Defend.
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either Traditional Endpoints or Cloud Workloads.
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest to select "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in New agent policy name. If other agent policies already exist, you can click the Existing hosts tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click Save and Continue.
- To complete the integration, select Add Elastic Agent to your hosts and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
host.os.type:"linux" and event.category:"process" and event.action:"uid_change" and event.type:"change" and user.id:"0"
and process.parent.name:("bash" or "dash" or "sh" or "tcsh" or "csh" or "zsh" or "ksh" or "fish") and not (
  process.executable:(
    /bin/* or /usr/bin/* or /sbin/* or /usr/sbin/* or /snap/* or /tmp/newroot/* or /var/lib/docker/* or /usr/local/* or
    /opt/psa/admin/* or /usr/lib/snapd/snap-confine or /opt/dynatrace/* or /opt/microsoft/* or
    /var/lib/snapd/snap/bin/node or /opt/gitlab/embedded/sbin/logrotate or /etc/apt/universal-hooks/* or
    /opt/puppetlabs/puppet/bin/puppet or /opt/cisco/* or /run/k3s/containerd/* or /usr/lib/postfix/sbin/master or
    /usr/libexec/postfix/local or /var/lib/snapd/snap/bin/postgresql* or /opt/puppetlabs/puppet/bin/ruby
  ) or
  process.name:(
    "bash" or "dash" or "sh" or "tcsh" or "csh" or "zsh" or "ksh" or "fish" or "sudo" or "su" or "apt" or "apt-get" or
    "aptitude" or "squid" or "snap" or "fusermount" or "pkexec" or "umount" or "master" or "omsbaseline" or "dzdo" or
    "sandfly" or "logrotate"
  ) or
  process.args:/usr/bin/python*
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating UID Elevation from Previously Unknown Executable

In Linux environments, user ID (UID) elevation is a critical function allowing users to gain root privileges. Adversaries exploit this by using unknown executables to hijack execution flows, often via rootkits, to stealthily gain root access. The detection rule identifies such anomalies by monitoring UID changes initiated by non-standard executables, excluding known safe paths and processes, thus highlighting potential privilege escalation attempts.

### Possible investigation steps

- Review the alert details to identify the specific unknown executable that triggered the UID elevation event.
- Cross-reference the process executable path with known safe paths to confirm it is indeed unknown or suspicious.
- Examine the parent process name and its command-line arguments to understand the context in which the executable was run.
- Use Osquery to list all processes running on the host and identify any other instances of the suspicious executable:
  ```sql
  SELECT pid, name, path, cmdline FROM processes WHERE path = '<suspicious_executable_path>';
  ```
- Investigate the file attributes and metadata of the unknown executable, such as creation and modification times, to determine if it was recently introduced.
- Check the system logs for any recent changes or installations that might correlate with the appearance of the unknown executable.
- Analyze the network activity from the host to identify any unusual outbound connections that might indicate data exfiltration or command-and-control communication.
- Review user activity logs to determine if any legitimate user actions could have inadvertently triggered the UID elevation.
- Investigate other security alerts or anomalies on the host that might be related to the same timeframe as the UID elevation event.
- Consult threat intelligence sources to see if the unknown executable or its hash is associated with known malicious activity or campaigns.

### False positive analysis

- Known false positives may occur when legitimate software updates or installations introduce new executables that are not yet recognized by the detection rule. These can include software from trusted vendors that temporarily reside in non-standard directories.
- System administrators might execute scripts or binaries from custom paths for maintenance or monitoring purposes, which could trigger the rule if these paths are not included in the exceptions.
- Developers and IT staff often compile and run custom applications or scripts in development environments, which may not be accounted for in the predefined safe paths.
- To manage these false positives, users can update the detection rule to include exceptions for specific paths or executables that are verified as safe. This can be done by adding these paths to the `process.executable` exclusion list or by specifying known safe process names in the `process.name` exclusion list.
- Regularly review and update the list of exceptions to ensure that new legitimate software and processes are accounted for, reducing unnecessary alerts while maintaining security vigilance.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify the unknown executable and determine how it was introduced into the system.
- Review system logs and use forensic tools to trace the execution flow and identify any rootkits or malicious modifications.
- Remove any identified malicious executables and rootkits from the system, ensuring all traces are eradicated.
- Restore the system from a known good backup if the integrity of the system is compromised beyond repair.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if other systems are affected.
- Implement enhanced logging policies to capture detailed process execution and UID changes for future monitoring.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities.
- Apply security patches and updates to the operating system and applications to mitigate known vulnerabilities.
- Conduct a security review and harden the system by implementing least privilege access, disabling unnecessary services, and using security tools like SELinux or AppArmor."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"

[[rule.threat.technique.subtechnique]]
id = "T1574.013"
name = "KernelCallbackTable"
reference = "https://attack.mitre.org/techniques/T1574/013/"

[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1014"
name = "Rootkit"
reference = "https://attack.mitre.org/techniques/T1014/"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.executable"]

[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"
