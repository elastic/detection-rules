[metadata]
creation_date = "2022/09/01"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies access to the /etc/shadow file via the commandline using standard system utilities. After elevating
privileges to root, threat actors may attempt to read or dump this file in order to gain valid credentials. They may
utilize these to move laterally undetected and access additional resources.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*"]
language = "kuery"
license = "Elastic License v2"
name = "Potential Shadow File Read via Command Line Utilities"
references = ["https://www.cyberciti.biz/faq/unix-linux-password-cracking-john-the-ripper/"]
risk_score = 47
rule_id = "9a3a3689-8ed1-4cdb-83fb-9506db54c61f"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Tactic: Credential Access",
    "Data Source: Elastic Endgame",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "new_terms"
query = '''
host.os.type : "linux" and event.category : "process" and event.action : ("exec" or "exec_event") and
(process.args : "/etc/shadow" or (process.working_directory: "/etc" and process.args: "shadow")) and not (
  (process.executable : ("/bin/chown" or "/usr/bin/chown") and process.args : "root:shadow") or
  (process.executable : ("/bin/chmod" or "/usr/bin/chmod") and process.args : "640") or
  process.executable:(/vz/* or /var/lib/docker/* or /run/containerd/* or /tmp/.criu* or /tmp/newroot/*) or
  process.parent.name:(gen_passwd_sets or scc_* or wazuh-modulesd)
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Shadow File Read via Command Line Utilities

In Linux environments, the `/etc/shadow` file stores hashed passwords and is crucial for system security. Adversaries with elevated privileges may attempt to access this file to extract credentials, facilitating lateral movement and unauthorized access. The detection rule identifies suspicious command-line attempts to read this file, excluding legitimate processes, by monitoring process execution patterns and arguments, thus helping to thwart potential credential theft.

### Possible investigation steps

- Review the alert details to confirm the presence of suspicious command-line attempts to access the `/etc/shadow` file, focusing on the `process.args` and `process.executable` fields.
- Verify the user account associated with the process by examining the `user.name` field to determine if the access was performed by a legitimate user or an unexpected account.
- Check the `host.os.type` and `event.category` fields to ensure the alert pertains to a Linux system and involves a process execution event.
- Investigate the `process.parent.name` field to identify the parent process and assess whether it is a known legitimate process or potentially malicious.
- Examine the `process.working_directory` field to confirm if the process was executed from the `/etc` directory, which might indicate an attempt to access the shadow file directly.
- Utilize Osquery to gather additional context about the process by running a query such as: `SELECT * FROM processes WHERE name = '<suspicious_process_name>';` to retrieve detailed information about the process, including its command line, parent process, and user.
- Cross-reference the `process.executable` field with known legitimate utilities and paths to rule out false positives, focusing on paths not excluded in the query.
- Analyze recent login events and privilege escalation activities on the host to identify any unauthorized access attempts that might correlate with the alert.
- Review system logs for any other suspicious activities or anomalies around the time of the alert to gather more context on potential malicious behavior.
- Investigate any network connections initiated by the suspicious process to determine if there was any data exfiltration or communication with external hosts.

### False positive analysis

- System maintenance tasks: Legitimate system administrators may access the `/etc/shadow` file during routine maintenance or configuration changes. To handle these, users can create exceptions for known maintenance scripts or processes by adding them to the exclusion list in the detection rule.
- Backup operations: Automated backup processes might access the `/etc/shadow` file as part of a comprehensive system backup. Users should identify and exclude these backup processes by specifying their executable paths or parent process names in the rule.
- Security software: Some security tools, such as vulnerability scanners or compliance checkers, may read the `/etc/shadow` file to verify system security settings. Users can manage these false positives by excluding the specific security software processes from the detection rule.
- Containerized environments: In environments using containers, certain processes might access the `/etc/shadow` file as part of container management tasks. Users should exclude paths related to container runtimes, such as Docker or containerd, to prevent false positives.
- Custom scripts: Organizations may have custom scripts that legitimately access the `/etc/shadow` file for specific operational needs. Users should review these scripts and add them to the exclusion criteria based on their executable paths or parent process names.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Verify the legitimacy of the process attempting to access the /etc/shadow file by reviewing the process tree and associated user accounts.
- Conduct a thorough investigation to determine if any credentials have been compromised and reset passwords for affected accounts.
- Review system logs and security alerts to identify any additional suspicious activities or related incidents.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response.
- Implement enhanced logging and monitoring for critical files and directories, including /etc/shadow, to detect future unauthorized access attempts.
- Apply security patches and updates to address any vulnerabilities that may have been exploited for privilege escalation.
- Restore the system to a known good state from backups if necessary, ensuring that all compromised accounts and processes are remediated.
- Conduct a post-incident review to identify gaps in security controls and update policies and procedures accordingly.
- Implement hardening measures such as enforcing the principle of least privilege, using multi-factor authentication, and regularly auditing user access rights."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1068"
name = "Exploitation for Privilege Escalation"
reference = "https://attack.mitre.org/techniques/T1068/"

[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"

[[rule.threat.technique.subtechnique]]
id = "T1003.008"
name = "/etc/passwd and /etc/shadow"
reference = "https://attack.mitre.org/techniques/T1003/008/"

[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.executable"]

[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-10d"
