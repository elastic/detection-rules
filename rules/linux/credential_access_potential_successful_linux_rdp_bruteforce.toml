[metadata]
creation_date = "2023/07/06"
integration = ["auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
An RDP (Remote Desktop Protocol) brute force attack involves an attacker repeatedly attempting various username and
password combinations to gain unauthorized access to a remote computer via RDP, and if successful, the potential impact
can include unauthorized control over the compromised system, data theft, or the ability to launch further attacks
within the network, jeopardizing the security and confidentiality of the targeted system and potentially compromising
the entire network infrastructure. This rule identifies multiple consecutive authentication failures targeting a
specific user account within a short time interval, followed by a successful authentication.
"""
from = "now-9m"
index = ["auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Successful Linux RDP Brute Force Attack Detected"
risk_score = 47
rule_id = "521fbe5c-a78d-4b6b-a323-f978b0e4c4c0"
setup = """## Setup

This rule requires data coming in from one of the following integrations:
- Auditbeat
- Auditd Manager

### Auditbeat Setup
Auditbeat is a lightweight shipper that you can install on your servers to audit the activities of users and processes on your systems. For example, you can use Auditbeat to collect and centralize audit events from the Linux Audit Framework. You can also use Auditbeat to detect changes to critical files, like binaries and configuration files, and identify potential security policy violations.

#### The following steps should be executed in order to add the Auditbeat on a Linux System:
- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.
- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setup-repositories.html).
- To run Auditbeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-docker.html).
- To run Auditbeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-kubernetes.html).
- For complete “Setup and Run Auditbeat” information refer to the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setting-up-and-running.html).

### Auditd Manager Integration Setup
The Auditd Manager Integration receives audit events from the Linux Audit Framework which is a part of the Linux kernel.
Auditd Manager provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system.

#### The following steps should be executed in order to add the Elastic Agent System integration "auditd_manager" on a Linux System:
- Go to the Kibana home page and click “Add integrations”.
- In the query bar, search for “Auditd Manager” and select the integration to see more details about it.
- Click “Add Auditd Manager”.
- Configure the integration name and optionally add a description.
- Review optional and advanced settings accordingly.
- Add the newly installed “auditd manager” to an existing or a new agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
- Click “Save and Continue”.
- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/auditd_manager).

#### Rule Specific Setup Note
Auditd Manager subscribes to the kernel and receives events as they occur without any additional configuration.
However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.
- For this detection rule no additional audit rules are required to be added to the integration.
"""
severity = "medium"
tags = [
    "Data Source: Auditd Manager",
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
]
type = "eql"

query = '''
sequence by host.id, related.user with maxspan=5s
  [authentication where host.os.type == "linux" and event.action == "authenticated" and
   auditd.data.terminal : "*rdp*" and event.outcome == "failure"] with runs=10
  [authentication where host.os.type == "linux" and event.action  == "authenticated" and
   auditd.data.terminal : "*rdp*" and event.outcome == "success"] | tail 1
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Successful Linux RDP Brute Force Attack Detected

Remote Desktop Protocol (RDP) allows users to connect to and control remote systems, often used for administrative tasks. Adversaries exploit RDP by attempting numerous login attempts to gain unauthorized access, potentially leading to data breaches or further network attacks. The detection rule identifies a pattern of multiple failed login attempts followed by a successful one, indicating a possible brute force attack, by monitoring authentication events on Linux systems.

### Possible investigation steps

- Review the alert details to identify the specific `host.id` and `related.user` involved in the potential brute force attack.
- Examine the authentication logs on the identified Linux host to verify the sequence of failed and successful login attempts, focusing on entries with `event.action` as "authenticated" and `auditd.data.terminal` containing "*rdp*".
- Check the time interval between the failed and successful login attempts to confirm if they occurred within the `maxspan=5s` window, indicating a rapid succession of attempts.
- Investigate the source IP addresses associated with the failed and successful login attempts to determine if they originate from suspicious or known malicious sources.
- Use Osquery to gather additional context on the user account involved. For example, run the query: `SELECT * FROM users WHERE username = '<related.user>';` to check for anomalies in user account settings or recent changes.
- Analyze the system's audit logs for any unusual activity or changes around the time of the successful login, such as new processes or network connections initiated by the compromised account.
- Correlate the findings with other security events or alerts in the network to identify if this incident is part of a larger attack campaign.
- Review historical login patterns for the `related.user` to determine if the login behavior is consistent with past activity or if it deviates significantly.
- Check for any recent vulnerabilities or patches related to RDP on Linux systems that might have been exploited in this attack.
- Document all findings and evidence collected during the investigation to support further analysis and potential escalation.

### False positive analysis

- Frequent legitimate administrative access: Regular administrative tasks may involve multiple failed login attempts due to mistyped credentials or password changes, followed by a successful login. Users can handle this by creating exceptions for known administrative accounts or IP addresses.
- Automated scripts or tools: Some automated maintenance scripts or tools might attempt multiple logins in a short period, leading to false positives. Users should identify and whitelist these scripts or tools to prevent unnecessary alerts.
- User error: Users may accidentally enter incorrect credentials multiple times before succeeding, especially if they are using complex passwords. Implementing user-specific exceptions or increasing the threshold for failed attempts can help reduce false positives.
- Testing environments: In testing or development environments, frequent login attempts might be part of normal operations. Users can exclude these environments from monitoring or adjust the detection parameters to better fit the expected behavior.
- Shared accounts: If multiple users share an account, failed login attempts may occur more frequently. Consider monitoring shared accounts separately and adjusting the detection criteria to account for this behavior.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Review authentication logs to confirm the brute force attack and identify the source IP address of the attacker.
- Block the attacker's IP address at the network firewall to prevent further attempts.
- Reset passwords for the compromised account and any other accounts that may have been targeted during the attack.
- Conduct a thorough investigation to determine if any data was accessed or exfiltrated during the attack.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response.
- Implement multi-factor authentication (MFA) for RDP access to enhance security and prevent future brute force attacks.
- Review and update logging policies to ensure comprehensive monitoring of authentication events and potential security incidents.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to enhance detection capabilities.
- Apply system hardening measures, such as disabling RDP if not needed, using strong password policies, and regularly updating and patching systems."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1110"
name = "Brute Force"
reference = "https://attack.mitre.org/techniques/T1110/"
[[rule.threat.technique.subtechnique]]
id = "T1110.001"
name = "Password Guessing"
reference = "https://attack.mitre.org/techniques/T1110/001/"

[[rule.threat.technique.subtechnique]]
id = "T1110.003"
name = "Password Spraying"
reference = "https://attack.mitre.org/techniques/T1110/003/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

