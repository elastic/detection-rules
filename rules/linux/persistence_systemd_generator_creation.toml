[metadata]
creation_date = "2024/06/19"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects the creation of a systemd generator file. Generators are small executables executed by systemd at
bootup and during configuration reloads. Their main role is to convert non-native configuration and execution parameters
into dynamically generated unit files, symlinks, or drop-ins, extending the unit file hierarchy for the service manager.
Systemd generators can be used to execute arbitrary code at boot time, which can be leveraged by attackers to maintain
persistence on a Linux system.
"""
from = "now-9m"
index = ["logs-endpoint.events.file*"]
language = "eql"
license = "Elastic License v2"
name = "Systemd Generator Created"
references = [
    "https://pberba.github.io/security/2022/02/07/linux-threat-hunting-for-persistence-systemd-generators/",
    "https://www.elastic.co/security-labs/primer-on-persistence-mechanisms",
]
risk_score = 47
rule_id = "39c06367-b700-4380-848a-cab06e7afede"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Privilege Escalation",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
file where host.os.type == "linux" and event.action in ("rename", "creation") and file.path : (
"/run/systemd/system-generators/*", "/etc/systemd/system-generators/*",
"/usr/local/lib/systemd/system-generators/*", "/lib/systemd/system-generators/*",
"/usr/lib/systemd/system-generators/*", "/etc/systemd/user-generators/*",
"/usr/local/lib/systemd/user-generators/*", "/usr/lib/systemd/user-generators/*",
"/lib/systemd/user-generators/*"
) and not (
  process.executable in (
    "/bin/dpkg", "/usr/bin/dpkg", "/bin/dockerd", "/usr/bin/dockerd", "/usr/sbin/dockerd", "/bin/microdnf",
    "/usr/bin/microdnf", "/bin/rpm", "/usr/bin/rpm", "/bin/snapd", "/usr/bin/snapd", "/bin/yum", "/usr/bin/yum",
    "/bin/dnf", "/usr/bin/dnf", "/bin/podman", "/usr/bin/podman", "/bin/dnf-automatic", "/usr/bin/dnf-automatic",
    "/bin/pacman", "/usr/bin/pacman", "/usr/bin/dpkg-divert", "/bin/dpkg-divert", "/sbin/apk", "/usr/sbin/apk",
    "/usr/local/sbin/apk", "/usr/bin/apt", "/usr/sbin/pacman", "/bin/podman", "/usr/bin/podman", "/usr/bin/puppet",
    "/bin/puppet", "/opt/puppetlabs/puppet/bin/puppet", "/usr/bin/chef-client", "/bin/chef-client", "/usr/sbin/sshd",
    "/bin/autossl_check", "/usr/bin/autossl_check", "/proc/self/exe", "/dev/fd/*",  "/usr/bin/pamac-daemon",
    "/bin/pamac-daemon", "/usr/lib/snapd/snapd", "/usr/local/bin/dockerd", "/usr/libexec/platform-python"
  ) or
  file.extension in ("swp", "swpx", "swx", "dpkg-remove") or
  file.Ext.original.extension == "dpkg-new" or
  process.executable == null
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Systemd Generator Created

Systemd generators are scripts that systemd runs at boot or during configuration reloads to convert non-native configurations into unit files. While they streamline service management, adversaries can exploit them to execute unauthorized code, ensuring persistence. The detection rule identifies suspicious generator file activities, excluding benign processes and file types, to flag potential misuse.

### Possible investigation steps

- Review the alert details to identify the specific file path where the systemd generator was created or renamed, focusing on paths like `/run/systemd/system-generators/*` and `/etc/systemd/system-generators/*`.
- Check the process that triggered the alert by examining the `process.executable` field to determine if it is a known benign process or potentially malicious.
- Investigate the user account associated with the process that created or renamed the generator file to assess if it has legitimate access or if it might be compromised.
- Use Osquery to list all systemd generator files and their metadata to identify any unexpected or unauthorized files. Example query: `SELECT * FROM file WHERE path LIKE '/run/systemd/system-generators/%' OR path LIKE '/etc/systemd/system-generators/%';`
- Examine the file creation or modification timestamps to determine if the activity aligns with expected system changes or updates.
- Cross-reference the alert with recent system updates or package installations to rule out legitimate changes that might have triggered the alert.
- Analyze the contents of the suspicious generator file to identify any embedded scripts or commands that could indicate malicious intent.
- Check system logs for any related entries around the time of the alert to gather additional context on the activity.
- Investigate any network connections or external communications initiated by the process that created or modified the generator file to identify potential command and control activity.
- Review historical alerts and incidents involving the same host or user account to identify patterns or repeated suspicious behavior that might indicate a broader compromise.

### False positive analysis

- Known false positives for the Systemd Generator Created rule often arise from legitimate software installations or updates, where package managers like dpkg, rpm, or snapd create or modify generator files as part of their normal operations.
- To manage these false positives, users can exclude specific processes known to perform legitimate generator file operations by adding them to the exception list in the detection rule. This includes processes like dpkg, rpm, and snapd, which are already accounted for in the rule.
- Another source of false positives can be temporary files created by text editors or system processes, which may have extensions like "swp" or "dpkg-remove". These can be excluded by adding their extensions to the exception list.
- Users should regularly review and update the exception list to include any new legitimate processes or file types that are identified as causing false positives, ensuring that the detection rule remains effective without generating unnecessary alerts.
- It's important to maintain a balance between excluding known benign activities and ensuring that potentially malicious activities are still detected, so users should carefully evaluate each exception added to the rule.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify the source of the unauthorized systemd generator file creation, examining logs and process histories.
- Review the contents of the suspicious generator file to understand the potential impact and any malicious code it may contain.
- Remove or disable the unauthorized systemd generator file to prevent it from executing during future boot processes.
- Restore any modified or deleted legitimate systemd generator files from a known good backup to ensure system integrity.
- Escalate the incident to the security operations team if the investigation reveals signs of a broader compromise or if the threat actor's identity is unknown.
- Implement enhanced logging policies to capture detailed information on file creation and modification events, focusing on systemd generator directories.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats in the future.
- Apply system hardening measures, such as restricting write permissions to systemd generator directories and ensuring only trusted processes can create or modify files in these locations.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans to address any deficiencies discovered during the investigation."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique.subtechnique]]
id = "T1543.002"
name = "Systemd Service"
reference = "https://attack.mitre.org/techniques/T1543/002/"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique.subtechnique]]
id = "T1543.002"
name = "Systemd Service"
reference = "https://attack.mitre.org/techniques/T1543/002/"

[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
