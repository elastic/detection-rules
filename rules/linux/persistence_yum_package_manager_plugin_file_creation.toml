[metadata]
creation_date = "2024/06/25"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Detects file creation events in the plugin directories for the Yum package manager. In Linux, Yum (Yellowdog Updater,
Modified) is a command-line utility used for handling packages on (by default) Fedora-based systems, providing functions
for installing, updating, upgrading, and removing software along with managing package repositories. Attackers can
backdoor Yum to gain persistence by injecting malicious code into plugins that Yum runs, thereby ensuring continued
unauthorized access or control each time Yum is used for package management.
"""
from = "now-9m"
index = ["logs-endpoint.events.file*"]
language = "eql"
license = "Elastic License v2"
name = "Yum Package Manager Plugin File Creation"
references = [
    "https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/local/yum_package_manager_persistence.rb",
    "https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms",
]
risk_score = 21
rule_id = "0b15bcad-aff1-4250-a5be-5d1b7eb56d07"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
file where host.os.type == "linux" and event.action in ("rename", "creation") and
file.path : ("/usr/lib/yum-plugins/*", "/etc/yum/pluginconf.d/*") and not (
  process.executable in (
    "/bin/dockerd", "/usr/bin/dockerd", "/usr/sbin/dockerd", "/bin/microdnf", "/usr/bin/microdnf", "/bin/rpm",
    "/usr/bin/rpm", "/bin/snapd", "/usr/bin/snapd", "/bin/yum", "/usr/bin/yum", "/bin/dnf", "/usr/bin/dnf",
    "/bin/podman", "/usr/bin/podman", "/bin/dnf-automatic", "/usr/bin/dnf-automatic", "/sbin/apk", "/usr/sbin/apk",
    "/usr/local/sbin/apk", "/bin/podman", "/usr/bin/podman", "/usr/bin/puppet", "/bin/puppet",
    "/opt/puppetlabs/puppet/bin/puppet", "/usr/bin/chef-client", "/bin/chef-client", "/bin/autossl_check",
    "/usr/bin/autossl_check", "/proc/self/exe", "/dev/fd/*", "/usr/lib/snapd/snapd", "/usr/local/bin/dockerd",
    "/usr/libexec/netplan/generate"
  ) or
  process.name == "yumBackend.py" or
  file.extension in ("swp", "swpx", "swx") or
  file.Ext.original.name like ".ansible*" or
  file.name like ".ansible_tmp*" or
  process.executable : (
    "/nix/store/*", "/var/lib/dpkg/*", "/tmp/vmis.*", "/snap/*", "/dev/fd/*", "/usr/lib/*", "/usr/libexec/*",
    "/etc/kernel/*"
  ) or
  process.executable == null or
  (process.name == "sed" and file.name : "sed*") or
  (process.name == "perl" and file.name : "e2scrub_all.tmp*") 
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Yum Package Manager Plugin File Creation

Yum, a package manager for Fedora-based systems, manages software installations and updates. It uses plugins to extend functionality, which can be targeted by attackers to insert malicious code, ensuring persistence by executing unauthorized actions whenever Yum is used. The detection rule identifies suspicious file creations in Yum's plugin directories, excluding legitimate processes and temporary files, to flag potential backdoor attempts.

### Possible investigation steps

- Review the alert details to identify the specific file path where the creation or rename event occurred, focusing on paths like `/usr/lib/yum-plugins/*` and `/etc/yum/pluginconf.d/*`.
- Check the process that triggered the file creation event by examining the `process.executable` field to determine if it matches any known legitimate processes or if it appears suspicious.
- Investigate the `process.name` field to identify the process responsible for the file creation, ensuring it is not a known benign process like `yumBackend.py`.
- Verify the file extension using the `file.extension` field to ensure it is not a temporary or swap file (e.g., `.swp`, `.swpx`, `.swx`).
- Use Osquery to list all files in the Yum plugin directories and check for recent modifications or unusual file names. Example query: `SELECT path, filename, mtime FROM file WHERE path LIKE '/usr/lib/yum-plugins/%' OR path LIKE '/etc/yum/pluginconf.d/%';`
- Cross-reference the `process.executable` path with known system paths to identify if it originates from unusual locations such as `/nix/store/*` or `/var/lib/dpkg/*`.
- Examine the file metadata, including creation and modification timestamps, to determine if the timing aligns with any known system changes or updates.
- Analyze system logs for any related events around the time of the file creation to identify potential unauthorized access or changes.
- Investigate the user account associated with the process that created the file to determine if it has the necessary permissions and if the activity aligns with typical user behavior.
- Review any recent changes to Yum configurations or updates that might explain the file creation, ensuring no unauthorized modifications have been made.

### False positive analysis

- Legitimate software updates or installations may trigger file creation events in Yum's plugin directories, especially when performed by system administrators or automated scripts. Users can manage these by adding exceptions for known safe processes or scripts that regularly perform such actions.
- Temporary files created by text editors or system processes, such as those with extensions like "swp", "swpx", or "swx", can be mistakenly flagged. Users should ensure these extensions are included in the exclusion list to prevent unnecessary alerts.
- Automation tools like Ansible may create temporary files in these directories, which can be mistaken for suspicious activity. Users can exclude file names starting with ".ansible" or ".ansible_tmp" to reduce false positives.
- Processes running from specific directories, such as "/nix/store/*" or "/var/lib/dpkg/*", might be part of legitimate package management activities. Users should consider excluding these paths if they are part of regular system operations.
- Certain system utilities like "sed" or "perl" might create temporary files during normal operations. Users can exclude these processes when they match specific patterns, such as "sed*" or "e2scrub_all.tmp*", to avoid false alerts.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify the source of the suspicious file creation, focusing on recent changes in the Yum plugin directories.
- Review system logs and use forensic tools to trace the origin of the unauthorized file creation, paying attention to any unusual processes or user activities.
- Remove any unauthorized or suspicious files from the Yum plugin directories and restore them from a known good backup if available.
- Update all system packages and plugins to the latest versions to patch any known vulnerabilities that could have been exploited.
- Implement strict access controls and permissions for the Yum plugin directories to limit who can create or modify files.
- Enhance logging policies to include detailed monitoring of file creation and modification events in critical system directories.
- Integrate security solutions such as intrusion detection systems (IDS) and endpoint detection and response (EDR) tools to improve threat detection capabilities.
- Escalate the incident to the security operations center (SOC) or relevant security team for further analysis and to determine if the attack is part of a larger campaign.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans to prevent future occurrences."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique]]
id = "T1546"
name = "Event Triggered Execution"
reference = "https://attack.mitre.org/techniques/T1546/"

[[rule.threat.technique.subtechnique]]
id = "T1546.016"
name = "Installer Packages"
reference = "https://attack.mitre.org/techniques/T1546/016/"

[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
