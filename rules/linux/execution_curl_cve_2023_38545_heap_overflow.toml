[metadata]
creation_date = "2023/10/11"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Detects potential exploitation of curl CVE-2023-38545 by monitoring for vulnerable command line arguments in conjunction
with an unusual command line length. A flaw in curl version <= 8.3 makes curl vulnerable to a heap based buffer overflow
during the SOCKS5 proxy handshake. Upgrade to curl version >= 8.4 to patch this vulnerability. This exploit can be
executed with and without the use of environment variables. For increased visibility, enable the collection of
http_proxy, HTTPS_PROXY and ALL_PROXY environment variables based on the instructions provided in the setup guide of
this rule.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential curl CVE-2023-38545 Exploitation"
references = [
    "https://curl.se/docs/CVE-2023-38545.html",
    "https://daniel.haxx.se/blog/2023/10/11/curl-8-4-0/",
    "https://twitter.com/_JohnHammond/status/1711986412554531015",
]
risk_score = 47
rule_id = "f41296b4-9975-44d6-9486-514c6f635b2d"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).

Elastic Defend integration does not collect environment variable logging by default.
In order to capture this behavior, this rule requires a specific configuration option set within the advanced settings of the Elastic Defend integration.
 #### To set up environment variable capture for an Elastic Agent policy:
- Go to “Security → Manage → Policies”.
- Select an “Elastic Agent policy”.
- Click “Show advanced settings”.
- Scroll down or search for “linux.advanced.capture_env_vars”.
- Enter the names of environment variables you want to capture, separated by commas.
- For this rule the linux.advanced.capture_env_vars variable should be set to "http_proxy,HTTPS_PROXY,ALL_PROXY".
- Click “Save”.
After saving the integration change, the Elastic Agents running this policy will be updated and the rule will function properly.
For more information on capturing environment variables refer to the [helper guide](https://www.elastic.co/guide/en/security/current/environment-variable-capture.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Use Case: Vulnerability",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and process.name == "curl" 
and (
  process.args like ("--socks5-hostname", "--proxy", "--preproxy", "socks5*") or 
  process.env_vars like ("http_proxy=socks5h://*", "HTTPS_PROXY=socks5h://*", "ALL_PROXY=socks5h://*")
) and length(process.command_line) > 255 and not (
  process.parent.name in ("cf-agent", "agent-run", "agent-check", "rudder", "agent-inventory", "cf-execd") or
  process.args like "/opt/rudder/*" or
  process.parent.executable like ("/vz/root/*", "/var/rudder/*")
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential curl CVE-2023-38545 Exploitation

Curl is a command-line tool used for transferring data with URLs, often employed in scripts and automation. The CVE-2023-38545 vulnerability in curl versions up to 8.3 can be exploited via a buffer overflow during SOCKS5 proxy handshakes, potentially allowing remote code execution. Adversaries might exploit this by crafting specific command-line arguments or environment variables. The detection rule identifies suspicious curl executions by monitoring for unusual command-line lengths and specific SOCKS5-related arguments, excluding known benign processes, to flag potential exploitation attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of suspicious curl executions, focusing on the command line arguments and environment variables related to SOCKS5 proxy usage.
- Verify the version of curl installed on the affected system to determine if it is vulnerable (version <= 8.3). Use the command `curl --version` to check.
- Examine the `process.command_line` field to understand the full context of the curl command executed, paying attention to any unusual or unexpected arguments.
- Investigate the `process.parent.name` and `process.parent.executable` fields to identify the parent process that initiated the curl command, ensuring it is not a known benign process.
- Check the `process.env_vars` field for any suspicious proxy settings, such as `http_proxy`, `HTTPS_PROXY`, or `ALL_PROXY`, that might indicate an attempt to exploit the vulnerability.
- Use Osquery to gather additional context about the process and its environment. For example, run the following Osquery query to list all processes with their environment variables: `SELECT pid, name, path, cmdline, environ FROM processes WHERE name = 'curl';`
- Analyze network logs to identify any unusual outbound connections or data transfers that coincide with the time of the suspicious curl execution.
- Correlate the alert with other security events or logs from the same host to identify any related suspicious activities or patterns.
- Review user activity logs to determine if the curl execution aligns with legitimate user actions or if it appears to be unauthorized or unexpected.
- Consult threat intelligence sources to check for any known indicators of compromise or attack patterns associated with CVE-2023-38545 that might match the observed activity.

### False positive analysis

- Known false positives may arise from legitimate administrative scripts or automation tools that use curl with SOCKS5 proxies for valid purposes, such as network testing or configuration management.
- Processes like "cf-agent", "agent-run", "agent-check", "rudder", "agent-inventory", and "cf-execd" are already excluded as they are known to use curl in a non-threatening manner.
- Users can handle additional false positives by identifying and excluding other benign parent processes or specific command-line patterns that are frequently observed in their environment.
- Consider adding exceptions for specific directories or executable paths, such as "/opt/rudder/*" or "/vz/root/*", if they are known to host non-malicious curl operations.
- Regularly review and update the exclusion list to adapt to changes in the environment and ensure that legitimate activities are not flagged as suspicious.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further exploitation and lateral movement.
- Conduct a thorough investigation to identify any unauthorized changes or suspicious activities, focusing on processes involving curl and SOCKS5 proxy usage.
- Upgrade curl to version 8.4 or later on all systems to patch the CVE-2023-38545 vulnerability and prevent future exploitation.
- Review and update firewall and proxy configurations to restrict unauthorized SOCKS5 proxy connections.
- Implement enhanced logging for curl executions, including capturing command-line arguments and environment variables, to improve detection capabilities.
- Integrate security information and event management (SIEM) solutions to correlate and analyze logs for suspicious patterns related to curl usage.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Restore the system to its operational state by verifying the integrity of critical files and applications, and ensure all security patches are applied.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Implement hardening measures such as disabling unused services, enforcing least privilege access, and conducting regular security audits to reduce the attack surface."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1203"
name = "Exploitation for Client Execution"
reference = "https://attack.mitre.org/techniques/T1203/"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
