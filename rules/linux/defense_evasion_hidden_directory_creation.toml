[metadata]
creation_date = "2024/11/01"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects the creation of a hidden directory via an unusual parent executable. Hidden directories are
directories that are not visible to the user by default. They are often used by attackers to hide malicious files or
tools.
"""
false_positives = [
    """
    Certain tools may create hidden temporary directories upon installation or as part of their normal
    behavior. These events can be filtered by the process arguments, username, or process name values.
    """,
]
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Hidden Directory Creation via Unusual Parent"
risk_score = 21
rule_id = "b15a15f2-becf-475d-aa69-45c9e0ff1c49"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
    "Tactic: Persistence",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and
process.name == "mkdir" and process.parent.executable like (
  "/dev/shm/*", "/tmp/*", "/var/tmp/*", "/var/run/*", "/root/*", "/boot/*", "/var/www/html/*", "/opt/.*"
) and process.args like (".*", "/*/.*") and process.args_count <= 3 and not (
  process.parent.executable like ("/tmp/newroot/*", "/run/containerd/*") or
  process.command_line like ("mkdir -p .", "mkdir ./*") or
  process.parent.executable like (
    "/tmp/pear/temp/*", "/var/tmp/buildah*", "/tmp/python-build.*", "/tmp/cliphist-wofi-img"
  )
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Hidden Directory Creation via Unusual Parent

In Linux environments, hidden directories, often prefixed with a dot, are typically used for configuration files. Adversaries exploit this feature to conceal malicious files by creating hidden directories using uncommon parent processes. The detection rule identifies such activities by monitoring directory creation commands executed by unexpected parent executables in sensitive directories, filtering out known benign patterns to reduce false positives.

### Possible investigation steps

- Review the alert details to identify the specific parent executable and the directory path where the hidden directory was created. Pay attention to the `process.parent.executable` and `process.args` fields.
- Check the process tree to understand the context of the `mkdir` command execution. Determine if the parent process is part of a known application or script.
- Use Osquery to list all processes running under the parent executable identified in the alert. Example query: `SELECT pid, name, path, cmdline FROM processes WHERE path LIKE '/dev/shm/%' OR path LIKE '/tmp/%' OR path LIKE '/var/tmp/%' OR path LIKE '/var/run/%' OR path LIKE '/root/%' OR path LIKE '/boot/%' OR path LIKE '/var/www/html/%' OR path LIKE '/opt/%';`
- Investigate the parent executable's origin and integrity. Check if it matches known hashes or if it has been modified recently.
- Examine the contents of the newly created hidden directory to identify any suspicious files or scripts. Look for known malicious file signatures or unusual file types.
- Cross-reference the timestamp of the directory creation with other logs (e.g., authentication, network, or application logs) to identify any correlated suspicious activities.
- Check for any recent changes in user accounts or permissions that could have facilitated the creation of the hidden directory.
- Investigate the user account associated with the process execution to determine if it has been compromised or is behaving unusually.
- Review historical data to see if similar hidden directory creation events have occurred in the past, indicating a potential pattern or ongoing campaign.
- Consult threat intelligence sources to determine if the parent executable or directory path is associated with known attack techniques or threat actors.

### False positive analysis

- Known false positives may arise from legitimate administrative scripts or applications that create hidden directories for configuration or temporary storage purposes. These can include package managers, build systems, or development tools that operate in directories like `/tmp` or `/var/tmp`.
- Users can handle these false positives by creating exceptions for specific parent executables or command patterns that are known to be benign. For instance, adding exceptions for processes like `/tmp/newroot/*` or `/run/containerd/*` can help reduce noise.
- Another method to manage false positives is to refine the rule by excluding command lines that match known safe patterns, such as `mkdir -p .` or `mkdir ./*`, which are commonly used in legitimate operations.
- Regularly reviewing and updating the list of exceptions based on the environment's typical behavior can help maintain the balance between detection accuracy and minimizing false positives.
- It's important to consider the context of the environment and the typical behavior of applications and scripts to ensure that legitimate activities are not inadvertently flagged as suspicious.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify the scope of the compromise, focusing on the unusual parent process and any associated hidden directories.
- Review and analyze logs from the system and network to trace the origin and timeline of the attack, leveraging MITRE ATT&CK T1564 for context on hiding artifacts.
- Remove any identified malicious files or directories and terminate any suspicious processes related to the alert.
- Restore the system from a known good backup if the integrity of the system is in question.
- Apply security patches and updates to the operating system and applications to mitigate known vulnerabilities.
- Implement enhanced logging policies to capture detailed process creation events and file system changes for future investigations.
- Integrate security tools such as intrusion detection systems (IDS) and endpoint detection and response (EDR) solutions to improve monitoring and detection capabilities.
- Conduct a security review and harden the system by disabling unnecessary services, enforcing least privilege access, and implementing strong authentication mechanisms.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1564"
name = "Hide Artifacts"
reference = "https://attack.mitre.org/techniques/T1564/"

[[rule.threat.technique.subtechnique]]
id = "T1564.001"
name = "Hidden Files and Directories"
reference = "https://attack.mitre.org/techniques/T1564/001/"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
