[metadata]
creation_date = "2024/06/20"
integration = ["auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule leverages the `auditd_manager` integration to detect user or group creation or modification events on Linux
systems. Threat actors may attempt to create or modify users or groups to establish persistence on the system.
"""
from = "now-9m"
index = ["auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "User or Group Creation/Modification"
references = ["https://www.elastic.co/security-labs/primer-on-persistence-mechanisms"]
risk_score = 21
rule_id = "fcf733d5-7801-4eb0-92ac-8ffacf3658f2"
setup = """## Setup

This rule requires data coming in from Auditd Manager.

### Auditd Manager Integration Setup
The Auditd Manager Integration receives audit events from the Linux Audit Framework which is a part of the Linux kernel.
Auditd Manager provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system.

#### The following steps should be executed in order to add the Elastic Agent System integration "auditd_manager" on a Linux System:
- Go to the Kibana home page and click “Add integrations”.
- In the query bar, search for “Auditd Manager” and select the integration to see more details about it.
- Click “Add Auditd Manager”.
- Configure the integration name and optionally add a description.
- Review optional and advanced settings accordingly.
- Add the newly installed “auditd manager” to an existing or a new agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
- Click “Save and Continue”.
- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/auditd_manager).

#### Rule Specific Setup Note
Auditd Manager subscribes to the kernel and receives events as they occur without any additional configuration.
However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.
For this detection rule to trigger, the following additional audit rules are required to be added to the integration:
```
-w /usr/sbin/groupadd -p x -k group_modification
-w /sbin/groupadd -p x -k group_modification
-w /usr/sbin/groupmod -p x -k group_modification
-w /sbin/groupmod -p x -k group_modification
-w /usr/sbin/addgroup -p x -k group_modification
-w /sbin/addgroup -p x -k group_modification
-w /usr/sbin/usermod -p x -k user_modification
-w /sbin/usermod -p x -k user_modification
-w /usr/sbin/userdel -p x -k user_modification
-w /sbin/userdel -p x -k user_modification
-w /usr/sbin/useradd -p x -k user_modification
-w /sbin/useradd -p x -k user_modification
-w /usr/sbin/adduser -p x -k user_modification
-w /sbin/adduser -p x -k user_modification
```
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Data Source: Auditd Manager",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
iam where host.os.type == "linux" and event.type in ("creation", "change") and auditd.result == "success" and 
event.action in ("changed-password", "added-user-account", "added-group-account-to")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating User or Group Creation/Modification

In Linux environments, user and group management is crucial for access control. Adversaries may exploit this by creating or modifying accounts to maintain unauthorized access. The detection rule utilizes `auditd_manager` to monitor successful user or group changes, focusing on actions like password changes or account additions, aligning with MITRE ATT&CK's persistence tactics.

### Possible investigation steps

- Review the alert details to identify the specific `event.type` and `event.action` that triggered the alert, focusing on whether it was a "creation" or "change" event.
- Check the `auditd.result` field to confirm the success of the user or group modification, ensuring that the action was completed successfully.
- Identify the user account or group involved in the event by examining the relevant fields in the alert, such as the username or group name.
- Investigate the source of the event by reviewing the `host.os.type` and any associated IP addresses or hostnames to determine where the change originated.
- Use Osquery to gather additional context about the user or group modification. For example, run the following query to list recent user additions or modifications: `SELECT * FROM users WHERE username = '<username>'`.
- Cross-reference the identified user or group with known legitimate accounts to determine if the change aligns with expected administrative activities.
- Review system logs and audit logs around the time of the event to identify any related activities or anomalies that could indicate malicious intent.
- Check for any other recent alerts or events involving the same user or group to assess if this is part of a broader pattern of suspicious behavior.
- Investigate the account that performed the modification to determine if it has been compromised or if it is being used by an unauthorized user.
- Consult with system administrators or other relevant personnel to verify if the user or group modification was authorized and aligns with current operational needs.

### False positive analysis

- Routine administrative tasks: System administrators often create or modify user and group accounts as part of regular maintenance or onboarding processes. These legitimate actions can trigger the rule, leading to false positives.
- Automated scripts or tools: Some organizations use automated scripts or configuration management tools (e.g., Ansible, Puppet) to manage user accounts, which can result in frequent non-threatening account changes being flagged.
- Software installations: Certain software installations may create or modify user accounts as part of their setup process, which can be mistakenly identified as suspicious activity.
- To manage these false positives, users can create exceptions for known administrative accounts or specific scripts/tools by filtering out events associated with these trusted sources. This can be done by adding conditions to the detection rule to exclude actions performed by specific user accounts or processes.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Review the audit logs to identify the specific user or group changes and determine if they were authorized or suspicious.
- Verify the legitimacy of the newly created or modified accounts by cross-referencing with recent administrative activities and user requests.
- If unauthorized changes are confirmed, disable or remove the suspicious accounts and reset passwords for any affected legitimate accounts.
- Conduct a thorough investigation to identify any additional compromised systems or accounts, leveraging threat intelligence and MITRE ATT&CK details for context.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response coordination.
- Implement enhanced logging policies to capture detailed user and group management activities, ensuring audit logs are securely stored and regularly reviewed.
- Integrate additional security tools, such as intrusion detection systems (IDS) or endpoint detection and response (EDR) solutions, to improve monitoring and detection capabilities.
- Restore the system to its operational state by applying security patches, updating configurations, and ensuring all security controls are active and functioning.
- Harden the system by enforcing least privilege access, implementing multi-factor authentication, and conducting regular security awareness training for users."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1136"
name = "Create Account"
reference = "https://attack.mitre.org/techniques/T1136/"
[[rule.threat.technique.subtechnique]]
id = "T1136.001"
name = "Local Account"
reference = "https://attack.mitre.org/techniques/T1136/001/"



[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

