[metadata]
creation_date = "2023/10/24"
integration = ["endpoint", "auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Monitors for the deletion of the kernel ring buffer events through dmesg. Attackers may clear kernel ring buffer events
to evade detection after installing a Linux kernel module (LKM).
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*", "auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Attempt to Clear Kernel Ring Buffer"
risk_score = 21
rule_id = "2724808c-ba5d-48b2-86d2-0002103df753"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
    "Data Source: Elastic Endgame",
    "Data Source: Auditd Manager",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action in ("exec", "exec_event", "executed", "process_started")
 and process.name == "dmesg" and process.args == "-c"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Attempt to Clear Kernel Ring Buffer

The kernel ring buffer logs system messages, crucial for diagnosing issues. Adversaries may exploit the `dmesg -c` command to clear these logs, concealing traces of malicious activities like installing unauthorized kernel modules. The detection rule identifies this by monitoring the execution of `dmesg` with specific arguments, flagging potential attempts to erase evidence from the kernel ring buffer.

### Possible investigation steps

- Review the alert details to confirm the presence of the `dmesg -c` command execution, focusing on the `process.name` and `process.args` fields to ensure the command was executed with the `-c` argument.
- Check the `event.type` and `event.action` fields to verify that the process was indeed started and executed, confirming the legitimacy of the alert.
- Investigate the user account associated with the `dmesg` command execution to determine if it aligns with expected administrative activity or if it indicates potential unauthorized access.
- Examine the process tree to identify any parent processes that may have initiated the `dmesg` command, which could provide context on how the command was executed.
- Utilize Osquery to gather additional context on the system state at the time of the alert. For example, run the following query to list recent processes executed by the same user: `SELECT pid, name, path, cmdline, start_time FROM processes WHERE uid = (SELECT uid FROM users WHERE username = '<username>') ORDER BY start_time DESC LIMIT 10;`
- Analyze system logs around the time of the alert to identify any other suspicious activities or anomalies that may correlate with the execution of the `dmesg -c` command.
- Check for any recent changes to kernel modules or system configurations that could indicate an attempt to install unauthorized software.
- Investigate network activity from the host to identify any unusual outbound connections that could suggest data exfiltration or communication with a command and control server.
- Review historical alerts and logs for similar `dmesg -c` executions to determine if this is part of a recurring pattern or a one-time event.
- Correlate the findings with threat intelligence sources to assess if the activity matches known tactics, techniques, and procedures (TTPs) associated with specific threat actors or campaigns.

### False positive analysis

- System administrators or automated scripts may use the `dmesg -c` command as part of routine maintenance or troubleshooting, leading to false positives. 
- Regularly scheduled tasks or cron jobs that clear the kernel ring buffer for log management purposes can trigger the detection rule.
- Developers or IT personnel might execute `dmesg -c` during testing or debugging processes, which are non-malicious activities.
- To manage these false positives, users can create exceptions for specific users or processes known to perform legitimate `dmesg -c` operations.
- Implementing a whitelist for trusted scripts or administrative accounts that frequently use `dmesg -c` can help reduce unnecessary alerts.
- Monitoring the context of the `dmesg -c` execution, such as the user account and associated processes, can aid in distinguishing between legitimate and suspicious activities.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to determine the scope of the incident, focusing on identifying any unauthorized kernel modules or other suspicious activities.
- Review system logs and other security telemetry to identify any additional indicators of compromise or related malicious activities.
- Remove any unauthorized kernel modules and restore the kernel to its original state using trusted sources or backups.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging policies to ensure comprehensive monitoring of kernel activities and system changes, including the use of tools like auditd for detailed process tracking.
- Integrate security solutions such as endpoint detection and response (EDR) tools to improve visibility and detection capabilities for similar threats in the future.
- Apply security patches and updates to the operating system and installed software to mitigate known vulnerabilities that could be exploited by attackers.
- Conduct a post-incident review to identify gaps in security controls and processes, and update incident response plans accordingly.
- Educate and train staff on recognizing and responding to similar threats, emphasizing the importance of maintaining system integrity and security hygiene."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1070"
name = "Indicator Removal"
reference = "https://attack.mitre.org/techniques/T1070/"
[[rule.threat.technique.subtechnique]]
id = "T1070.002"
name = "Clear Linux or Mac System Logs"
reference = "https://attack.mitre.org/techniques/T1070/002/"


[[rule.threat.technique]]
id = "T1562"
name = "Impair Defenses"
reference = "https://attack.mitre.org/techniques/T1562/"
[[rule.threat.technique.subtechnique]]
id = "T1562.001"
name = "Disable or Modify Tools"
reference = "https://attack.mitre.org/techniques/T1562/001/"



[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

