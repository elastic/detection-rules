[metadata]
creation_date = "2023/08/28"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for the creation of a file, followed by its execution and self-deletion in a short timespan within a
directory often used for malicious purposes by threat actors. This behavior is often used by malware to execute
malicious code and delete itself to hide its tracks.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "File Creation, Execution and Self-Deletion in Suspicious Directory"
risk_score = 47
rule_id = "09bc6c90-7501-494d-b015-5d988dc3f233"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
]
type = "eql"
query = '''
sequence by host.id, user.id with maxspan=1m
  [file where host.os.type == "linux" and event.action == "creation" and 
   process.name in ("curl", "wget", "fetch", "ftp", "sftp", "scp", "rsync", "ld") and 
   file.path : ("/dev/shm/*", "/run/shm/*", "/tmp/*", "/var/tmp/*",
     "/run/*", "/var/run/*", "/var/www/*", "/proc/*/fd/*")] by file.name
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and 
   process.parent.name in ("bash", "dash", "ash", "sh", "tcsh", "csh", "zsh", "ksh", "fish") and
   not process.parent.executable like (
     "/tmp/VeeamApp*", "/tmp/rajh/spack-stage/*", "plz-out/bin/vault/bridge/test/e2e/base/bridge-dev",
     "/usr/bin/ranlib", "/usr/bin/ar", "plz-out/bin/vault/bridge/test/e2e/base/local-k8s"  
   )] by process.name
  [file where host.os.type == "linux" and event.action == "deletion" and not process.name in ("rm", "ld") and 
   file.path : ("/dev/shm/*", "/run/shm/*", "/tmp/*", "/var/tmp/*",
     "/run/*", "/var/run/*", "/var/www/*", "/proc/*/fd/*")] by file.name
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating File Creation, Execution and Self-Deletion in Suspicious Directory

In Linux environments, temporary directories like `/tmp` and `/dev/shm` are often used for legitimate file storage and execution. However, adversaries exploit these directories to create, execute, and delete malicious files quickly, evading detection. The detection rule identifies this pattern by monitoring file creation, execution, and deletion within a short timeframe, focusing on directories frequently targeted by threat actors. This approach helps in identifying and mitigating potential malware activities that attempt to conceal their presence by self-deleting after execution.

### Possible investigation steps

- Review the alert details to identify the specific file name and path involved in the creation, execution, and deletion sequence. Pay attention to the `file.name` and `file.path` fields.
- Check the `host.id` and `user.id` fields to determine which host and user account were involved in the suspicious activity. This can help in understanding the context and potential impact.
- Investigate the process that executed the file by examining the `process.name` and `process.parent.name` fields. Determine if the parent process is a known shell or script interpreter.
- Use Osquery to list recent file activities in the suspicious directories. Example query: `SELECT * FROM file_events WHERE action IN ('CREATED', 'DELETED') AND path LIKE '/tmp/%' OR path LIKE '/dev/shm/%';`
- Correlate the timestamps of file creation, execution, and deletion to confirm the short timespan and sequence of events. This can help validate the alert.
- Examine the network activity on the host around the time of the alert to identify any potential data exfiltration or command and control communication.
- Check for any other alerts or logs related to the same `host.id` or `user.id` to identify if this is part of a larger attack pattern.
- Investigate the origin of the file by checking if it was downloaded using tools like `curl`, `wget`, or similar, as indicated in the query.
- Review the system's process tree to understand the relationship between the processes involved and identify any anomalies.
- Analyze the system's bash history or other shell histories for the `user.id` involved to uncover any manual commands that might have led to the file's creation and execution.

### False positive analysis

- Legitimate software updates or installations may trigger this rule, as package managers or scripts often download, execute, and clean up files in temporary directories. Users can handle these by creating exceptions for known update processes or package manager activities.
- Automated scripts or cron jobs that perform regular maintenance tasks might also match the rule's criteria. To manage this, users can exclude specific scripts or processes that are verified as non-malicious.
- Development or testing environments where files are frequently created, executed, and deleted as part of normal operations can lead to false positives. Users should consider excluding these environments or specific directories from monitoring if they are known to be secure.
- Backup or synchronization tools that temporarily store files in monitored directories before moving or deleting them can be mistaken for malicious activity. Users can add exceptions for these tools by identifying their specific process names or file paths.
- Security tools or monitoring agents that perform integrity checks or other operations in temporary directories might inadvertently trigger the rule. Users should whitelist these tools by their process names or executable paths to prevent false alerts.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further spread of potential malware.
- Conduct a thorough investigation to identify the source and scope of the compromise, focusing on the files and processes involved in the alert.
- Capture and preserve relevant logs and artifacts for forensic analysis, including file creation, execution, and deletion events.
- Terminate any malicious processes identified during the investigation to halt ongoing malicious activities.
- Remove any malicious files or scripts found in the suspicious directories to prevent re-execution.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response.
- Implement enhanced logging policies to capture detailed file and process activities, especially in temporary directories.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities.
- Restore the system to its operational state by applying clean backups and ensuring all security patches are up to date.
- Harden the system by restricting write and execute permissions in temporary directories and implementing application whitelisting."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"

[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
