[metadata]
creation_date = "2023/10/26"
integration = ["system"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors the syslog log file for messages related to instances of a out-of-tree kernel module load, indicating
the taining of the kernel. Rootkits often leverage kernel modules as their main defense evasion technique. Detecting
tainted kernel module loads is crucial for ensuring system security and integrity, as malicious or unauthorized modules
can compromise the kernel and lead to system vulnerabilities or unauthorized access.
"""
from = "now-9m"
index = ["logs-system.syslog-*"]
language = "kuery"
license = "Elastic License v2"
name = "Tainted Out-Of-Tree Kernel Module Load"
risk_score = 21
rule_id = "51a09737-80f7-4551-a3be-dac8ef5d181a"
setup = """## Setup

This rule requires data coming in from one of the following integrations:
- Filebeat

### Filebeat Setup
Filebeat is a lightweight shipper for forwarding and centralizing log data. Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to Elasticsearch or Logstash for indexing.

#### The following steps should be executed in order to add the Filebeat for the Linux System:
- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.
- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/setup-repositories.html).
- To run Filebeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/running-on-docker.html).
- To run Filebeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/running-on-kubernetes.html).
- For quick start information for Filebeat refer to the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/8.11/filebeat-installation-configuration.html).
- For complete Setup and Run Filebeat information refer to the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/setting-up-and-running.html).

#### Rule Specific Setup Note
- This rule requires the Filebeat System Module to be enabled.
- The system module collects and parses logs created by the system logging service of common Unix/Linux based distributions.
- To run the system module of Filebeat on Linux follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-module-system.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Defense Evasion",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
host.os.type:linux and event.dataset:"system.syslog" and process.name:kernel and 
message:"loading out-of-tree module taints kernel."
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Tainted Out-Of-Tree Kernel Module Load

Kernel modules extend the functionality of the Linux kernel without rebooting the system. While beneficial, out-of-tree modules, not included in the official kernel source, can taint the kernel, posing security risks. Adversaries exploit this by loading malicious modules to maintain persistence or evade detection. The detection rule monitors syslog for specific messages indicating such module loads, helping identify potential rootkit activity.

### Possible investigation steps

- Review the syslog entries around the time of the alert to gather more context about the module load event, focusing on the `event.dataset:"system.syslog"` and `process.name:kernel` fields.
- Identify the specific out-of-tree module that was loaded by examining the `message` field for details about the module name and path.
- Check the system's kernel module directory (e.g., `/lib/modules/$(uname -r)/extra/`) to verify the presence and legitimacy of the module file.
- Use Osquery to list all currently loaded kernel modules and their details with the query: `SELECT name, size, used_by FROM kernel_modules WHERE name = '<module_name>';` to confirm the module's presence and usage.
- Investigate the source and integrity of the module file by checking its creation and modification timestamps, and compare its hash against known good values if available.
- Examine the system's package manager logs or configuration management tools to determine if the module was installed or updated recently as part of a legitimate package or update.
- Review user and process activity logs around the time of the module load to identify any suspicious behavior or unauthorized access attempts.
- Check for any recent changes to system configurations or scripts that could have led to the loading of the module, focusing on boot or startup scripts.
- Investigate any other alerts or anomalies in the system logs that coincide with the module load event to identify potential related malicious activity.
- Consult threat intelligence sources to determine if the module or its characteristics match any known malicious signatures or behaviors.

### False positive analysis

- Legitimate third-party drivers: Some out-of-tree kernel modules are legitimate third-party drivers necessary for specific hardware functionality. These can trigger the rule but do not pose a security threat. Users can create exceptions for these known drivers by identifying their specific module names and excluding them from the detection rule.
- Custom kernel modules: Organizations may develop custom kernel modules for internal use, which can also taint the kernel. These should be documented and whitelisted to prevent false positives. Users should maintain a list of approved custom modules and adjust the detection rule to exclude these from alerts.
- Development and testing environments: In environments where kernel development or testing occurs, frequent loading of out-of-tree modules is expected. Users can configure the rule to ignore these environments by excluding specific hostnames or IP addresses associated with development and testing.
- Vendor-specific modules: Some vendors provide out-of-tree modules for enhanced functionality or performance. Users should verify the legitimacy of these modules and, if deemed safe, add them to an exception list to avoid unnecessary alerts.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further spread or communication with potential command and control servers.
- Conduct a thorough investigation to identify the loaded out-of-tree kernel module, including its origin, purpose, and any associated processes or files.
- Utilize forensic tools to capture memory and disk images for further analysis, ensuring evidence preservation for potential legal or compliance requirements.
- Cross-reference the identified module with known malicious signatures or behaviors using threat intelligence databases and resources.
- Remove the unauthorized or malicious kernel module and any associated files or processes from the system.
- Apply patches and updates to the kernel and all installed software to mitigate vulnerabilities that could be exploited by similar threats.
- Implement enhanced logging policies to capture detailed system and network activity, focusing on kernel module loads and other critical events.
- Integrate security solutions such as intrusion detection systems (IDS) and endpoint detection and response (EDR) tools to improve monitoring and detection capabilities.
- Conduct a post-incident review to identify gaps in security controls and processes, and update incident response plans accordingly.
- Educate and train staff on recognizing and responding to similar threats, emphasizing the importance of maintaining system integrity and security."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1547"
name = "Boot or Logon Autostart Execution"
reference = "https://attack.mitre.org/techniques/T1547/"
[[rule.threat.technique.subtechnique]]
id = "T1547.006"
name = "Kernel Modules and Extensions"
reference = "https://attack.mitre.org/techniques/T1547/006/"



[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1014"
name = "Rootkit"
reference = "https://attack.mitre.org/techniques/T1014/"


[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

