[metadata]
creation_date = "2023/04/11"
integration = ["endpoint", "auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the execution of mount process with hidepid parameter, which can make processes invisible to other users from
the system. Adversaries using Linux kernel version 3.2+ (or RHEL/CentOS v6.5+ above) can hide the process from other
users. When hidepid=2 option is executed to mount the /proc filesystem, only the root user can see all processes and the
logged-in user can only see their own process. This provides a defense evasion mechanism for the adversaries to hide
their process executions from all other commands such as ps, top, pgrep and more. With the Linux kernel hardening
hidepid option all the user has to do is remount the /proc filesystem with the option, which can now be monitored and
detected.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*", "auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Hidden Process via Mount Hidepid"
references = ["https://www.cyberciti.biz/faq/linux-hide-processes-from-other-users/"]
risk_score = 47
rule_id = "dc71c186-9fe4-4437-a4d0-85ebb32b8204"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Endgame",
    "Data Source: Elastic Defend",
    "Data Source: Auditd Manager",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type == "linux" and event.type == "start" and
event.action in ("exec", "exec_event", "executed", "process_started") and
process.name == "mount" and process.args == "/proc" and process.args == "-o" and process.args : "*hidepid=2*" and
not process.parent.command_line like "/opt/cloudlinux/*"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Hidden Process via Mount Hidepid

The hidepid mount option in Linux allows users to restrict visibility of process information in the /proc filesystem, enhancing privacy by limiting process visibility to the owner. Adversaries exploit this by remounting /proc with hidepid=2, concealing their processes from system monitoring tools. The detection rule identifies such activity by monitoring for specific mount commands, excluding benign uses, to flag potential misuse.

### Possible investigation steps

- Review the alert details to confirm the presence of the `mount` command with the `hidepid=2` option in the process arguments, as specified in the query.
- Verify the user account associated with the `mount` command execution to determine if it aligns with expected administrative activity or if it appears suspicious.
- Check the parent process of the `mount` command to understand the context of its execution and identify any potentially malicious parent processes.
- Investigate the command history of the user who executed the `mount` command to identify any other suspicious activities or commands executed around the same time.
- Use Osquery to list all current mounts and their options to verify if `/proc` is currently mounted with `hidepid=2`. Example query: `SELECT * FROM mounts WHERE path = '/proc' AND options LIKE '%hidepid=2%';`
- Examine system logs, such as `/var/log/auth.log` or `/var/log/secure`, for any unusual login attempts or privilege escalation activities around the time of the alert.
- Cross-reference the alert with any other security alerts or anomalies on the host to identify potential patterns or coordinated activities.
- Check for any recent changes to user accounts or group memberships that might indicate unauthorized privilege escalation.
- Review network activity logs for the host to identify any suspicious outbound connections or data exfiltration attempts that might correlate with the timing of the alert.
- Consult with system administrators or the user associated with the alert to verify if the `hidepid=2` mount was part of a legitimate maintenance or configuration task.

### False positive analysis

- System administrators or automated scripts may remount /proc with hidepid=2 for legitimate privacy or security reasons, such as enhancing user data protection on multi-user systems.
- Cloud service providers or hosting environments might use hidepid=2 to prevent users from viewing other tenants' processes, which is a standard practice in shared environments.
- Security tools or compliance frameworks could implement hidepid=2 as part of their hardening guidelines, leading to benign occurrences of this behavior.
- To manage these false positives, users can create exceptions for known benign sources by excluding specific parent command lines or paths, such as "/opt/cloudlinux/*", or by whitelisting trusted administrative scripts and processes.
- Regularly review and update the exclusion list to ensure it reflects the current environment and does not inadvertently allow malicious activity.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Verify the presence of the hidepid=2 mount option by checking the current mount options for the /proc filesystem using the command `mount | grep /proc`.
- If unauthorized use of hidepid=2 is confirmed, identify and terminate any suspicious processes that may be running under the hidden context.
- Review system logs and process execution history to identify the source and timeline of the unauthorized mount command.
- Escalate the incident to the security operations team for further analysis and to determine if additional systems are affected.
- Restore the /proc filesystem to its default mount options by remounting it without the hidepid parameter using `mount -o remount,defaults /proc`.
- Implement enhanced logging policies to capture detailed process execution and mount command activities for future investigations.
- Integrate with security information and event management (SIEM) systems to automate detection and alerting of similar activities.
- Apply system hardening measures, such as restricting mount command usage to authorized users and implementing least privilege access controls.
- Conduct a post-incident review to update incident response plans and improve detection capabilities based on the findings from this incident."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1564"
name = "Hide Artifacts"
reference = "https://attack.mitre.org/techniques/T1564/"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
