[metadata]
creation_date = "2024/11/04"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects memory swap modification events on Linux systems. Memory swap modification can be used to manipulate
the system's memory and potentially impact the system's performance. This behavior is commonly observed in malware that
deploys miner software such as XMRig.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Memory Swap Modification"
risk_score = 21
rule_id = "5e4023e7-6357-4061-ae1c-9df33e78c674"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.

For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.

For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Impact",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and
process.parent.executable != null and
process.name in ("swapon", "swapoff") or (
  process.command_line like ("*vm.swappiness*", "*/proc/sys/vm/swappiness*") and (
    (process.name == "sysctl" and process.args like ("*-w*", "*--write*", "*=*")) or
    (
      process.name in ("bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish") and process.args == "-c" and
      process.command_line like "*echo *"
    )
  )
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Memory Swap Modification

Memory swapping in Linux involves moving data between RAM and disk storage to manage system memory efficiently. Adversaries exploit this by altering swap settings to degrade performance or facilitate resource hijacking, often for cryptomining. The detection rule identifies suspicious processes like `swapon` or `swapoff`, and commands modifying swappiness settings, signaling potential misuse by malware such as XMRig.

### Possible investigation steps

- Review the alert details to identify the specific process name and command line that triggered the alert, focusing on `process.name` and `process.command_line` fields.
- Check the `process.parent.executable` field to determine the parent process of the suspicious activity, which can provide context on how the process was initiated.
- Investigate the user account associated with the process by examining the `user.name` field to determine if the activity was initiated by a legitimate user or a compromised account.
- Use Osquery to list all current swap devices and their usage with the query: `SELECT * FROM memory_info WHERE name LIKE 'Swap%';` to assess if there are any unusual swap activities.
- Examine the system logs, such as `/var/log/syslog` or `/var/log/messages`, for any related entries around the time of the alert to gather additional context.
- Check for any recent changes to the system's swappiness setting by reviewing the `/etc/sysctl.conf` file or using the command `sysctl vm.swappiness` to see if it matches expected configurations.
- Investigate any recent modifications to the `/proc/sys/vm/swappiness` file by checking the file's metadata, such as modification time, using `stat /proc/sys/vm/swappiness`.
- Use Osquery to identify any other processes that have been executed by the same user or parent process recently with the query: `SELECT * FROM processes WHERE uid = (SELECT uid FROM processes WHERE name = 'swapon' OR name = 'swapoff');`.
- Analyze network activity for the host to identify any unusual outbound connections that could indicate resource hijacking, using tools like `netstat` or `ss`.
- Review any other security alerts or logs from the same host or user account to identify patterns or additional indicators of compromise that may correlate with the memory swap modification activity.

### False positive analysis

- Routine system administration tasks can trigger this rule, such as when system administrators manually adjust swap settings for performance tuning or during system maintenance. These actions are typically benign and not indicative of malicious activity.
- Automated scripts or configuration management tools like Ansible, Puppet, or Chef that manage system settings might execute commands that match the rule's criteria, leading to false positives.
- Some Linux distributions or custom setups may include startup scripts that adjust swappiness settings as part of their normal boot process, which could be mistakenly flagged by this rule.
- To manage these false positives, users can create exceptions for known administrative scripts or processes by excluding specific command lines or process names that are verified as non-threatening.
- Implementing a whitelist of trusted users or processes that are allowed to modify swap settings can help reduce false positives while maintaining security monitoring for unauthorized changes.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further resource hijacking and potential lateral movement.
- Investigate the process tree to identify the parent process and any related processes that may have initiated the swap modification.
- Terminate any suspicious processes, especially those related to cryptomining software like XMRig, to halt malicious activity.
- Review system logs and command history to determine the extent of the compromise and identify any unauthorized changes to swap settings.
- Restore swap settings to their default values and ensure that no unauthorized modifications persist.
- Conduct a thorough scan of the system using updated antivirus or anti-malware tools to detect and remove any remaining threats.
- Escalate the incident to the security operations team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging policies to capture detailed process execution and command-line activity for future investigations.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to improve detection capabilities for similar threats.
- Apply system hardening measures, such as restricting access to swap configuration files and limiting the execution of swap-related commands to authorized users only."""

[[rule.threat]]
framework = "MITRE ATT&CK"

  [rule.threat.tactic]
  name = "Impact"
  id = "TA0040"
  reference = "https://attack.mitre.org/tactics/TA0040/"

  [[rule.threat.technique]]
  name = "Resource Hijacking"
  id = "T1496"
  reference = "https://attack.mitre.org/techniques/T1496/"

[[rule.threat]]
framework = "MITRE ATT&CK"

  [rule.threat.tactic]
  name = "Execution"
  id = "TA0002"
  reference = "https://attack.mitre.org/tactics/TA0002/"

  [[rule.threat.technique]]
  name = "Command and Scripting Interpreter"
  id = "T1059"
  reference = "https://attack.mitre.org/techniques/T1059/"

    [[rule.threat.technique.subtechnique]]
    name = "Unix Shell"
    id = "T1059.004"
    reference = "https://attack.mitre.org/techniques/T1059/004/"
