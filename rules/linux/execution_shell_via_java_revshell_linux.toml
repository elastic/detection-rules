[metadata]
creation_date = "2023/07/04"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This detection rule identifies the execution of a Linux shell process from a Java JAR application post an incoming
network connection. This behavior may indicate reverse shell activity via a Java application.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Reverse Shell via Java"
references = [
    "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md",
]
risk_score = 47
rule_id = "5a3d5447-31c9-409a-aed1-72f9921594fd"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id with maxspan=5s
  [network where host.os.type == "linux" and event.action in ("connection_accepted", "connection_attempted") and 
   process.executable : ("/usr/bin/java", "/bin/java", "/usr/lib/jvm/*", "/usr/java/*") and 
   not (destination.ip == null or destination.ip == "0.0.0.0" or cidrmatch(
     destination.ip, "10.0.0.0/8", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.0.0/29",
     "192.0.0.8/32", "192.0.0.9/32", "192.0.0.10/32", "192.0.0.170/32", "192.0.0.171/32", "192.0.2.0/24",
     "192.31.196.0/24", "192.52.193.0/24", "192.168.0.0/16", "192.88.99.0/24", "224.0.0.0/4", "100.64.0.0/10",
     "192.175.48.0/24","198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "240.0.0.0/4", "::1", "FE80::/10",
     "FF00::/8"
    )
  )] by process.entity_id
  [process where host.os.type == "linux" and event.action == "exec" and 
   process.parent.executable : ("/usr/bin/java", "/bin/java", "/usr/lib/jvm/*", "/usr/java/*") and
   process.parent.args : "-jar" and process.name in ("bash", "dash", "ash", "sh", "tcsh", "csh", "zsh", "ksh", "fish")
   and not process.parent.args in (
     "/usr/share/java/jenkins.war", "/etc/remote-iot/services/remoteiot.jar",
     "/usr/lib64/NetExtender.jar", "/usr/lib/jenkins/jenkins.war"
   )] by process.parent.entity_id
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Reverse Shell via Java

Java applications, often run on Linux systems, can be exploited by adversaries to establish reverse shells, allowing remote control over a compromised system. Attackers may execute shell commands via Java processes post-network connection. The detection rule identifies suspicious Java activity by monitoring for shell executions following network connections, excluding benign processes, to flag potential reverse shell attempts.

### Possible investigation steps

- Review the alert details to identify the specific `host.id` and `process.entity_id` involved in the suspicious activity.
- Examine the network connection details, focusing on the `destination.ip` to determine if it is an external or potentially malicious IP address.
- Check the `process.executable` path to confirm if the Java process is running from a legitimate location or if it appears suspicious.
- Investigate the `process.parent.args` to verify if the Java application was executed with the `-jar` argument, which could indicate the execution of a JAR file.
- Cross-reference the `process.name` with known shell processes (e.g., bash, sh, zsh) to confirm if a shell was indeed spawned by the Java process.
- Utilize Osquery to gather more information about the Java process and its parent process. Example query: `SELECT pid, name, path, cmdline FROM processes WHERE pid = <process.entity_id>;`
- Analyze the process tree to understand the parent-child relationship and identify any other processes spawned by the suspicious Java process.
- Check for any recent modifications or unusual files in the directories associated with the Java process using file integrity monitoring tools or Osquery.
- Review system logs and network logs for any additional indicators of compromise or related suspicious activities around the time of the alert.
- Correlate the findings with threat intelligence sources to determine if the IP addresses, file hashes, or other indicators are associated with known threats or campaigns.

### False positive analysis

- Known false positives may arise from legitimate Java applications that execute shell processes as part of their normal operation, such as Jenkins or remote IoT services.
- Users can handle these false positives by adding exceptions for specific Java applications that are known to execute shell commands, such as excluding processes with parent arguments like "/usr/share/java/jenkins.war" or "/etc/remote-iot/services/remoteiot.jar".
- Regularly review and update the list of excluded processes to ensure that only trusted applications are exempted, minimizing the risk of overlooking genuine threats.
- Consider monitoring the frequency and context of these events to distinguish between benign and potentially malicious activities, focusing on unusual patterns or deviations from normal behavior.
- Collaborate with application owners to understand the expected behavior of Java applications within the environment, ensuring that legitimate activities are not mistakenly flagged as threats.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to confirm the presence of a reverse shell by analyzing network logs, process execution details, and any suspicious Java activity.
- Terminate any malicious Java processes and associated shell processes to stop the attacker's access.
- Review and analyze the system's security logs to identify the initial access vector and any other potentially compromised systems.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine the scope of the breach.
- Restore the system from a known good backup to ensure all malicious changes are removed, and verify the integrity of the restored system.
- Implement enhanced logging policies to capture detailed process execution and network connection data for future investigations.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to improve detection capabilities and correlate suspicious activities.
- Apply system hardening measures, such as disabling unnecessary Java features, applying security patches, and enforcing least privilege access controls.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans to improve future response efforts."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1071"
name = "Application Layer Protocol"
reference = "https://attack.mitre.org/techniques/T1071/"


[rule.threat.tactic]
id = "TA0011"
name = "Command and Control"
reference = "https://attack.mitre.org/tactics/TA0011/"

