[metadata]
creation_date = "2024/11/04"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule identifies when a web server is spawned via Python. Attackers may use Python to spawn a web server to
exfiltrate/infiltrate data or to move laterally within a network.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Web Server Spawned via Python"
risk_score = 21
rule_id = "99c2b626-de44-4322-b1f9-157ca408c17e"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and (
  (process.name like "python*" and process.args in ("http.server", "SimpleHTTPServer")) or
  (
    process.name in ("bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish") and
    process.command_line like~ "*python* -m http.server*"
  )
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Web Server Spawned via Python

Python's built-in HTTP server module allows quick web server deployment, often used for testing or file sharing. Adversaries exploit this by launching servers to exfiltrate data or facilitate lateral movement. The detection rule identifies such activity by monitoring process executions on Linux systems, specifically looking for Python or shell commands initiating HTTP servers, indicating potential misuse.

### Possible investigation steps

- Review the alert details to confirm the process name and arguments, ensuring they match the criteria for spawning a web server via Python.
- Check the user account associated with the process execution to determine if it aligns with expected behavior or if it might be compromised.
- Investigate the parent process of the Python or shell command to understand how the web server was initiated and if it was part of a larger script or command sequence.
- Examine the network connections on the host to identify any unusual outbound connections that could indicate data exfiltration.
- Use Osquery to list all active network listeners on the host to verify if the Python web server is currently running:
  ```sql
  SELECT pid, name, port, address FROM listening_ports WHERE pid IN (SELECT pid FROM processes WHERE name LIKE 'python%');
  ```
- Analyze the command line arguments of the process to determine the specific directory being served, which could provide insight into the data being accessed or shared.
- Review system logs for any recent login attempts or changes in user permissions that could suggest unauthorized access.
- Correlate the alert with other security events or alerts from the same host or user to identify potential patterns or related activities.
- Investigate any recent file modifications or creations in the directory being served by the web server to identify potential data staging or tampering.
- Check for any scheduled tasks or cron jobs that might have been set up to automate the execution of the Python web server, indicating a persistent threat.

### False positive analysis

- Development and testing environments often use Python's built-in HTTP server for legitimate purposes, such as serving static files or testing web applications, which can trigger false positives.
- System administrators or developers may use Python's HTTP server for quick file sharing within a secure network, leading to benign alerts.
- Automated scripts or CI/CD pipelines might spawn temporary web servers for testing purposes, which could be mistaken for malicious activity.
- To manage these false positives, users can create exceptions for known development or testing environments by excluding specific hostnames or IP addresses from the detection rule.
- Users can also whitelist certain user accounts or process execution paths that are known to frequently and legitimately use Python's HTTP server.
- Regularly review and update the exclusion list to ensure it aligns with current operational practices and does not inadvertently allow malicious activity.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further data exfiltration or lateral movement.
- Investigate the process execution details, including the user account that initiated the server, to determine if it was authorized or malicious.
- Review system logs and network traffic to identify any data that may have been exfiltrated or any other systems that may have been accessed.
- Terminate the unauthorized Python web server process to stop any ongoing malicious activity.
- Conduct a thorough scan of the system for any additional malicious scripts or tools that may have been deployed by the attacker.
- Reset credentials and review permissions for the user account involved to prevent further unauthorized access.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if other systems are affected.
- Implement enhanced logging policies to capture detailed process execution and network activity for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Apply system hardening measures, such as disabling unnecessary services and enforcing the principle of least privilege, to reduce the attack surface."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"

[[rule.threat.technique.subtechnique]]
id = "T1059.006"
name = "Python"
reference = "https://attack.mitre.org/techniques/T1059/006/"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
name = "Lateral Movement"
id = "TA0008"
reference = "https://attack.mitre.org/tactics/TA0008/"

[[rule.threat.technique]]
id = "T1570"
name = "Lateral Tool Transfer"
reference = "https://attack.mitre.org/techniques/T1570/"
