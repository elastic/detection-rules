[metadata]
creation_date = "2020/04/29"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Users can mark specific files as hidden simply by putting a "." as the first character in the file or folder name.
Adversaries can use this to their advantage to hide files and folders on the system for persistence and defense evasion.
This rule looks for hidden files or folders in common writable directories.
"""
false_positives = [
    """
    Certain tools may create hidden temporary files or directories upon installation or as part of their normal
    behavior. These events can be filtered by the process arguments, username, or process name values.
    """,
]
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
max_signals = 33
name = "Creation of Hidden Files and Directories via CommandLine"
risk_score = 47
rule_id = "b9666521-4742-49ce-9ddc-b8e84c35acae"
setup = """## Setup

This rule requires data coming in from one of the following integrations:
- Elastic Defend
- Auditbeat

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).

### Auditbeat Setup
Auditbeat is a lightweight shipper that you can install on your servers to audit the activities of users and processes on your systems. For example, you can use Auditbeat to collect and centralize audit events from the Linux Audit Framework. You can also use Auditbeat to detect changes to critical files, like binaries and configuration files, and identify potential security policy violations.

#### The following steps should be executed in order to add the Auditbeat on a Linux System:
- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.
- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setup-repositories.html).
- To run Auditbeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-docker.html).
- To run Auditbeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-kubernetes.html).
- For complete “Setup and Run Auditbeat” information refer to the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setting-up-and-running.html).

#### Custom Ingest Pipeline
For versions <8.2, you need to add a custom ingest pipeline to populate `event.ingested` with @timestamp for non-elastic-agent indexes, like auditbeats/filebeat/winlogbeat etc. For more details to add a custom ingest pipeline refer to the [guide](https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and
process.working_directory in ("/tmp", "/var/tmp", "/dev/shm") and
process.args regex~ """\.[a-z0-9_\-][a-z0-9_\-\.]{1,254}""" and
not process.name in (
  "ls", "find", "grep", "git", "jq", "basename", "check_snmp", "snmpget", "snmpwalk", "cc1plus", "snap",
  "command-not-found"
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Creation of Hidden Files and Directories via CommandLine

In Linux environments, files and directories prefixed with a dot (.) are hidden by default, a feature often exploited by adversaries to conceal malicious activities. Attackers may create hidden files in writable directories like /tmp or /var/tmp to evade detection. The detection rule identifies suspicious processes creating such hidden files, excluding benign commands like 'ls' or 'git', thus highlighting potential threats while minimizing false positives.

### Possible investigation steps

- Review the alert details to identify the specific process that triggered the rule, focusing on the `process.name` and `process.args` fields to understand what command was executed.
- Examine the `process.working_directory` field to determine the directory where the hidden file or directory was created, ensuring it matches one of the common writable directories like `/tmp`, `/var/tmp`, or `/dev/shm`.
- Check the `host.os.type` field to confirm the operating system is Linux, as the rule is specifically designed for Linux environments.
- Investigate the parent process of the suspicious process using the `process.parent.name` and `process.parent.args` fields to understand the context in which the hidden file creation was initiated.
- Use Osquery to list all hidden files in the directory where the alert was triggered. Example query: `SELECT * FROM file WHERE directory = '/tmp' AND filename LIKE '.%'`.
- Analyze the contents of the hidden file or directory, if accessible, to determine if it contains malicious code or scripts.
- Review recent system logs and command history for the user associated with the process to identify any unusual or unauthorized activities leading up to the alert.
- Check for any network connections or data exfiltration attempts associated with the process using network monitoring tools or logs.
- Investigate other processes executed by the same user or from the same working directory to identify any additional suspicious activities.
- Correlate the alert with other security events or alerts in the environment to determine if this is part of a larger attack or campaign.

### False positive analysis

- Known false positives for the Creation of Hidden Files and Directories via CommandLine rule include legitimate system and user activities that create hidden files for configuration or temporary purposes. Common examples are software installations or updates that generate hidden files in directories like /tmp or /var/tmp.
- Users can manage these false positives by adding exceptions for specific processes or commands that are known to create hidden files as part of their normal operation. This can be done by updating the exclusion list in the detection rule to include additional benign processes that are identified during routine monitoring.
- Regularly review and update the exclusion list to reflect changes in system behavior or new software deployments that may introduce new benign processes creating hidden files.
- Consider the context of the process creating the hidden file, such as the user account under which the process is running and the typical behavior of that account, to determine if an activity is likely to be a false positive.
- Implement logging and alerting mechanisms to track the frequency and context of hidden file creation events, which can help in distinguishing between legitimate and suspicious activities over time.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify the hidden files and directories created, analyzing their contents and associated processes for malicious indicators.
- Terminate any suspicious processes identified during the investigation that are associated with the creation of hidden files.
- Remove or quarantine the hidden files and directories after confirming they are not legitimate or required for system operations.
- Review and analyze system logs, including process execution and file access logs, to trace the origin and timeline of the malicious activity.
- Escalate the incident to the security operations center (SOC) or incident response team if the activity is part of a broader attack campaign or if advanced persistent threat (APT) involvement is suspected.
- Implement enhanced logging policies to capture detailed process execution and file creation events, ensuring future incidents can be detected and investigated more effectively.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities and provide context for similar threats.
- Restore the system to its operational state by applying necessary patches, updating security configurations, and ensuring all malicious artifacts are removed.
- Harden the system by implementing least privilege access controls, disabling unnecessary services, and regularly auditing writable directories for unauthorized changes."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1564"
name = "Hide Artifacts"
reference = "https://attack.mitre.org/techniques/T1564/"

[[rule.threat.technique.subtechnique]]
id = "T1564.001"
name = "Hidden Files and Directories"
reference = "https://attack.mitre.org/techniques/T1564/001/"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
