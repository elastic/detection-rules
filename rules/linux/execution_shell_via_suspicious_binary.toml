[metadata]
creation_date = "2023/07/05"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This detection rule detects the creation of a shell through a chain consisting of the execution of a suspicious binary
(located in a commonly abused location or executed manually) followed by a network event and ending with a shell being
spawned. Stageless reverse tcp shells display this behaviour. Attackers may spawn reverse shells to establish
persistence onto a target system.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Reverse Shell via Suspicious Binary"
references = [
    "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md",
]
risk_score = 47
rule_id = "fa3a59dc-33c3-43bf-80a9-e8437a922c7f"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id, process.entity_id with maxspan=1s
[ process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and
  process.executable : (
  "./*", "/tmp/*", "/var/tmp/*", "/var/www/*", "/dev/shm/*", "/etc/init.d/*", "/etc/rc*.d/*",
  "/etc/crontab", "/etc/cron.*", "/etc/update-motd.d/*", "/usr/lib/update-notifier/*",
  "/boot/*", "/srv/*", "/run/*", "/root/*", "/etc/rc.local"
   ) and
  process.parent.name : ("bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish") and not
  process.name : ("curl", "wget", "ping", "apt", "dpkg", "yum", "rpm", "dnf", "dockerd") ]
[ network where host.os.type == "linux" and event.type == "start" and event.action in ("connection_attempted", "connection_accepted") and
  process.executable : (
  "./*", "/tmp/*", "/var/tmp/*", "/var/www/*", "/dev/shm/*", "/etc/init.d/*", "/etc/rc*.d/*",
  "/etc/crontab", "/etc/cron.*", "/etc/update-motd.d/*", "/usr/lib/update-notifier/*",
  "/boot/*", "/srv/*", "/run/*", "/root/*", "/etc/rc.local"
   ) and destination.ip != null and destination.ip != "127.0.0.1" and destination.ip != "::1" ]
[ process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and 
  process.name : ("bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish") and 
  process.parent.name : ("bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish") ]
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Reverse Shell via Suspicious Binary

Reverse shells are a common technique used by attackers to gain persistent access to a compromised system. They exploit legitimate shell environments to execute commands remotely. Adversaries often use binaries in unusual directories to initiate these shells, followed by network connections to external IPs. The detection rule identifies this behavior by monitoring for suspicious binary executions, network activities, and shell spawns, flagging potential reverse shell activities.

### Possible investigation steps

- Review the alert details to identify the specific `host.id` and `process.entity_id` involved in the suspicious activity.
- Examine the `process.executable` path to determine if it is located in a commonly abused directory, such as `/tmp/*` or `/var/tmp/*`, which may indicate malicious intent.
- Check the `process.parent.name` to verify if the parent process is a shell, such as `bash` or `sh`, which could suggest a shell was spawned by the suspicious binary.
- Investigate the `destination.ip` in the network event to identify if the connection was made to an external or suspicious IP address, excluding local addresses like `127.0.0.1` or `::1`.
- Use Osquery to gather more information about the suspicious binary. For example, run the following query to list details about the executable: `SELECT * FROM processes WHERE path = '/path/to/suspicious/binary';`
- Analyze the process tree to understand the sequence of events leading to the shell spawn, focusing on the relationship between the suspicious binary and the spawned shell.
- Check for any recent file modifications or creations in the directories where the suspicious binary was executed, which might indicate additional malicious activity.
- Review system logs for any other unusual activities or errors around the time of the alert to gather more context about the potential compromise.
- Investigate the user account associated with the process execution to determine if it has been compromised or is being used maliciously.
- Correlate the findings with other alerts or incidents involving the same `host.id` or `destination.ip` to identify patterns or repeated attempts of reverse shell activities.

### False positive analysis

- Legitimate administrative scripts: System administrators may use scripts located in directories like `/tmp` or `/var/tmp` for maintenance tasks, which could trigger the rule. Users can create exceptions for known scripts by specifying their exact paths or hashes.
- Automated deployment tools: Tools that deploy applications or updates might execute binaries from non-standard directories. Users should identify these tools and exclude their processes from the rule.
- Development and testing activities: Developers might run binaries from temporary directories during testing phases. Users can exclude specific user accounts or processes associated with development activities.
- Backup and recovery operations: Some backup solutions might use temporary directories for storing scripts or binaries. Users should identify these operations and exclude them based on process names or paths.
- Custom monitoring scripts: Organizations may have custom scripts for monitoring or logging that execute from unusual directories. Users can whitelist these scripts by adding exceptions for their specific paths or process names.

### Response and remediation

- Isolate the affected system from the network to prevent further unauthorized access and lateral movement.
- Conduct a thorough investigation to identify the source and scope of the compromise, focusing on the suspicious binary and network connections.
- Terminate any malicious processes identified during the investigation to stop ongoing threats.
- Review and analyze logs from the affected system and network devices to gather evidence and understand the attack vector.
- Remove any unauthorized binaries and scripts from the system, especially those located in commonly abused directories.
- Apply security patches and updates to the operating system and applications to mitigate known vulnerabilities.
- Restore the system from a known good backup if the integrity of the system is in question.
- Implement enhanced logging and monitoring policies to detect similar threats in the future, including network traffic analysis and process execution monitoring.
- Escalate the incident to the appropriate internal teams and, if necessary, external authorities or cybersecurity experts for further analysis and response.
- Harden the system by disabling unnecessary services, enforcing least privilege access, and implementing network segmentation to reduce the attack surface."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1071"
name = "Application Layer Protocol"
reference = "https://attack.mitre.org/techniques/T1071/"


[rule.threat.tactic]
id = "TA0011"
name = "Command and Control"
reference = "https://attack.mitre.org/tactics/TA0011/"

