[metadata]
creation_date = "2023/07/04"
integration = ["auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This detection rule identifies suspicious network traffic patterns associated with UDP reverse shell activity. This
activity consists of a sample of an execve, socket and connect syscall executed by the same process, where the
auditd.data.a0-1 indicate a UDP connection, ending with an egress connection event. An attacker may establish a Linux
UDP reverse shell to bypass traditional firewall restrictions and gain remote access to a target system covertly.
"""
from = "now-9m"
index = ["auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Reverse Shell via UDP"
references = [
    "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md",
    "https://www.elastic.co/security-labs/primer-on-persistence-mechanisms",
    "https://www.elastic.co/security-labs/linux-detection-engineering-with-auditd",
]
risk_score = 47
rule_id = "a5eb21b7-13cc-4b94-9fe2-29bb2914e037"
setup = """## Setup

This rule requires data coming in from one of the following integrations:
- Auditbeat
- Auditd Manager

### Auditbeat Setup
Auditbeat is a lightweight shipper that you can install on your servers to audit the activities of users and processes on your systems. For example, you can use Auditbeat to collect and centralize audit events from the Linux Audit Framework. You can also use Auditbeat to detect changes to critical files, like binaries and configuration files, and identify potential security policy violations.

#### The following steps should be executed in order to add the Auditbeat on a Linux System:
- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.
- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setup-repositories.html).
- To run Auditbeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-docker.html).
- To run Auditbeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-kubernetes.html).
- For complete “Setup and Run Auditbeat” information refer to the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setting-up-and-running.html).

### Auditd Manager Integration Setup
The Auditd Manager Integration receives audit events from the Linux Audit Framework which is a part of the Linux kernel.
Auditd Manager provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system.

#### The following steps should be executed in order to add the Elastic Agent System integration "auditd_manager" on a Linux System:
- Go to the Kibana home page and click “Add integrations”.
- In the query bar, search for “Auditd Manager” and select the integration to see more details about it.
- Click “Add Auditd Manager”.
- Configure the integration name and optionally add a description.
- Review optional and advanced settings accordingly.
- Add the newly installed “auditd manager” to an existing or a new agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
- Click “Save and Continue”.
- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/auditd_manager).

#### Rule Specific Setup Note
Auditd Manager subscribes to the kernel and receives events as they occur without any additional configuration.
However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.
- For this detection rule no additional audit rules are required to be added to the integration.
"""
severity = "medium"
tags = [
    "Data Source: Auditd Manager",
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Execution",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
sample by host.id, process.pid, process.parent.pid
  [process where host.os.type == "linux" and event.type == "start" and event.action == "executed" and process.name : (
    "bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish", "perl", "python*", "nc", "ncat", "netcat", "php*",
    "ruby", "openssl", "awk", "telnet", "lua*", "socat"
    )]
  [process where host.os.type == "linux" and auditd.data.syscall == "socket" and process.name : (
    "bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish", "perl", "python*", "nc", "ncat", "netcat", "php*",
    "ruby", "openssl", "awk", "telnet", "lua*", "socat"
    ) and auditd.data.a1 == "2"]
  [network where host.os.type == "linux" and event.type == "start" and event.action == "connected-to" and
   process.name : (
    "bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish", "perl", "python*", "nc", "ncat", "netcat", "php*",
    "ruby", "openssl", "awk", "telnet", "lua*", "socat"
    ) and network.direction == "egress" and destination.ip != null and
   not cidrmatch(destination.ip, "127.0.0.0/8", "169.254.0.0/16", "224.0.0.0/4", "::1")]
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Reverse Shell via UDP

Reverse shells over UDP exploit the stateless nature of UDP to bypass firewalls, allowing attackers to execute commands remotely. Adversaries may use scripting languages or network tools to initiate these connections. The detection rule identifies such activity by monitoring for specific process executions, UDP socket creation, and unusual outbound connections, flagging potential misuse of these technologies.

### Possible investigation steps

- Review the alert details to identify the specific host and process involved using `host.id`, `process.pid`, and `process.parent.pid`.
- Verify the process name and command line arguments to confirm if it matches known reverse shell patterns, focusing on `process.name` and `event.action`.
- Check the `auditd.data.syscall` for the "socket" call and ensure `auditd.data.a1` indicates a UDP connection (value "2").
- Analyze the network connection details, particularly `network.direction` and `destination.ip`, to identify unusual or unauthorized egress connections.
- Use Osquery to list all active network connections on the host to identify any other suspicious UDP connections:
  ```sql
  SELECT pid, local_address, local_port, remote_address, remote_port, protocol FROM process_open_sockets WHERE protocol = 'udp';
  ```
- Investigate the parent process (`process.parent.pid`) to determine if it was spawned by a legitimate or suspicious process.
- Cross-reference the destination IP address with threat intelligence sources to check for known malicious indicators.
- Examine historical logs for the host to identify any previous similar activities or patterns that might indicate a persistent threat.
- Review user activity on the host around the time of the alert to identify any unauthorized access or actions.
- Check for any recent changes to the system's firewall or security configurations that might have allowed the reverse shell to bypass protections.

### False positive analysis

- Legitimate administrative scripts or tools that use UDP for network diagnostics or configuration may trigger this rule. Users can handle these by identifying and excluding specific scripts or processes that are known to be safe.
- Automated backup or monitoring systems that utilize UDP for communication might be flagged. To manage this, users should create exceptions for these systems by specifying their process names or network patterns.
- Development or testing environments where developers frequently use scripting languages or network tools for legitimate purposes may cause false positives. Users can mitigate this by excluding specific user accounts or IP ranges associated with these environments.
- Custom applications that use UDP for legitimate data transfer could be mistakenly identified as reverse shells. Users should document and exclude these applications by their process names or network behavior.
- Security tools that perform network scans or penetration testing using UDP might be detected. Users can address this by excluding known security tools and their associated processes from the detection rule.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify the source and scope of the compromise, focusing on the processes and network connections flagged by the detection rule.
- Terminate any suspicious processes identified as part of the reverse shell activity to halt ongoing malicious actions.
- Review and analyze system logs, including auditd and network logs, to gather evidence and understand the attack vector and timeline.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if other systems are affected.
- Apply patches and updates to the operating system and any vulnerable applications to mitigate known vulnerabilities exploited by the attacker.
- Implement enhanced logging and monitoring policies to capture detailed process execution and network activity, aiding in future detection and investigation efforts.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities and provide context for similar threats.
- Restore the system from a known good backup to ensure the removal of any persistent threats or backdoors installed by the attacker.
- Conduct a post-incident review to identify gaps in security controls and implement hardening measures, such as restricting outbound UDP traffic and enforcing least privilege access controls."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1071"
name = "Application Layer Protocol"
reference = "https://attack.mitre.org/techniques/T1071/"


[rule.threat.tactic]
id = "TA0011"
name = "Command and Control"
reference = "https://attack.mitre.org/tactics/TA0011/"

