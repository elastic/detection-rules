[metadata]
creation_date = "2023/07/26"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies multiple consecutive login attempts executed by one process targeting a local linux user account within a
short time interval. Adversaries might brute force login attempts across different users with a default wordlist or a
set of customly crafted passwords in an attempt to gain access to these accounts.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Linux Local Account Brute Force Detected"
risk_score = 47
rule_id = "835c0622-114e-40b5-a346-f843ea5d01f1"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id, process.parent.executable, user.id with maxspan=1s
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and process.name == "su" and 
   not process.parent.name in (
     "bash", "dash", "ash", "sh", "tcsh", "csh", "zsh", "ksh", "fish", "clickhouse-server", "ma", "gitlab-runner",
     "updatedb.findutils", "cron", "perl", "sudo", "java", "cloud-app-identify", "ambari-sudo.sh"
   )
  ] with runs=10
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Linux Local Account Brute Force Detected

In Linux environments, the 'su' command is used to switch user accounts, often requiring a password. Adversaries may exploit this by attempting numerous logins in quick succession, using either default or custom password lists, to gain unauthorized access. The detection rule identifies such brute force attempts by monitoring for multiple rapid 'su' executions from a single process, excluding common legitimate parent processes, thus highlighting potential malicious activity.

### Possible investigation steps

- Review the alert details to identify the `host.id`, `process.parent.executable`, and `user.id` involved in the potential brute force attempt to understand the scope and context of the activity.
- Check the process execution history on the affected host to determine if there are any unusual patterns or anomalies associated with the `su` command, focusing on the `process.parent.executable` to identify any uncommon parent processes.
- Investigate the user account (`user.id`) targeted by the brute force attempt to determine if it is a high-value account or if it has been involved in previous suspicious activities.
- Examine the system logs, such as `/var/log/auth.log` or `/var/log/secure`, for additional context around the time of the alert to identify any other suspicious login attempts or related activities.
- Use Osquery to gather more information about the processes running on the host. For example, execute the following query to list all processes with their parent processes: `SELECT pid, name, path, parent FROM processes WHERE name = 'su';`
- Analyze network activity from the host to identify any unusual outbound or inbound connections that may correlate with the timing of the brute force attempts.
- Check for any recent changes in user account configurations or permissions that could indicate unauthorized modifications or preparations for further attacks.
- Review the system's security settings and configurations to ensure that they are aligned with best practices, particularly focusing on password policies and account lockout settings.
- Correlate the alert with other security events or alerts from the same host or user account to identify potential patterns or coordinated attack attempts.
- Consult threat intelligence sources to determine if there are any known campaigns or threat actors that match the tactics, techniques, and procedures (TTPs) observed in the alert, specifically focusing on the MITRE ATT&CK technique T1110 (Brute Force).

### False positive analysis

- Scheduled scripts or automated tasks that require frequent user switching might trigger false positives. These can be managed by identifying the specific scripts or tasks and adding their parent processes to the exclusion list.
- System maintenance activities, such as updates or backups, often involve multiple 'su' commands in a short period. To handle these, ensure that maintenance scripts are run by known and trusted parent processes, which can then be excluded.
- Development environments where developers frequently switch between user accounts for testing purposes may also cause false positives. In such cases, consider excluding the development tools or environments from the detection rule.
- Continuous integration/continuous deployment (CI/CD) pipelines that use 'su' for various tasks might be flagged. To prevent this, identify the CI/CD tools and add them to the list of legitimate parent processes.
- Custom administrative scripts that perform user account checks or management tasks could be mistaken for brute force attempts. Review these scripts and, if they are legitimate, add their parent processes to the exclusion list.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access.
- Review the logs to identify the source of the brute force attempts and determine if any accounts were compromised.
- Reset passwords for any accounts that were targeted, ensuring they are strong and unique.
- Conduct a thorough investigation to determine if the adversary gained access to sensitive data or systems.
- Escalate the incident to the security team and, if necessary, involve legal or law enforcement agencies.
- Implement additional logging and monitoring to detect similar activities in the future, such as enabling detailed audit logs for user authentication attempts.
- Integrate threat intelligence feeds to enhance detection capabilities and stay informed about emerging threats.
- Restore the system to its operational state by applying any necessary patches and updates, and verifying system integrity.
- Harden the system by disabling unnecessary services, enforcing the principle of least privilege, and implementing multi-factor authentication.
- Educate users on security best practices, including recognizing phishing attempts and the importance of using strong passwords."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1110"
name = "Brute Force"
reference = "https://attack.mitre.org/techniques/T1110/"
[[rule.threat.technique.subtechnique]]
id = "T1110.001"
name = "Password Guessing"
reference = "https://attack.mitre.org/techniques/T1110/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

