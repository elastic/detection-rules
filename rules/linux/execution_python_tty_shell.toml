[metadata]
creation_date = "2020/04/15"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies when a terminal (tty) is spawned via Python. Attackers may upgrade a simple reverse shell to a fully
interactive tty after obtaining initial access to a host.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*"]
language = "eql"
license = "Elastic License v2"
name = "Interactive Terminal Spawned via Python"
risk_score = 73
rule_id = "d76b02ef-fc95-4001-9297-01cb7412232f"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Data Source: Elastic Endgame",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action in ("exec", "exec_event") and
(
  (process.parent.name : "python*" and process.name in ("bash", "dash", "ash", "sh", "tcsh", "csh", "zsh", "ksh",
   "fish") and process.parent.args_count >= 3 and process.parent.args : "*pty.spawn*" and process.parent.args : "-c") or
  (process.parent.name : "python*" and process.name in ("bash", "dash", "ash", "sh", "tcsh", "csh", "zsh", "ksh",
   "fish") and process.args : "*sh" and process.args_count == 1 and process.parent.args_count == 1)
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Interactive Terminal Spawned via Python

Python's ability to spawn interactive terminals is a powerful feature often used for legitimate administrative tasks. However, adversaries can exploit this to escalate a basic reverse shell into a fully interactive terminal, enhancing their control over a compromised system. The detection rule identifies such abuse by monitoring processes where Python spawns shell environments, focusing on specific patterns in process arguments and parent-child relationships indicative of malicious activity.

### Possible investigation steps

- Review the alert details to confirm the presence of a Python process spawning a shell, focusing on the `process.parent.name` and `process.name` fields to verify the parent-child relationship.
- Examine the `process.parent.args` field to identify the specific command used, looking for patterns like `*pty.spawn*` and `-c` that indicate an attempt to spawn an interactive terminal.
- Check the `process.args` field for any suspicious shell commands that might have been executed, especially if the `args_count` is minimal, suggesting a direct shell invocation.
- Investigate the `host.os.type` to ensure the alert is relevant to a Linux environment, as the rule is specifically designed for Linux systems.
- Use Osquery to gather additional context about the processes involved. For example, run the following query to list all processes spawned by Python that match the suspicious criteria:
  ```sql
  SELECT pid, name, cmdline, parent FROM processes WHERE parent IN (SELECT pid FROM processes WHERE name LIKE 'python%') AND name IN ('bash', 'dash', 'ash', 'sh', 'tcsh', 'csh', 'zsh', 'ksh', 'fish');
  ```
- Analyze the `event.type` and `event.action` fields to confirm that the process was indeed started and executed, which aligns with the rule's focus on process initiation.
- Correlate the alert with any recent network activity logs to identify potential reverse shell connections or data exfiltration attempts.
- Review user activity logs to determine if the Python process was initiated by a legitimate user or if it might be indicative of compromised credentials.
- Check for any recent changes in user privileges or group memberships that could have facilitated the execution of such commands.
- Investigate any other alerts or anomalies on the host around the same timeframe to identify potential lateral movement or further exploitation attempts.

### False positive analysis

- System administrators and developers often use Python scripts to automate tasks that require spawning shell environments, which can trigger this detection rule. These activities are typically benign and part of routine operations.
- Automated deployment tools and configuration management systems like Ansible or Puppet may execute Python scripts that spawn shells as part of their normal operation, leading to false positives.
- Security tools and monitoring solutions might use Python scripts to perform checks or gather system information, inadvertently matching the detection criteria.
- To manage these false positives, users can create exceptions for known scripts or processes by whitelisting specific parent process names or arguments that are verified as non-threatening.
- Implementing a baseline of normal behavior for Python processes in the environment can help distinguish between legitimate and suspicious activity, allowing for more accurate tuning of the detection rule.
- Regularly reviewing and updating the list of exceptions based on changes in administrative practices or tool usage can help maintain the effectiveness of the detection rule while minimizing false positives.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to confirm the presence of a reverse shell and identify any additional compromised systems or accounts.
- Terminate any suspicious processes identified by the detection rule, particularly those involving Python spawning shell environments.
- Review and analyze logs from the affected system and network devices to trace the attacker's actions and entry point.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response.
- Implement enhanced logging policies to capture detailed process execution and network activity, focusing on command and scripting interpreter usage.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Restore the system to its operational state by applying clean backups and ensuring all security patches and updates are installed.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Harden the environment by implementing least privilege access controls, disabling unnecessary services, and conducting regular security awareness training for users."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.006"
name = "Python"
reference = "https://attack.mitre.org/techniques/T1059/006/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

