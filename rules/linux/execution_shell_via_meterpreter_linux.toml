[metadata]
creation_date = "2023/08/10"
integration = ["auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This detection rule identifies a sample of suspicious Linux system file reads used for system fingerprinting, leveraged
by the Metasploit Meterpreter shell to gather information about the target that it is executing its shell on. Detecting
this pattern is indicative of a successful meterpreter shell connection.
"""
from = "now-9m"
index = ["auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Meterpreter Reverse Shell"
references = [
    "https://www.elastic.co/security-labs/primer-on-persistence-mechanisms",
    "https://www.elastic.co/security-labs/linux-detection-engineering-with-auditd",
]
risk_score = 47
rule_id = "5c895b4f-9133-4e68-9e23-59902175355c"
setup = """## Setup

This rule requires data coming in from one of the following integrations:
- Auditbeat
- Auditd Manager

### Auditbeat Setup
Auditbeat is a lightweight shipper that you can install on your servers to audit the activities of users and processes on your systems. For example, you can use Auditbeat to collect and centralize audit events from the Linux Audit Framework. You can also use Auditbeat to detect changes to critical files, like binaries and configuration files, and identify potential security policy violations.

#### The following steps should be executed in order to add the Auditbeat on a Linux System:
- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.
- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setup-repositories.html).
- To run Auditbeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-docker.html).
- To run Auditbeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-kubernetes.html).
- For complete “Setup and Run Auditbeat” information refer to the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setting-up-and-running.html).

### Auditd Manager Integration Setup
The Auditd Manager Integration receives audit events from the Linux Audit Framework which is a part of the Linux kernel.
Auditd Manager provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system.

#### The following steps should be executed in order to add the Elastic Agent System integration "auditd_manager" on a Linux System:
- Go to the Kibana home page and click “Add integrations”.
- In the query bar, search for “Auditd Manager” and select the integration to see more details about it.
- Click “Add Auditd Manager”.
- Configure the integration name and optionally add a description.
- Review optional and advanced settings accordingly.
- Add the newly installed “auditd manager” to an existing or a new agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
- Click “Save and Continue”.
- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/auditd_manager).

#### Rule Specific Setup Note
Auditd Manager subscribes to the kernel and receives events as they occur without any additional configuration.
However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.
- For this detection rule the following additional audit rules are required to be added to the integration:
  -w /proc/net/ -p r -k audit_proc
  -w /etc/machine-id -p wa -k machineid
  -w /etc/passwd -p wa -k passwd
"""
severity = "medium"
tags = [
    "Data Source: Auditd Manager",
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Execution",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
sample by host.id, process.pid, user.id
  [file where host.os.type == "linux" and auditd.data.syscall == "open" and auditd.data.a2 == "1b6" and file.path == "/etc/machine-id"]
  [file where host.os.type == "linux" and auditd.data.syscall == "open" and auditd.data.a2 == "1b6" and file.path == "/etc/passwd"]
  [file where host.os.type == "linux" and auditd.data.syscall == "open" and auditd.data.a2 == "1b6" and file.path == "/proc/net/route"]
  [file where host.os.type == "linux" and auditd.data.syscall == "open" and auditd.data.a2 == "1b6" and file.path == "/proc/net/ipv6_route"]
  [file where host.os.type == "linux" and auditd.data.syscall == "open" and auditd.data.a2 == "1b6" and file.path == "/proc/net/if_inet6"]
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Meterpreter Reverse Shell

Meterpreter is a powerful payload within the Metasploit framework, often used by attackers to gain control over a compromised system. It operates by executing commands and gathering system information stealthily. Adversaries exploit it to fingerprint systems by reading specific files like `/etc/passwd` and network routes. The detection rule identifies these suspicious file access patterns, signaling a potential Meterpreter shell presence by monitoring system calls related to file reads on Linux systems.

### Possible investigation steps

- Review the alert details to identify the specific `host.id`, `process.pid`, and `user.id` associated with the suspicious file access.
- Verify the legitimacy of the process by checking the `process.pid` against known legitimate processes on the system.
- Use Osquery to gather more information about the process by running: `SELECT * FROM processes WHERE pid = <process.pid>;` to check the command line, parent process, and other attributes.
- Investigate the `user.id` to determine if the user account is legitimate and if it has been compromised or misused.
- Check the system logs for any unusual login activities or privilege escalations related to the `user.id`.
- Examine the network connections of the host using Osquery: `SELECT * FROM socket_events WHERE pid = <process.pid>;` to identify any suspicious outbound connections.
- Analyze the file access patterns on the host to see if other sensitive files have been accessed using: `SELECT * FROM file_events WHERE path IN ('/etc/passwd', '/etc/machine-id', '/proc/net/route', '/proc/net/ipv6_route', '/proc/net/if_inet6');`
- Correlate the timestamps of the suspicious file accesses with other system events to identify any related activities or anomalies.
- Investigate any recent changes to the system configuration or installed software that could have introduced vulnerabilities.
- Consult threat intelligence sources to determine if there are any known campaigns or indicators of compromise associated with the observed behavior.

### False positive analysis

- Legitimate system administration tools or scripts may access files like `/etc/passwd` and network routes for configuration or monitoring purposes, leading to false positives. 
- Automated backup or inventory management software might read these files to gather system information, which can trigger the detection rule.
- Security monitoring tools that perform regular checks on system files and network configurations could also mimic the behavior of a Meterpreter shell.
- To manage these false positives, users can create exceptions for known benign processes or users by excluding specific process IDs or user IDs from the detection rule.
- Regularly review and update the list of exceptions to ensure that only trusted activities are excluded, maintaining the effectiveness of the detection rule.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access and lateral movement.
- Conduct a thorough investigation to confirm the presence of a Meterpreter shell by analyzing system logs, network traffic, and any suspicious processes or connections.
- Terminate any malicious processes identified during the investigation to stop ongoing malicious activities.
- Change all passwords and credentials that may have been compromised, especially those with elevated privileges.
- Restore the system from a known good backup to ensure all malicious changes are removed, and verify the integrity of the restored system.
- Implement enhanced logging and monitoring policies to capture detailed system and network activity, focusing on file access and process execution.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to improve detection capabilities and correlate alerts with known threat patterns.
- Apply security patches and updates to the operating system and all installed software to mitigate known vulnerabilities.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Educate users and administrators on recognizing phishing attempts and other common attack vectors to reduce the risk of future incidents."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1071"
name = "Application Layer Protocol"
reference = "https://attack.mitre.org/techniques/T1071/"


[rule.threat.tactic]
id = "TA0011"
name = "Command and Control"
reference = "https://attack.mitre.org/tactics/TA0011/"

