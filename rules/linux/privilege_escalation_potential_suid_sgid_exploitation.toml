[metadata]
creation_date = "2024/06/17"
integration = ["endpoint"]
maturity = "production"
min_stack_version = "8.16.0"
min_stack_comments = "Breaking change at 8.16.0 for the Endpoint Integration with respect to ecs field process.group.id"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies instances where a process is executed with user/group ID 0 (root), and a real user/group ID that is not 0.
This is indicative of a process that has been granted SUID/SGID permissions, allowing it to run with elevated
privileges. Attackers may leverage a misconfiguration for exploitation in order to escalate their privileges to root, or
establish a backdoor for persistence.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Privilege Escalation via SUID/SGID"
references = [
    "https://gtfobins.github.io/#+suid",
    "https://www.elastic.co/security-labs/primer-on-persistence-mechanisms",
]
risk_score = 47
rule_id = "28eb3afe-131d-48b0-a8fc-9784f3d54f3c"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and (
  (process.user.id == "0" and process.real_user.id != "0") or 
  (process.group.id == "0" and process.real_group.id != "0")
) and (
  process.name in (
    "aa-exec", "ab", "agetty", "alpine", "ar", "arj", "arp", "as", "ascii-xfr", "ash", "aspell",
    "atobm", "awk", "base32", "base64", "basenc", "basez", "bash", "bc", "bridge", "busctl",
    "busybox", "bzip2", "cabal", "capsh", "cat", "choom", "chown", "chroot", "clamscan", "cmp",
    "column", "comm", "cp", "cpio", "cpulimit", "csh", "csplit", "csvtool", "cupsfilter", "curl",
    "cut", "dash", "date", "dd", "debugfs", "dialog", "diff", "dig", "distcc", "dmsetup", "docker",
    "dosbox", "ed", "efax", "elvish", "emacs", "env", "eqn", "espeak", "expand", "expect", "file",
    "find", "fish", "flock", "fmt", "fold", "gawk", "gcore", "gdb", "genie", "genisoimage", "gimp",
    "grep", "gtester", "gzip", "hd", "head", "hexdump", "highlight", "hping3", "iconv", "install",
    "ionice", "ispell", "jjs", "join", "jq", "jrunscript", "julia", "ksh", "ksshell", "kubectl",
    "ld.so", "less", "links", "logsave", "look", "lua", "make", "mawk", "minicom", "more",
    "mosquitto", "msgattrib", "msgcat", "msgconv", "msgfilter", "msgmerge", "msguniq", "multitime",
    "mv", "nasm", "nawk", "ncftp", "nft", "nice", "nl", "nm", "nmap", "node", "nohup", "ntpdate",
    "od", "openssl", "openvpn", "pandoc", "paste", "perf", "perl", "pexec", "pg", "php", "pidstat",
    "pr", "ptx", "python", "rc", "readelf", "restic", "rev", "rlwrap", "rsync", "rtorrent",
    "run-parts", "rview", "rvim", "sash", "scanmem", "sed", "setarch", "setfacl", "setlock", "shuf",
    "soelim", "softlimit", "sort", "sqlite3", "ss", "ssh-agent", "ssh-keygen", "ssh-keyscan",
    "sshpass", "start-stop-daemon", "stdbuf", "strace", "strings", "sysctl", "systemctl", "tac",
    "tail", "taskset", "tbl", "tclsh", "tee", "terraform", "tftp", "tic", "time", "timeout", "troff",
    "ul", "unexpand", "uniq", "unshare", "unsquashfs", "unzip", "update-alternatives", "uudecode",
    "uuencode", "vagrant", "varnishncsa", "view", "vigr", "vim", "vimdiff", "vipw", "w3m", "watch",
    "wc", "wget", "whiptail", "xargs", "xdotool", "xmodmap", "xmore", "xxd", "xz", "yash", "zsh",
    "zsoelim"
  ) or 
  process.name == "ip" and (
    (process.args == "-force" and process.args in ("-batch", "-b")) or (process.args == "exec")
  )
) and not process.parent.name == "spine"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Privilege Escalation via SUID/SGID

SUID/SGID are Unix permissions that allow users to execute files with the file owner's privileges, often root. Adversaries exploit misconfigured SUID/SGID binaries to gain elevated access. The detection rule identifies processes running with root privileges but initiated by non-root users, flagging potential misuse of SUID/SGID permissions for privilege escalation.

### Possible investigation steps

- Review the alert details to identify the specific process name and arguments that triggered the alert. Pay special attention to the `process.name` and `process.args` fields.
- Verify the user context by checking the `process.user.id` and `process.real_user.id` fields to confirm the discrepancy in user IDs, indicating potential misuse of SUID/SGID permissions.
- Examine the `process.group.id` and `process.real_group.id` fields to identify any group ID discrepancies that might suggest SGID exploitation.
- Investigate the parent process by reviewing the `process.parent.name` field to understand the process hierarchy and determine if the execution chain is suspicious.
- Use Osquery to list all SUID/SGID binaries on the system with the following query: `SELECT path, mode FROM file WHERE mode & 4000 OR mode & 2000;` to identify potential misconfigurations.
- Cross-reference the list of SUID/SGID binaries with the process name from the alert to determine if the binary is expected to have these permissions.
- Check system logs for any recent changes to SUID/SGID binaries or user accounts that might indicate tampering or privilege escalation attempts.
- Investigate the command-line arguments used by the process to determine if they are typical for the binary in question or if they suggest malicious intent.
- Review the system's user and group configurations to ensure there are no unauthorized changes or additions that could facilitate privilege escalation.
- Analyze network activity associated with the process to identify any external connections or data exfiltration attempts that might be related to the privilege escalation.

### False positive analysis

- Some legitimate administrative tasks may trigger the detection rule, such as system maintenance scripts or software updates that require elevated privileges. These tasks often run with SUID/SGID permissions but are not malicious.
- Automated backup processes or monitoring tools that require root access might also be flagged. These processes are typically scheduled and can be verified by checking their source and purpose.
- Developers or system administrators using certain tools for legitimate purposes, like debugging or performance monitoring, may inadvertently trigger the rule. Tools like `gdb`, `strace`, or `perf` are common in such scenarios.
- To manage these false positives, users can create exceptions for known benign processes by adding them to an exclusion list. This can be done by identifying the specific process names and arguments that are frequently flagged but are part of routine operations.
- Regularly review and update the exclusion list to ensure it reflects the current environment and operational needs, minimizing unnecessary alerts while maintaining security vigilance.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further exploitation or lateral movement by the attacker.
- Investigate the process and user account involved in the alert to determine if the SUID/SGID permissions were intentionally set or misconfigured.
- Review system logs and audit trails to identify any unauthorized access or changes made by the process, focusing on the time frame around the alert.
- Remove or correct the SUID/SGID permissions on the identified binary if they are not required for legitimate operations.
- Conduct a thorough scan of the system for any additional signs of compromise, such as unexpected user accounts, scheduled tasks, or backdoors.
- Restore the system from a known good backup if unauthorized changes or malware are detected, ensuring that the backup is free from compromise.
- Implement stricter access controls and permissions management to prevent unauthorized changes to SUID/SGID binaries in the future.
- Enhance logging and monitoring to include detailed process execution and privilege escalation attempts, integrating with a SIEM for real-time alerting.
- Educate users and administrators on the risks associated with SUID/SGID binaries and the importance of maintaining secure configurations.
- Report the incident to relevant internal teams and, if necessary, external authorities or partners, following organizational policies and legal requirements."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1068"
name = "Exploitation for Privilege Escalation"
reference = "https://attack.mitre.org/techniques/T1068/"

[[rule.threat.technique]]
id = "T1548"
name = "Abuse Elevation Control Mechanism"
reference = "https://attack.mitre.org/techniques/T1548/"

[[rule.threat.technique.subtechnique]]
id = "T1548.001"
name = "Setuid and Setgid"
reference = "https://attack.mitre.org/techniques/T1548/001/"

[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
