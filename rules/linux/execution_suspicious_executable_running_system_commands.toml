[metadata]
creation_date = "2023/06/14"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for the execution of several commonly used system commands executed by a previously unknown
executable located in commonly abused directories. An alert from this rule can indicate the presence of potentially
malicious activity, such as the execution of unauthorized or suspicious processes attempting to run malicious code.
Detecting and investigating such behavior can help identify and mitigate potential security threats, protecting the
system and its data from potential compromise.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*"]
language = "kuery"
license = "Elastic License v2"
name = "Suspicious System Commands Executed by Previously Unknown Executable"
risk_score = 21
rule_id = "e9001ee6-2d00-4d2f-849e-b8b1fb05234c"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Data Source: Elastic Endgame",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "new_terms"
query = '''
host.os.type:linux and event.category:process and event.action:(exec or exec_event or fork or fork_event) and
process.executable:(* and (
  /etc/crontab or /bin/* or /boot/* or /dev/shm/* or /etc/cron.*/* or /etc/init.d/* or /etc/rc*.d/* or /etc/update-motd.d/* or
  /home/*/.* or /tmp/* or /usr/bin/* or /usr/lib/update-notifier/* or /usr/share/* or /var/tmp/*
) and not /tmp/go-build*) and
process.args:(hostname or id or ifconfig or ls or netstat or ps or pwd or route or top or uptime or whoami) and
not (process.name:
  (apt or dnf or docker or dockerd or dpkg or hostname or id or ls or netstat or ps or pwd or rpm or snap or
  snapd or sudo or top or uptime or which or whoami or yum) or
process.parent.executable:(
  /opt/cassandra/bin/cassandra or /opt/nessus/sbin/nessusd or /opt/nessus_agent/sbin/nessus-agent-module or /opt/puppetlabs/puppet/bin/puppet or
  /opt/puppetlabs/puppet/bin/ruby or /usr/libexec/platform-python or /usr/local/cloudamize/bin/CCAgent or /usr/sbin/sshd or /bin/* or
  /etc/network/* or /opt/Elastic/* or /opt/TrendMicro* or /opt/aws/* or /opt/eset/* or /opt/rapid7/* or /run/containerd/* or /run/k3s/* or
  /snap/* or /tmp/dpkg-licenses* or /tmp/newroot/* or /usr/bin/* or /var/lib/amagent/* or /var/lib/docker/* or /vz/*
  ) or
  process.executable:(/run/containerd/* or /srv/snp/docker/* or /tmp/.criu*)
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious System Commands Executed by Previously Unknown Executable

In Linux environments, system commands are essential for managing processes and configurations. Adversaries exploit this by executing commands via unknown executables in vulnerable directories, aiming to run unauthorized code. The detection rule identifies such anomalies by monitoring command executions from unfamiliar sources, excluding known safe processes, thus highlighting potential threats for further investigation.

### Possible investigation steps

- Review the alert details to identify the specific unknown executable and the directory from which it was executed. Pay close attention to the `process.executable` field to determine the exact path.
- Examine the `process.args` field to understand the specific system commands that were executed. This can provide insight into the potential intent of the executable.
- Check the `process.parent.executable` field to identify the parent process that initiated the suspicious executable. This can help determine if the parent process is legitimate or potentially compromised.
- Use Osquery to list all processes running from the directory of the suspicious executable. Example query: `SELECT pid, name, path FROM processes WHERE path LIKE '/tmp/%';` to identify other potentially malicious processes.
- Investigate the file attributes and metadata of the unknown executable using Osquery. Example query: `SELECT * FROM file WHERE path = '/path/to/suspicious/executable';` to gather information such as file size, creation time, and modification time.
- Check the system logs for any recent changes or anomalies around the time the suspicious executable was first observed. This can help identify how the executable was introduced to the system.
- Analyze network activity associated with the suspicious process using network monitoring tools or logs. Look for unusual outbound connections or data transfers.
- Review user activity logs to determine if any legitimate user accounts were involved in executing or creating the suspicious executable. This can help identify potential insider threats or compromised accounts.
- Cross-reference the suspicious executable and its hash against threat intelligence databases to check for known malware signatures or related threat actor activity.
- Investigate other systems within the network for similar suspicious activity, focusing on the same directories and system commands, to assess if the threat is isolated or part of a broader attack.

### False positive analysis

- Known false positives may arise from legitimate administrative scripts or tools that are executed from directories typically associated with suspicious activity, such as `/tmp` or `/var/tmp`. These scripts might be part of routine maintenance or monitoring tasks.
- Developers or system administrators might run custom scripts from their home directories, which could trigger alerts if these scripts execute common system commands.
- Automated deployment tools or configuration management systems might temporarily place executables in monitored directories during updates or installations, leading to false positives.
- To manage these false positives, users can create exceptions for specific scripts or executables by adding them to the exclusion list in the detection rule. This can be done by specifying the full path of the known safe executable or script.
- Users should regularly review and update the exclusion list to ensure that only verified and non-threatening processes are excluded, maintaining a balance between security and operational efficiency.
- It is important to document any exceptions made to the rule to ensure that all team members are aware of the changes and the rationale behind them, which helps in maintaining a secure environment.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation of the alert by reviewing the process execution details, including the executable path, arguments, and parent process, to confirm malicious activity.
- Terminate any suspicious processes identified during the investigation to halt potential malicious actions.
- Analyze system logs and network traffic to identify any additional indicators of compromise or related suspicious activities.
- Escalate the incident to the security operations team if the investigation confirms a breach or if the scope of the attack is beyond initial containment efforts.
- Restore the system to its operational state by removing any unauthorized executables and ensuring all system files are intact and unaltered.
- Implement enhanced logging policies to capture detailed process execution and network activity for future investigations.
- Integrate threat intelligence feeds and security tools to improve detection capabilities and correlate alerts with known threat actors and tactics.
- Apply system hardening measures, such as restricting executable permissions in commonly abused directories and implementing application whitelisting.
- Review and update security policies and procedures to address any gaps identified during the incident response and ensure better preparedness for future threats."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"

[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.parent.executable"]

[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"
