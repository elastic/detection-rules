[metadata]
creation_date = "2024/06/26"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects child processes spawned by Git hooks. Git hooks are scripts that Git executes before or after events
such as commit, push, and receive. The rule identifies child processes spawned by Git hooks that are not typically
spawned by the Git process itself. This behavior may indicate an attacker attempting to hide malicious activity by
leveraging the legitimate Git process to execute unauthorized commands.
"""
from = "now-9m"
index = ["logs-endpoint.events.process*"]
language = "eql"
license = "Elastic License v2"
name = "Git Hook Child Process"
references = [
    "https://git-scm.com/docs/githooks/2.26.0",
    "https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms",
]
risk_score = 21
rule_id = "7ce5e1c7-6a49-45e6-a101-0720d185667f"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Execution",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and process.parent.name in (
  "applypatch-msg", "commit-msg", "fsmonitor-watchman", "post-update", "post-checkout", "post-commit",
  "pre-applypatch", "pre-commit", "pre-merge-commit", "prepare-commit-msg", "pre-push", "pre-rebase", "pre-receive",
  "push-to-checkout", "update", "post-receive", "pre-auto-gc", "post-rewrite", "sendemail-validate", "p4-pre-submit",
  "post-index-change", "post-merge", "post-applypatch"
) and (
  process.name in ("nohup", "setsid", "disown", "bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish") or 
  process.name : ("php*", "perl*", "ruby*", "lua*") or 
  process.executable : (
    "/boot/*", "/dev/shm/*", "/etc/cron.*/*", "/etc/init.d/*", "/etc/update-motd.d/*",
    "/run/*", "/srv/*", "/tmp/*", "/var/tmp/*", "/var/log/*"
  )
) and not process.name in ("git", "dirname")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Git Hook Child Process

Git hooks are scripts that automate tasks during Git operations like commits and pushes. While they enhance workflow efficiency, adversaries can exploit them to execute unauthorized commands by embedding malicious scripts. The detection rule identifies unusual child processes spawned by Git hooks, focusing on atypical scripts and executables, thus flagging potential misuse and aiding in threat detection.

### Possible investigation steps

- Review the alert details to identify the specific Git hook that triggered the alert by examining the `process.parent.name` field.
- Check the `process.name` and `process.executable` fields to determine the nature of the child process spawned by the Git hook and assess if it aligns with typical usage patterns.
- Investigate the user account associated with the process by examining the `user.name` field to determine if the activity is expected or if the account may have been compromised.
- Use Osquery to list all Git hooks present in the repository to identify any unauthorized or suspicious scripts. Example query: `SELECT * FROM file WHERE path LIKE '/path/to/repo/.git/hooks/%';`
- Examine the contents of the Git hook script that triggered the alert to identify any embedded malicious commands or unusual modifications.
- Review recent commit history and changes in the repository to identify any unauthorized modifications that could indicate tampering with Git hooks.
- Analyze the process tree to understand the sequence of events leading to the execution of the suspicious child process, focusing on the `process.parent.name` and `process.name` fields.
- Check system logs for any additional context around the time of the alert, such as login events or other process executions, to correlate with the suspicious activity.
- Investigate the network activity associated with the process by reviewing network logs or using network monitoring tools to identify any suspicious outbound connections.
- Consult with the repository owner or development team to verify if the detected activity aligns with any recent changes or deployments, ensuring it is not a false positive.

### False positive analysis

- Developers often use custom scripts in Git hooks for legitimate purposes, such as automating testing or deployment processes, which may trigger the rule. To handle this, users can create exceptions for specific scripts or processes that are known to be safe and frequently used in their development environment.
- Continuous Integration/Continuous Deployment (CI/CD) systems might execute scripts as part of their workflow, leading to false positives. Users should identify and whitelist these processes to prevent unnecessary alerts.
- Some development environments or tools might use shell scripts or other scripting languages that match the rule's criteria. Users can exclude these known benign processes by adding them to an exception list, ensuring they are not flagged as suspicious.
- In environments where developers frequently use temporary directories for legitimate purposes, processes executed from these locations might be flagged. Users should review and whitelist specific directories or processes that are consistently used for non-malicious activities.
- If certain processes are consistently flagged but are known to be part of regular operations, users can adjust the rule to exclude these processes by adding them to the list of exceptions, ensuring that only truly suspicious activities are highlighted.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify the scope of the compromise, focusing on the specific Git hooks and child processes flagged by the detection rule.
- Review the contents of the Git hooks to identify any unauthorized or malicious scripts and remove them.
- Analyze system logs and process execution history to trace the origin of the malicious activity and identify any additional compromised systems.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the attack is part of a larger campaign.
- Restore the system to a known good state by reinstalling the operating system and applications from trusted sources, ensuring all patches and updates are applied.
- Implement enhanced logging policies to capture detailed process execution and network activity, aiding in future investigations.
- Integrate security tools such as endpoint detection and response (EDR) solutions to monitor for similar threats and provide real-time alerts.
- Educate development and operations teams on secure Git practices, emphasizing the importance of monitoring and controlling Git hook scripts.
- Apply hardening measures by restricting write permissions to Git hook directories and implementing strict access controls to minimize the risk of unauthorized modifications."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

