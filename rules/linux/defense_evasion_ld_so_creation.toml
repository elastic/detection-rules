[metadata]
creation_date = "2024/12/16"
integration = ["endpoint", "sentinel_one_cloud_funnel"]
maturity = "production"
min_stack_comments = "Breaking change at 8.13.0 for SentinelOne Integration."
min_stack_version = "8.13.0"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects the creation of the dynamic linker (ld.so) file. The dynamic linker is used to load shared libraries
needed by an executable. Attackers may attempt to replace the dynamic linker with a malicious version to execute
arbitrary code.
"""
from = "now-9m"
index = ["logs-endpoint.events.file*", "logs-sentinel_one_cloud_funnel.*", "endgame-*"]
language = "eql"
license = "Elastic License v2"
name = "Dynamic Linker (ld.so) Creation"
risk_score = 21
rule_id = "06d555e4-c8ce-4d90-90e1-ec7f66df5a6a"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Tactic: Execution",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
    "Data Source: SentinelOne",
    "Data Source: Elastic Endgame",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
file where host.os.type == "linux" and event.type == "creation" and process.executable != null and
file.path like~ ("/lib/ld-linux*.so*", "/lib64/ld-linux*.so*", "/usr/lib/ld-linux*.so*", "/usr/lib64/ld-linux*.so*") and
not process.name in ("dockerd", "yum", "dnf", "microdnf", "pacman")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Dynamic Linker (ld.so) Creation

The dynamic linker, ld.so, is crucial in Linux environments for loading shared libraries required by executables. Adversaries may exploit this by replacing it with a malicious version to execute unauthorized code, bypassing security measures. The detection rule identifies suspicious creation of ld.so files, excluding legitimate processes, to flag potential threats and prevent system binary proxy execution abuses.

### Possible investigation steps

- Review the alert details to confirm the file path matches the suspicious patterns ("/lib/ld-linux*.so*", "/lib64/ld-linux*.so*", "/usr/lib/ld-linux*.so*", "/usr/lib64/ld-linux*.so*") and verify the event type is "creation".
- Check the process that created the file by examining the `process.executable` field to determine if it is a known legitimate process or potentially malicious.
- Investigate the `process.name` to ensure it is not one of the excluded legitimate processes such as "dockerd", "yum", "dnf", "microdnf", or "pacman".
- Use Osquery to gather more information about the process that created the file. Example query: `SELECT * FROM processes WHERE pid = <process_id>;` where `<process_id>` is the ID of the process that triggered the alert.
- Examine the parent process of the suspicious process to understand the process hierarchy and identify any potential anomalies or unexpected parent-child relationships.
- Check the file metadata, including creation and modification timestamps, to determine if the timing aligns with any known legitimate activities or scheduled tasks.
- Investigate the user account associated with the process that created the file to determine if it has the necessary permissions and if the activity is consistent with the user's typical behavior.
- Review recent system logs and audit logs for any other suspicious activities or anomalies around the time of the file creation event.
- Analyze network activity from the host to identify any unusual outbound connections or data transfers that may indicate malicious behavior.
- Correlate the alert with other security events or alerts from the same host or network segment to identify potential patterns or coordinated attacks.

### False positive analysis

- Routine system updates or package installations may trigger the rule as package managers like `apt`, `yum`, or `dnf` could create or update the dynamic linker as part of their operations. These processes are generally safe and can be excluded by adding them to the exception list if they are not already included.
- Custom scripts or administrative tasks that involve rebuilding or updating system libraries might also lead to the creation of ld.so files. If these scripts are verified as safe, their associated processes can be added to the exclusion list to prevent false positives.
- Automated configuration management tools such as Ansible, Puppet, or Chef might deploy or update ld.so files as part of their configuration tasks. Users should verify these actions and consider excluding these tools from the detection rule if they are part of regular, secure operations.
- Development environments where developers frequently compile and test new versions of system libraries may inadvertently trigger the rule. In such cases, it is advisable to exclude specific development processes or paths that are known to be safe.
- To manage these false positives, users can regularly review and update the exclusion list in the detection rule to include any new legitimate processes that are identified during routine operations. This helps in maintaining a balance between security and operational efficiency.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Verify the integrity of the dynamic linker (ld.so) by comparing it with a known good version from a trusted source or backup.
- Conduct a thorough investigation to identify the source of the malicious ld.so creation, including reviewing logs and process execution history.
- Remove the malicious ld.so file and replace it with a legitimate version from a trusted source.
- Perform a comprehensive scan of the system for additional signs of compromise, such as unauthorized user accounts or other modified binaries.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if other systems are affected.
- Implement enhanced logging policies to capture detailed process execution and file creation events for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Restore the system to its operational state by applying security patches, updating software, and ensuring all security configurations are hardened.
- Educate users and administrators on the importance of monitoring system binaries and the risks associated with unauthorized modifications."""

[[rule.threat]]
framework = "MITRE ATT&CK"

  [rule.threat.tactic]
  name = "Defense Evasion"
  id = "TA0005"
  reference = "https://attack.mitre.org/tactics/TA0005/"

    [[rule.threat.technique]]
    id = "T1218"
    name = "System Binary Proxy Execution"
    reference = "https://attack.mitre.org/techniques/T1218/"

[[rule.threat]]
framework = "MITRE ATT&CK"

  [rule.threat.tactic]
  name = "Execution"
  id = "TA0002"
  reference = "https://attack.mitre.org/tactics/TA0002/"

    [[rule.threat.technique]]
    id = "T1059"
    name = "Command and Scripting Interpreter"
    reference = "https://attack.mitre.org/techniques/T1059/"

      [[rule.threat.technique.subtechnique]]
      name = "Unix Shell"
      id = "T1059.004"
      reference = "https://attack.mitre.org/techniques/T1059/004/"

[[rule.threat]]
framework = "MITRE ATT&CK"

  [rule.threat.tactic]
  name = "Persistence"
  id = "TA0003"
  reference = "https://attack.mitre.org/tactics/TA0003/"

    [[rule.threat.technique]]
    name = "Hijack Execution Flow"
    id = "T1574"
    reference = "https://attack.mitre.org/techniques/T1574/"

      [[rule.threat.technique.subtechnique]]
      name = "Dynamic Linker Hijacking"
      id = "T1574.006"
      reference = "https://attack.mitre.org/techniques/T1574/006/"
