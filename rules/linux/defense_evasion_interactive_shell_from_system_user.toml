[metadata]
creation_date = "2024/11/04"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects interactive shells launched from system users. System users typically do not require interactive shells,
and their presence may indicate malicious activity.
"""
from = "now-9m"
index = ["logs-endpoint.events.process*"]
language = "kuery"
license = "Elastic License v2"
name = "Unusual Interactive Shell Launched from System User"
risk_score = 21
rule_id = "9c5b2382-19d2-4b5d-8f14-9e1631a3acdb"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.

For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.

For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
        "Domain: Endpoint",
        "OS: Linux",
        "Use Case: Threat Detection",
        "Tactic: Defense Evasion",
        "Data Source: Elastic Defend"
        ]
timestamp_override = "event.ingested"
type = "new_terms"
query = '''
event.category:process and host.os.type:linux and event.type:start and event.action:exec and user.name:(
   daemon or bin or sys or sync or games or man or mail or news or uucp or proxy or backup or list or irc
   or gnats or _apt or Debian-exim or systemd-timesync or messagebus or uuidd or _chrony or sshd or
   gamer or shutdown or halt or dbus or polkitd or rtkit or pipewire or tcpdump or clevis or
   libstoreagemgmt or geoclue or tss or sssd or gnome-initial-setup or pesign or dnsmasq or chrony 
) and process.interactive:true and process.parent.executable:* and not (
  process.parent.name:(
    apt-key or apt-config or gpgv or gpgconf or man-db.postinst or sendmail or rpm or nullmailer-inject
  ) or
  process.args:(/etc/apt/trusted.gpg.d/* or /tmp/apt-key-gpg*) or
  process.name:(awk or apt-config or dpkg or grep or gpgv or sed) or
  (user.name:daemon and process.name:at)
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Unusual Interactive Shell Launched from System User

In Linux environments, system users are typically non-interactive and serve specific system functions. Adversaries may exploit these accounts to launch interactive shells, bypassing security measures and evading detection. The detection rule identifies such anomalies by monitoring process activities linked to system users, excluding legitimate processes, to flag potential misuse indicative of malicious intent.

### Possible investigation steps

- Review the alert details to identify the specific system user and process involved in launching the interactive shell. Pay attention to the `user.name` and `process.name` fields.
- Check the `process.parent.executable` and `process.parent.name` fields to understand the parent process that initiated the shell. This can provide context on how the shell was launched.
- Use Osquery to list all active processes for the identified system user to determine if there are other suspicious activities. Example query: `SELECT pid, name, path, cmdline FROM processes WHERE uid = (SELECT uid FROM users WHERE username = 'system_user');`
- Investigate the command-line arguments of the suspicious process using the `process.args` field to identify any potentially malicious commands or scripts being executed.
- Examine the system logs around the time of the alert to identify any related events or anomalies that could provide additional context.
- Check for any recent changes to user accounts or permissions that might have allowed the system user to launch an interactive shell.
- Investigate network connections initiated by the suspicious process using tools like `netstat` or `ss` to identify any unusual outbound connections.
- Review the system's authentication logs (e.g., `/var/log/auth.log`) to identify any unauthorized access attempts or successful logins around the time of the alert.
- Use Osquery to check for any recent file modifications or creations in critical directories that might indicate tampering or preparation for further attacks. Example query: `SELECT * FROM file WHERE path LIKE '/etc/%' AND mtime > (SELECT strftime('%s', 'now') - 3600);`
- Correlate the findings with other security tools and logs to determine if this activity is part of a broader attack pattern or isolated incident.

### False positive analysis

- System maintenance tasks: Some system maintenance scripts or automated tasks may inadvertently trigger interactive shells under system user accounts. These tasks are typically scheduled and can be identified by their regular occurrence and specific command patterns.
- Software updates: During software updates, certain processes might temporarily launch interactive shells as part of their installation or configuration routines. Monitoring the timing and context of these updates can help differentiate between legitimate and suspicious activities.
- Backup operations: Backup software might use system accounts to perform data integrity checks or other operations that could involve launching interactive shells. Identifying the specific backup software and its behavior can help in creating exceptions.
- Custom scripts: Organizations may have custom scripts that run under system user accounts for specific operational needs. These should be documented, and their behavior should be analyzed to ensure they are not flagged as false positives.
- To manage false positives, users can create exceptions by adding specific process names, arguments, or user names to the exclusion list in the detection rule. Regularly reviewing and updating these exceptions based on observed legitimate activities will help maintain the accuracy of the detection rule.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify the source and scope of the compromise, focusing on the processes and user accounts involved.
- Terminate any unauthorized interactive shell sessions and processes initiated by system users.
- Review and analyze system logs, including authentication logs and process execution logs, to gather evidence and understand the attack vector.
- Change passwords and review permissions for all system user accounts to prevent further exploitation.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response.
- Implement enhanced logging and monitoring policies to capture detailed process execution and user activity for future investigations.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to improve detection capabilities.
- Restore the system to a known good state using backups, ensuring that all malicious artifacts are removed.
- Apply system hardening measures, such as disabling unnecessary system user accounts and services, to reduce the attack surface."""
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
name = "Defense Evasion"
id = "TA0005"
reference = "https://attack.mitre.org/tactics/TA0005/"

[[rule.threat.technique]]
id = "T1564"
name = "Hide Artifacts"
reference = "https://attack.mitre.org/techniques/T1564/"

[[rule.threat.technique.subtechnique]]
id = "T1564.002"
name = "Hidden Users"
reference = "https://attack.mitre.org/techniques/T1564/002/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.executable"]

[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"
