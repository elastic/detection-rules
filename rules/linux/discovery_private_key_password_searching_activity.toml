[metadata]
creation_date = "2024/11/04"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects private key searching activity on Linux systems. Searching for private keys can be an indication of an
attacker attempting to escalate privileges or exfiltrate sensitive information.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Private Key Searching Activity"
risk_score = 21
rule_id = "627374ab-7080-4e4d-8316-bef1122444af"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
        "Domain: Endpoint",
        "OS: Linux",
        "Use Case: Threat Detection",
        "Tactic: Discovery",
        "Data Source: Elastic Defend"
        ]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and process.name == "find" and
process.command_line like ("*id_dsa*", "*id_rsa*", "*id_ed*", "*id_ecdsa*", "*id_xmss*", "*id_dh*") and
process.command_line like ("*/home/*", "*/etc/ssh*", "*/root/*", "/")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Private Key Searching Activity

In Linux environments, private keys are crucial for secure communications and authentication. Adversaries may exploit this by searching for private keys to gain unauthorized access or escalate privileges. The detection rule identifies suspicious use of the 'find' command targeting key file patterns in sensitive directories, signaling potential malicious intent to locate and misuse private keys.

### Possible investigation steps

- Review the alert details to confirm the presence of the 'find' command execution, focusing on the `process.command_line` field to identify the specific patterns and directories targeted.
- Examine the `process.name` and `process.command_line` fields to verify if the command was executed by a legitimate user or process, or if it appears suspicious.
- Check the `host.os.type` and `event.type` fields to ensure the alert pertains to a Linux system and corresponds to a process start event.
- Investigate the user account associated with the `event.action` field to determine if the account has a history of legitimate access to private keys or if it might be compromised.
- Use Osquery to list recent 'find' command executions on the host for further context. Example query: `SELECT * FROM processes WHERE name = 'find' AND cmdline LIKE '%id_%' ORDER BY start_time DESC LIMIT 10;`
- Analyze the `process.parent` field to identify the parent process of the 'find' command, which may provide insights into how the command was initiated.
- Review system logs and user activity around the time of the alert to identify any other suspicious behavior or commands executed by the same user.
- Check for any recent changes or anomalies in the directories specified in the `process.command_line` field, such as `/home/`, `/etc/ssh`, and `/root/`.
- Investigate network activity from the host to detect any potential exfiltration attempts, especially if the 'find' command was executed by an unauthorized user.
- Correlate this alert with other security events or alerts from the same host or user to identify patterns or a broader attack campaign.

### False positive analysis

- System administrators or automated scripts may legitimately use the 'find' command to locate private keys for backup or migration purposes, leading to false positives.
- Developers working on applications that require key management might execute searches to verify key locations, which can trigger the rule.
- Security audits or compliance checks often involve scanning for private keys to ensure proper security measures are in place, potentially causing false alerts.
- To manage these false positives, users can create exceptions for known benign activities by excluding specific user accounts or scripts from triggering the rule.
- Implementing a whitelist of trusted processes or directories can help reduce noise from legitimate key searches.
- Regularly review and update the detection rule to align with organizational changes and reduce unnecessary alerts from routine operations.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to determine the scope of the compromise, focusing on identifying any unauthorized access or changes to private keys.
- Review system logs and command history to trace the actions of the adversary and identify any additional compromised accounts or systems.
- Change all potentially compromised private keys and associated passwords, and update any systems or services that rely on these keys for authentication.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging policies to capture detailed command-line activity and process execution, ensuring future incidents can be detected more effectively.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities and provide context for similar threats.
- Restore the system to its operational state by reinstalling the operating system and applications from trusted sources, ensuring all security patches are applied.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures to prevent similar incidents.
- Implement hardening measures such as disabling unused services, enforcing least privilege access, and regularly auditing key directories for unauthorized access attempts."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"
