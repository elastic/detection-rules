[metadata]
creation_date = "2024/08/08"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Detects the creation or modification of files related to the dynamic linker on Linux systems. The dynamic linker is a
shared library that is used by the Linux kernel to load and execute programs. Attackers may attempt to hijack the
execution flow of a program by modifying the dynamic linker configuration files.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Dynamic Linker Creation or Modification"
risk_score = 47
rule_id = "640f79d1-571d-4f96-a9af-1194fc8cf763"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
file where host.os.type == "linux" and event.action in ("creation", "rename") and
file.path : ("/etc/ld.so.preload", "/etc/ld.so.conf.d/*", "/etc/ld.so.conf") and
not (
  process.executable in (
    "/bin/dpkg", "/usr/bin/dpkg", "/bin/dockerd", "/usr/bin/dockerd", "/usr/sbin/dockerd", "/bin/microdnf",
    "/usr/bin/microdnf", "/bin/rpm", "/usr/bin/rpm", "/bin/snapd", "/usr/bin/snapd", "/bin/yum", "/usr/bin/yum",
    "/bin/dnf", "/usr/bin/dnf", "/bin/podman", "/usr/bin/podman", "/bin/dnf-automatic", "/usr/bin/dnf-automatic",
    "/bin/pacman", "/usr/bin/pacman", "/usr/bin/dpkg-divert", "/bin/dpkg-divert", "/sbin/apk", "/usr/sbin/apk",
    "/usr/local/sbin/apk", "/usr/bin/apt", "/usr/sbin/pacman", "/bin/podman", "/usr/bin/podman", "/usr/bin/puppet",
    "/bin/puppet", "/opt/puppetlabs/puppet/bin/puppet", "/usr/bin/chef-client", "/bin/chef-client",
    "/bin/autossl_check", "/usr/bin/autossl_check", "/proc/self/exe", "/dev/fd/*",  "/usr/bin/pamac-daemon",
    "/bin/pamac-daemon", "/usr/lib/snapd/snapd", "/usr/local/bin/dockerd", "/usr/libexec/platform-python",
    "/usr/lib/snapd/snap-update-ns", "/usr/bin/vmware-config-tools.pl"
  ) or
  file.extension in ("swp", "swpx", "swx", "dpkg-remove") or
  file.Ext.original.extension == "dpkg-new" or
  process.executable : (
    "/nix/store/*", "/var/lib/dpkg/*", "/snap/*", "/dev/fd/*", "/usr/lib/virtualbox/*", "/opt/dynatrace/oneagent/*"
  ) or
  process.executable == null or
  process.name == "java" or
  (process.name == "sed" and file.name : "sed*") or
  (process.name == "perl" and file.name : "e2scrub_all.tmp*")
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Dynamic Linker Creation or Modification

The dynamic linker in Linux systems is crucial for loading shared libraries needed by programs at runtime. Adversaries may exploit this by altering linker configuration files to hijack program execution, redirecting it to malicious libraries. The detection rule identifies suspicious creation or modification of these files, excluding legitimate processes and temporary files, to flag potential hijacking attempts.

### Possible investigation steps

- Review the alert details to identify the specific file path involved in the creation or modification event, focusing on paths like "/etc/ld.so.preload", "/etc/ld.so.conf.d/*", and "/etc/ld.so.conf".
- Check the process executable that triggered the alert to determine if it is listed in the exclusion list, which includes common package managers and system processes.
- Investigate the user account associated with the process that made the change to assess if it has legitimate access or if it might be compromised.
- Use Osquery to gather more information about the process that triggered the alert. For example, run the following query to get details about the process: `SELECT * FROM processes WHERE pid = <process_id>;`.
- Examine the process tree to understand the parent-child relationship and identify if the process was spawned by a legitimate or suspicious parent process.
- Check the file's modification history and access times to determine if there have been any recent unauthorized changes or access patterns.
- Investigate any network connections or external communications initiated by the process to identify potential command and control activity.
- Review system logs for any other suspicious activities or anomalies around the time of the alert, such as failed login attempts or unusual user behavior.
- Correlate the alert with other security events or alerts in the environment to identify if this is part of a broader attack campaign.
- Verify the integrity of the dynamic linker configuration files by comparing them against known good baselines or backups to identify unauthorized changes.

### False positive analysis

- Package management operations: Legitimate package managers such as dpkg, rpm, yum, and others may modify dynamic linker configuration files during software installation or updates. These actions are typically benign and can be excluded by adding the package manager executables to the exception list.
- System updates and maintenance: Automated system updates or maintenance scripts might trigger the rule. Exclude known update processes or scripts by specifying their executables in the exception criteria.
- Temporary files: Editors like vim may create temporary swap files (e.g., with extensions like .swp, .swpx) during editing sessions. These can be safely ignored by excluding files with these extensions.
- Virtualization and containerization tools: Tools such as Docker, Podman, and VMware may modify linker configurations as part of their normal operations. Exclude these processes by adding their executables to the exception list.
- Monitoring and security tools: Some monitoring or security tools, like Dynatrace OneAgent, may interact with linker files. Exclude these tools by specifying their installation paths in the exception criteria.
- Custom scripts or applications: If custom scripts or applications are known to modify linker configurations as part of their functionality, consider excluding these by adding their process names or paths to the exception list.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify the source of the modification, including reviewing recent changes to dynamic linker configuration files and correlating with process execution logs.
- Verify the integrity of the dynamic linker configuration files by comparing them with known good backups or baselines.
- Restore any altered dynamic linker configuration files from a trusted backup to ensure the system's execution flow is not hijacked.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging policies to capture detailed process execution and file modification events, focusing on critical system directories and configuration files.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats in the future.
- Review and update access controls and permissions for critical system files to minimize the risk of unauthorized modifications.
- Conduct a post-incident review to identify gaps in security controls and processes, and implement necessary improvements to prevent recurrence.
- Educate users and administrators on the importance of maintaining system integrity and recognizing signs of potential compromise."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"

[[rule.threat.technique.subtechnique]]
id = "T1574.006"
name = "Dynamic Linker Hijacking"
reference = "https://attack.mitre.org/techniques/T1574/006/"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"

[[rule.threat.technique.subtechnique]]
id = "T1574.006"
name = "Dynamic Linker Hijacking"
reference = "https://attack.mitre.org/techniques/T1574/006/"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
