[metadata]
creation_date = "2023/08/30"
integration = ["endpoint", "auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for potential memory dumping through gdb. Attackers may leverage memory dumping techniques to attempt
secret extraction from privileged processes. Tools that display this behavior include "truffleproc" and
"bash-memory-dump". This behavior should not happen by default, and should be investigated thoroughly.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*", "auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Linux Process Hooking via GDB"
references = ["https://github.com/controlplaneio/truffleproc", "https://github.com/hajzer/bash-memory-dump"]
risk_score = 21
rule_id = "66c058f3-99f4-4d18-952b-43348f2577a0"
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
    "Data Source: Elastic Endgame",
    "Data Source: Auditd Manager",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action in ("exec", "exec_event", "executed", "process_started")
 and process.name == "gdb" and process.args in ("--pid", "-p") and 
/* Covered by d4ff2f53-c802-4d2e-9fb9-9ecc08356c3f */
process.args != "1"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Linux Process Hooking via GDB

GDB, the GNU Debugger, is a powerful tool used for debugging applications on Linux systems. It allows users to inspect the memory and state of running processes. Adversaries can exploit GDB to dump memory from privileged processes, potentially extracting sensitive information like credentials. The detection rule identifies suspicious GDB usage by monitoring process initiation events with specific arguments, flagging potential unauthorized memory access attempts.

### Possible investigation steps

- Review the alert details to confirm the process name is "gdb" and check if the process arguments include "--pid" or "-p", which indicate an attempt to attach to a running process.
- Verify the user account associated with the gdb process initiation to determine if it is a privileged account or an account that should not typically use gdb.
- Check the parent process of the gdb instance to understand how it was initiated and if it was spawned by a legitimate process or script.
- Investigate the process ID (PID) specified in the gdb arguments to identify the target process and assess its sensitivity, such as whether it handles credentials or other sensitive data.
- Use Osquery to gather additional context about the gdb process and its parent process. Example query: `SELECT pid, name, path, cmdline, parent FROM processes WHERE name = 'gdb';`
- Examine system logs and audit logs around the time of the gdb process start event to identify any related suspicious activities or anomalies.
- Check for any recent changes in user permissions or group memberships that might have allowed unauthorized access to gdb or the target process.
- Look for other instances of gdb usage on the system to determine if this is an isolated event or part of a broader pattern of behavior.
- Analyze network activity from the host to detect any potential data exfiltration attempts following the gdb process execution.
- Correlate this event with other security alerts or incidents to identify if it is part of a coordinated attack or a larger security incident.

### False positive analysis

- Developers and system administrators may use GDB for legitimate debugging purposes, which can trigger the rule. To manage this, users can create exceptions for specific user accounts or processes that are known to perform authorized debugging.
- Automated testing environments might utilize GDB to test software under development. In such cases, users can exclude these environments by identifying and whitelisting the associated process IDs or hostnames.
- Some monitoring or security tools may use GDB-like functionality to inspect processes for security assessments. Users should verify the legitimacy of these tools and exclude them from the rule if they are deemed safe.
- In educational or research settings, GDB might be used for learning purposes. Users can handle these false positives by setting up exceptions for specific educational user groups or lab environments.
- To ensure that exceptions do not introduce security risks, users should regularly review and update the list of exceptions, ensuring that only trusted entities are excluded from the rule.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Verify the legitimacy of the GDB process by checking the user who initiated it and the context in which it was executed.
- Conduct a thorough investigation of the system to identify any additional signs of compromise, such as unauthorized user accounts or unexpected network connections.
- Review system logs and GDB usage history to determine the scope of the attack and identify any other potentially affected systems.
- If unauthorized memory access is confirmed, change all credentials that may have been exposed, focusing on privileged accounts.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the attack is part of a larger campaign.
- Implement enhanced logging policies to capture detailed process execution and command-line arguments for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Restore the system to a known good state by reinstalling the operating system and applications, ensuring all security patches are applied.
- Harden the system by disabling unnecessary debugging tools on production servers and enforcing strict access controls and monitoring for privileged operations."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.007"
name = "Proc Filesystem"
reference = "https://attack.mitre.org/techniques/T1003/007/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

