[metadata]
creation_date = "2023/08/28"
integration = ["endpoint", "auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for potential attempts to disable AppArmor. AppArmor is a Linux security module that enforces
fine-grained access control policies to restrict the actions and resources that specific applications and processes can
access. Adversaries may disable security tools to avoid possible detection of their tools and activities.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*", "auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Disabling of AppArmor"
risk_score = 21
rule_id = "fac52c69-2646-4e79-89c0-fd7653461010"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
    "Data Source: Elastic Endgame",
    "Data Source: Auditd Manager",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type == "linux" and event.type == "start" and event.action in ("exec", "exec_event", "executed", "process_started")
 and (
  (process.name == "systemctl" and process.args in ("stop", "disable", "kill") and process.args in ("apparmor", "apparmor.service")) or
  (process.name == "service" and process.args == "apparmor" and process.args == "stop") or 
  (process.name == "chkconfig" and process.args == "apparmor" and process.args == "off") or
  (process.name == "ln" and process.args : "/etc/apparmor.d/*" and process.args == "/etc/apparmor.d/disable/")
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Disabling of AppArmor

AppArmor is a Linux security module that enforces strict access controls, limiting what applications can do and access. Adversaries may attempt to disable AppArmor to evade detection and freely execute malicious activities. The detection rule identifies suspicious processes that attempt to stop or disable AppArmor services, such as using commands like `systemctl`, `service`, or `chkconfig` with specific arguments, indicating potential tampering with security defenses.

### Possible investigation steps

- Review the alert details to identify the specific process name and arguments that triggered the alert, focusing on `process.name` and `process.args` fields.
- Check the timestamp of the event to determine when the suspicious activity occurred and correlate it with other events around the same time.
- Investigate the user account associated with the process execution to determine if it is a legitimate user or potentially compromised.
- Examine the parent process of the suspicious activity to understand how the process was initiated and if it was part of a larger chain of events.
- Use Osquery to list all processes related to AppArmor to verify if any have been stopped or disabled. Example query: `SELECT name, path, pid FROM processes WHERE name IN ('systemctl', 'service', 'chkconfig', 'ln');`
- Review system logs, such as `/var/log/syslog` or `/var/log/auth.log`, for any additional context or anomalies around the time of the alert.
- Check for any recent changes to AppArmor profiles or configurations in `/etc/apparmor.d/` to identify unauthorized modifications.
- Investigate network connections from the host to determine if there are any suspicious outbound connections that could indicate data exfiltration or command and control activity.
- Verify the integrity of AppArmor-related files and directories to ensure they have not been tampered with, using tools like `sha256sum` to compare against known good hashes.
- Cross-reference the alert with other security tools and logs, such as intrusion detection systems or endpoint protection solutions, to gather additional context and corroborate findings.

### False positive analysis

- Routine system maintenance or administrative tasks may trigger this rule, such as legitimate updates or configuration changes that require temporarily stopping AppArmor.
- Automated scripts or configuration management tools like Ansible, Puppet, or Chef might execute commands that match the rule criteria during system provisioning or updates.
- Users can handle these false positives by creating exceptions for known maintenance windows or trusted administrative scripts, ensuring that these activities are logged and reviewed to confirm their legitimacy.
- Exclude specific user accounts or process paths associated with trusted administrative tasks from triggering the rule, while maintaining a log of these exclusions for audit purposes.
- Regularly review and update the list of exceptions to adapt to changes in system administration practices or infrastructure updates, ensuring that only non-threatening behaviors are excluded.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Investigate the process logs to identify the source and scope of the attempt to disable AppArmor, focusing on the user accounts and IP addresses involved.
- Review recent changes to AppArmor profiles and configurations to ensure no unauthorized modifications have been made.
- Restore AppArmor to its operational state by re-enabling the service using `systemctl start apparmor` or `service apparmor start`.
- Conduct a thorough malware scan on the affected system to detect and remove any malicious software that may have been introduced.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if this is part of a broader attack.
- Implement enhanced logging policies to capture detailed process execution and system changes, ensuring that future attempts to disable security tools are detected promptly.
- Integrate security information and event management (SIEM) solutions to correlate events and improve detection capabilities across the network.
- Apply system hardening measures, such as restricting administrative privileges and implementing strict access controls, to reduce the risk of future attacks.
- Review and update security policies and procedures to incorporate lessons learned from the incident, ensuring a more robust defense against similar threats in the future."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1562"
name = "Impair Defenses"
reference = "https://attack.mitre.org/techniques/T1562/"

[[rule.threat.technique.subtechnique]]
id = "T1562.001"
name = "Disable or Modify Tools"
reference = "https://attack.mitre.org/techniques/T1562/001/"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
