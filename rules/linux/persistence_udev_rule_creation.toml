[metadata]
creation_date = "2023/10/26"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Monitors for the creation of rule files that are used by systemd-udevd to manage device nodes and handle kernel device
events in the Linux operating system. Systemd-udevd can be exploited for persistence by adversaries by creating
malicious udev rules that trigger on specific events, executing arbitrary commands or payloads whenever a certain device
is plugged in or recognized by the system.
"""
from = "now-9m"
index = ["logs-endpoint.events.file*"]
language = "eql"
license = "Elastic License v2"
name = "Systemd-udevd Rule File Creation"
references = ["https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms"]
risk_score = 21
rule_id = "054db96b-fd34-43b3-9af2-587b3bd33964"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows
the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click Add integrations.
- In the query bar, search for Elastic Defend and select the integration to see more details about it.
- Click Add Elastic Defend.
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either Traditional Endpoints or Cloud Workloads.
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest to select "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in New agent policy name. If other agent policies already exist, you can click the Existing hosts tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click Save and Continue.
- To complete the integration, select Add Elastic Agent to your hosts and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
file where host.os.type == "linux" and event.action in ("rename", "creation") and 
process.executable != null and file.extension == "rules" and
file.path : (
  "/lib/udev/*", "/etc/udev/rules.d/*", "/usr/lib/udev/rules.d/*", "/run/udev/rules.d/*", "/usr/local/lib/udev/rules.d/*"
) and not (
  process.executable in (
    "/bin/dpkg", "/usr/bin/dpkg", "/bin/dockerd", "/usr/bin/dockerd", "/usr/sbin/dockerd", "/bin/microdnf",
    "/usr/bin/microdnf", "/bin/rpm", "/usr/bin/rpm", "/bin/snapd", "/usr/bin/snapd", "/bin/yum", "/usr/bin/yum",
    "/bin/dnf", "/usr/bin/dnf", "/bin/podman", "/usr/bin/podman", "/bin/dnf-automatic", "/usr/bin/dnf-automatic",
    "/bin/pacman", "/usr/bin/pacman", "/usr/bin/dpkg-divert", "/bin/dpkg-divert", "/sbin/apk", "/usr/sbin/apk",
    "/usr/local/sbin/apk", "/usr/bin/apt", "/usr/sbin/pacman", "/bin/podman", "/usr/bin/podman", "/usr/bin/puppet",
    "/bin/puppet", "/opt/puppetlabs/puppet/bin/puppet", "/usr/bin/chef-client", "/bin/chef-client",
    "/bin/autossl_check", "/usr/bin/autossl_check", "/proc/self/exe", "/dev/fd/*",  "/usr/bin/pamac-daemon",
    "/bin/pamac-daemon", "/usr/lib/snapd/snapd", "/usr/local/bin/dockerd", "/usr/libexec/netplan/generate",
    "/lib/systemd/system-generators/netplan", "/lib/systemd/systemd", "/usr/bin/containerd", "/usr/sbin/sshd",
    "/kaniko/executor"
  ) or
  file.Ext.original.extension == "dpkg-new" or
  process.executable : (
    "/nix/store/*", "/var/lib/dpkg/*", "/snap/*", "/dev/fd/*", "/usr/lib/*", "/usr/libexec/*"
  ) or
  process.name in ("systemd", "netplan", "apt-get", "vmware-config-tools.pl", "systemd-hwdb") or
  (process.name == "sed" and file.name : "sed*") or
  (process.name == "perl" and file.name : "e2scrub_all.tmp*") 
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Systemd-udevd Rule File Creation

Systemd-udevd manages device nodes and handles kernel device events in Linux, using rule files to automate responses to hardware changes. Adversaries can exploit this by creating malicious rules that execute commands when specific devices are connected. The detection rule monitors the creation or renaming of these rule files, excluding legitimate processes, to identify potential abuse.

### Possible investigation steps

- Review the alert details to identify the specific file path and name of the rule file that was created or renamed, focusing on paths like "/lib/udev/*" and "/etc/udev/rules.d/*".
- Check the process executable that triggered the alert to ensure it is not one of the legitimate processes listed in the exclusion criteria, such as "/bin/dpkg" or "/usr/bin/rpm".
- Investigate the parent process of the executable to understand the context in which the rule file was created, using process lineage to identify any suspicious activity.
- Use Osquery to list all udev rule files and their metadata, including creation and modification times, to identify any recent changes: `SELECT * FROM file WHERE path LIKE '/etc/udev/rules.d/%' OR path LIKE '/lib/udev/rules.d/%';`
- Examine the contents of the suspicious rule file to identify any potentially malicious commands or scripts that could be executed when a device is connected.
- Cross-reference the file creation or modification time with other system logs to identify any correlated events or activities that occurred around the same time.
- Check for any recent connections of new or unusual devices to the system that might have triggered the rule file execution.
- Investigate the user account associated with the process that created or modified the rule file to determine if it has been compromised or is acting suspiciously.
- Review historical data to determine if similar rule file creation or modification events have occurred in the past, indicating a pattern of behavior.
- Analyze network logs for any outbound connections or data exfiltration attempts following the rule file creation, which might suggest malicious intent.

### False positive analysis

- Legitimate software installations or updates may trigger the creation or modification of udev rule files, especially when using package managers like dpkg, rpm, or yum. These processes are typically excluded in the detection rule to prevent false positives.
- System management tools such as Puppet, Chef, or Ansible might create or modify udev rules as part of their configuration management tasks. These tools are often run by trusted processes and can be excluded by adding their executables to the exception list.
- Custom scripts or administrative tasks performed by system administrators might involve creating or modifying udev rules. If these actions are routine and verified as non-malicious, the specific scripts or processes can be added to the exclusion list.
- Automated system updates or maintenance tasks, such as those performed by systemd or netplan, may also result in rule file changes. These processes are generally safe and can be excluded by specifying their names or paths in the detection rule.
- Users can manage false positives by regularly reviewing and updating the exclusion list to include any new legitimate processes or paths that are identified as part of normal system operations.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify the source of the malicious udev rule file creation, examining recent user activity and process execution logs.
- Remove any unauthorized or suspicious udev rule files from the system directories, ensuring that only legitimate rules remain.
- Review and restore any system configurations or files that may have been altered by the malicious rule execution.
- Escalate the incident to the security operations team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging for udev rule file changes and process executions to improve detection of similar threats in the future.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to correlate and analyze related security events.
- Apply security patches and updates to the operating system and applications to mitigate known vulnerabilities that could be exploited.
- Conduct a post-incident review to identify gaps in security controls and update policies and procedures to prevent recurrence.
- Educate users and administrators on the risks associated with unauthorized device connections and the importance of reporting suspicious activity."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1037"
name = "Boot or Logon Initialization Scripts"
reference = "https://attack.mitre.org/techniques/T1037/"

[[rule.threat.technique]]
id = "T1546"
name = "Event Triggered Execution"
reference = "https://attack.mitre.org/techniques/T1546/"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
