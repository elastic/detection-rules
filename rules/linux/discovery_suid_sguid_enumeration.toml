[metadata]
creation_date = "2023/07/24"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for the usage of the "find" command in conjunction with SUID and SGUID permission arguments. SUID
(Set User ID) and SGID (Set Group ID) are special permissions in Linux that allow a program to execute with the
privileges of the file owner or group, respectively, rather than the privileges of the user running the program. In case
an attacker is able to enumerate and find a binary that is misconfigured, they might be able to leverage this
misconfiguration to escalate privileges by exploiting vulnerabilities or built-in features in the privileged program.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "SUID/SGUID Enumeration Detected"
references = ["https://www.elastic.co/security-labs/primer-on-persistence-mechanisms"]
risk_score = 21
rule_id = "5b06a27f-ad72-4499-91db-0c69667bffa5"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Tactic: Privilege Escalation",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and 
process.name == "find" and process.args : "-perm" and process.args : (
  "/6000", "-6000", "/4000", "-4000", "/2000", "-2000", "/u=s", "-u=s", "/g=s", "-g=s", "/u=s,g=s", "/g=s,u=s"
) and not (
  user.Ext.real.id == "0" or group.Ext.real.id == "0" or process.args_count >= 12 or 
  (process.args : "/usr/bin/pkexec" and process.args : "-xdev" and process.args_count == 7)
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating SUID/SGUID Enumeration Detected

SUID and SGID are Linux permissions that allow programs to run with elevated privileges, potentially enabling users to perform tasks they otherwise couldn't. Adversaries exploit misconfigured binaries with these permissions to escalate privileges. The detection rule identifies suspicious use of the "find" command to locate such binaries, filtering out benign cases to highlight potential threats.

### Possible investigation steps

- Review the alert details to understand the context, including the specific `process.name` and `process.args` that triggered the alert.
- Verify the user context by checking the `user.Ext.real.id` and `group.Ext.real.id` fields to determine if the command was executed by a privileged user or group.
- Examine the `process.args` field to identify the exact permissions being searched for, such as "/6000", "-6000", "/4000", "-4000", "/2000", "-2000", "/u=s", "-u=s", "/g=s", "-g=s", "/u=s,g=s", or "/g=s,u=s".
- Check the `process.args_count` to see if the command includes an unusually high number of arguments, which might indicate a complex or automated script.
- Investigate the parent process of the "find" command to determine if it was initiated by a legitimate process or a potentially malicious one.
- Use Osquery to list all files with SUID/SGID permissions on the system for further analysis. Example query: `SELECT path, mode FROM file WHERE mode & 4000 OR mode & 2000;`
- Cross-reference the list of SUID/SGID files with known vulnerable binaries or those that should not have elevated permissions.
- Analyze recent system logs for any other suspicious activities or anomalies around the time the "find" command was executed.
- Investigate the network activity of the host to identify any potential data exfiltration or communication with known malicious IPs.
- Review historical data to determine if similar "find" command executions have occurred in the past, indicating a pattern or ongoing reconnaissance activity.

### False positive analysis

- System administrators or security teams may use the "find" command with SUID/SGID arguments during routine audits or security assessments, which can trigger false positives. To manage this, consider excluding these activities by identifying the specific user accounts or groups performing these tasks and adding them to an exception list.
- Automated scripts or security tools that regularly scan for SUID/SGID binaries as part of compliance checks can also generate false positives. Users can handle these by creating exceptions for known scripts or processes, ensuring they are documented and verified as non-threatening.
- Some legitimate software installations or updates might use the "find" command with SUID/SGID arguments to verify permissions, leading to false positives. To address this, users can exclude these processes by identifying the specific software and its associated process arguments, then adding them to an exception list.
- In environments where custom applications are developed, developers might use the "find" command with SUID/SGID arguments during testing or debugging, resulting in false positives. Users can mitigate this by excluding known development environments or user accounts from the detection rule.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further exploitation or lateral movement by the adversary.
- Conduct a thorough investigation to identify any misconfigured SUID/SGID binaries and assess if they have been exploited. Use forensic tools to analyze system logs and process execution history.
- Remove or correct the permissions of any misconfigured SUID/SGID binaries to prevent unauthorized privilege escalation.
- Review user accounts and privileges on the affected system to ensure no unauthorized changes have been made. Revoke any suspicious or unnecessary elevated privileges.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the threat actor has compromised other systems.
- Implement enhanced logging and monitoring policies to capture detailed process execution and permission changes, ensuring future incidents can be detected more effectively.
- Integrate security tools with SIEM solutions to automate the detection of suspicious SUID/SGID enumeration activities and alert security teams in real-time.
- Restore the system to its operational state by applying the latest security patches and updates, and verify the integrity of critical system files and configurations.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures to prevent similar incidents in the future.
- Educate system administrators and users on the risks associated with SUID/SGID permissions and best practices for maintaining secure configurations."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1083"
name = "File and Directory Discovery"
reference = "https://attack.mitre.org/techniques/T1083/"


[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1548"
name = "Abuse Elevation Control Mechanism"
reference = "https://attack.mitre.org/techniques/T1548/"
[[rule.threat.technique.subtechnique]]
id = "T1548.001"
name = "Setuid and Setgid"
reference = "https://attack.mitre.org/techniques/T1548/001/"



[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

