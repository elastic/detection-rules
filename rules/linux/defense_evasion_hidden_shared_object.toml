[metadata]
creation_date = "2022/07/20"
integration = ["endpoint", "sentinel_one_cloud_funnel"]
maturity = "production"
min_stack_comments = "Breaking change at 8.13.0 for SentinelOne Integration."
min_stack_version = "8.13.0"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the creation of a hidden shared object (.so) file. Users can mark specific files as hidden simply by putting
a "." as the first character in the file or folder name. Adversaries can use this to their advantage to hide files and
folders on the system for persistence and defense evasion.
"""
from = "now-9m"
index = ["auditbeat-*", "logs-endpoint.events.*", "endgame-*", "logs-sentinel_one_cloud_funnel.*"]
language = "eql"
license = "Elastic License v2"
max_signals = 33
name = "Creation of Hidden Shared Object File"
risk_score = 47
rule_id = "766d3f91-3f12-448c-b65f-20123e9e9e8c"
setup = """## Setup

This rule requires data coming in from one of the following integrations:
- Elastic Defend
- Auditbeat

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).

### Auditbeat Setup
Auditbeat is a lightweight shipper that you can install on your servers to audit the activities of users and processes on your systems. For example, you can use Auditbeat to collect and centralize audit events from the Linux Audit Framework. You can also use Auditbeat to detect changes to critical files, like binaries and configuration files, and identify potential security policy violations.

#### The following steps should be executed in order to add the Auditbeat on a Linux System:
- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.
- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setup-repositories.html).
- To run Auditbeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-docker.html).
- To run Auditbeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-kubernetes.html).
- For complete “Setup and Run Auditbeat” information refer to the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setting-up-and-running.html).

#### Custom Ingest Pipeline
For versions <8.2, you need to add a custom ingest pipeline to populate `event.ingested` with @timestamp for non-elastic-agent indexes, like auditbeats/filebeat/winlogbeat etc. For more details to add a custom ingest pipeline refer to the [guide](https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Endgame",
    "Data Source: Elastic Defend",
    "Data Source: SentinelOne",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "linux" and event.type == "creation" and file.extension == "so" and file.name : ".*.so" and
not process.name == "dockerd"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Creation of Hidden Shared Object File

Shared object files (.so) are dynamic libraries used in Linux environments to provide reusable code. Adversaries may exploit the ability to hide files by prefixing them with a dot, concealing malicious .so files for persistence and evasion. The detection rule identifies the creation of such hidden files, excluding benign processes like Docker, to uncover potential threats.

### Possible investigation steps

- Review the alert details to confirm the file creation event, focusing on the file name and path to determine if it matches the pattern of a hidden shared object file (e.g., `.hiddenfile.so`).
- Examine the process that created the file by checking the `process.name` and `process.pid` fields to identify any suspicious or unexpected processes involved in the file creation.
- Investigate the user account associated with the file creation event using the `user.name` field to determine if the action was performed by a legitimate user or a potentially compromised account.
- Use Osquery to list all hidden shared object files on the system with a query like: `SELECT path FROM file WHERE path LIKE '/%.so';` to identify any other hidden .so files that may have been created.
- Check the file metadata, such as creation and modification timestamps, to understand the timeline of the file's existence and correlate it with other system events.
- Analyze the file's contents or hash it and compare it against known malicious signatures using a threat intelligence database to determine if it is a known threat.
- Investigate the parent process of the file creation event to understand the origin of the process chain and identify any potential exploitation or lateral movement activities.
- Review system logs around the time of the file creation for any unusual activity or errors that might indicate exploitation attempts or other malicious behavior.
- Check for any network connections initiated by the process that created the file to identify potential command and control communication or data exfiltration attempts.
- Correlate the event with other alerts or incidents in the environment to determine if this is part of a larger attack campaign or isolated incident.

### False positive analysis

- Development and testing environments may generate hidden .so files as part of normal operations, especially when developers are working on shared libraries and use hidden files for version control or temporary storage.
- System maintenance scripts or automated backup processes might create hidden .so files to temporarily store or manage shared libraries, which can be mistaken for malicious activity.
- Some legitimate applications or services may use hidden .so files for configuration or internal operations, particularly those that manage plugins or extensions, leading to false positives.
- Users can manage these false positives by creating exceptions for known benign processes or directories where hidden .so files are expected, such as specific development directories or application-specific paths.
- Regularly review and update the list of exceptions to ensure that new legitimate processes or directories are accounted for, minimizing the risk of overlooking genuine threats.

### Response and remediation

- Isolate the affected system from the network to prevent further spread of the potential threat.
- Conduct a thorough investigation to identify the source and scope of the hidden .so file creation, examining process trees and user activity.
- Remove the malicious hidden .so file and any associated files or processes identified during the investigation.
- Review and update access controls and permissions to prevent unauthorized file creation and execution.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and threat intelligence correlation.
- Implement enhanced logging policies to capture detailed file creation events and process activities, ensuring visibility into similar future activities.
- Integrate with threat intelligence platforms to enrich alerts with context and improve detection capabilities.
- Restore the system from a known good backup to ensure the integrity and security of the operating environment.
- Apply system hardening measures, such as disabling unnecessary services and enforcing strict file permissions, to reduce the attack surface.
- Conduct a post-incident review to identify gaps in detection and response, updating security policies and procedures accordingly."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1564"
name = "Hide Artifacts"
reference = "https://attack.mitre.org/techniques/T1564/"
[[rule.threat.technique.subtechnique]]
id = "T1564.001"
name = "Hidden Files and Directories"
reference = "https://attack.mitre.org/techniques/T1564/001/"



[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

