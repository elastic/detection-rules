[metadata]
creation_date = "2024/01/08"
integration = ["endpoint", "auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies instances where a processes (granted CAP_CHOWN and/or CAP_FOWNER capabilities) is executed, after which the
ownership of a suspicious file or binary is changed. In Linux, the CAP_CHOWN capability allows a process to change the
owner of a file, while CAP_FOWNER permits it to bypass permission checks on operations that require file ownership (like
reading, writing, and executing). Attackers may abuse these capabilities to obtain unauthorized access to files.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Privilege Escalation via CAP_CHOWN/CAP_FOWNER Capabilities"
risk_score = 47
rule_id = "d55abdfb-5384-402b-add4-6c401501b0c3"
setup = """## Setup


This rule requires data coming in from Auditd Manager.

### Auditd Manager Integration Setup
The Auditd Manager Integration receives audit events from the Linux Audit Framework which is a part of the Linux kernel.
Auditd Manager provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system.

#### The following steps should be executed in order to add the Elastic Agent System integration "auditd_manager" on a Linux System:
- Go to the Kibana home page and click “Add integrations”.
- In the query bar, search for “Auditd Manager” and select the integration to see more details about it.
- Click “Add Auditd Manager”.
- Configure the integration name and optionally add a description.
- Review optional and advanced settings accordingly.
- Add the newly installed “auditd manager” to an existing or a new agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
- Click “Save and Continue”.
- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/auditd_manager).

#### Rule Specific Setup Note
Auditd Manager subscribes to the kernel and receives events as they occur without any additional configuration.
However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.
- For this detection rule the following additional audit rules are required to be added to the integration:
  -- "-w /etc/ -p rwxa -k audit_recursive_etc"
  -- "-w /root/ -p rwxa -k audit_root"
"""
severity = "medium"
tags = [
    "Data Source: Auditd Manager",
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id, process.pid with maxspan=1s
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and
   process.name != null and process.thread.capabilities.effective : ("CAP_CHOWN", "CAP_FOWNER") and
   process.command_line : ("*sudoers*", "*passwd*", "*shadow*", "*/root/*") and user.id != "0"]
  [file where host.os.type == "linux" and event.action == "changed-file-ownership-of" and event.type == "change" and
   event.outcome == "success" and file.path in (
     "/etc/passwd",
     "/etc/shadow",
     "/etc/sudoers",
     "/root/.ssh/*"
   ) and user.id != "0"
  ]
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Privilege Escalation via CAP_CHOWN/CAP_FOWNER Capabilities

In Linux, CAP_CHOWN and CAP_FOWNER capabilities allow processes to change file ownership and bypass permission checks, respectively. Adversaries exploit these to gain unauthorized file access, potentially altering sensitive files like `/etc/passwd`. The detection rule identifies processes with these capabilities targeting critical files, flagging suspicious ownership changes by non-root users, thus highlighting potential privilege escalation attempts.

### Possible investigation steps

- Review the alert details to identify the specific process and file involved, focusing on `process.pid`, `process.name`, and `file.path` fields.
- Verify the user context by checking the `user.id` field to confirm that the action was performed by a non-root user.
- Examine the command line used to execute the process by reviewing the `process.command_line` field to understand the intent and scope of the action.
- Investigate the process's parent process to determine if it was spawned by a legitimate or suspicious parent using the `process.parent.name` and `process.parent.pid` fields.
- Check the system logs for any related entries around the time of the event to gather additional context on the process execution and file ownership change.
- Use Osquery to list all processes with CAP_CHOWN or CAP_FOWNER capabilities to identify any other potentially suspicious processes:
  ```sql
  SELECT pid, name, path, uid, gid, on_disk FROM processes WHERE capabilities LIKE '%CAP_CHOWN%' OR capabilities LIKE '%CAP_FOWNER%';
  ```
- Investigate the history of changes to the targeted file (e.g., `/etc/passwd`) to identify any unauthorized modifications or patterns of access.
- Review user activity logs for the non-root user involved to identify any unusual behavior or access patterns leading up to the event.
- Analyze network activity from the host to detect any potential exfiltration or communication with known malicious IPs or domains.
- Correlate the event with other security alerts or incidents to determine if it is part of a broader attack campaign or isolated incident.

### False positive analysis

- Routine administrative tasks: System administrators may perform legitimate file ownership changes as part of regular maintenance or configuration updates. These actions can trigger the detection rule if they involve files like `/etc/passwd` or `/etc/shadow`. To manage this, users can create exceptions for known administrative scripts or processes that are regularly executed by trusted users.
- Automated system updates: Some automated update processes or configuration management tools may change file ownership as part of their operations. These processes might be flagged if they have the necessary capabilities. Users can handle these by identifying and excluding specific update processes or tools that are verified as safe.
- Backup and restore operations: Backup software might change file ownership during the backup or restore process, especially if it needs to ensure files are restored with the correct permissions. Users should identify and whitelist these backup processes to prevent false positives.
- Development and testing environments: In environments where developers or testers frequently change file permissions or ownership for testing purposes, these actions might be flagged. Users can manage this by excluding specific development or testing processes or by setting up separate monitoring rules for these environments.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify the source of the capability abuse, including reviewing logs for any suspicious process executions or file ownership changes.
- Revert any unauthorized file ownership changes, especially for critical files like /etc/passwd, /etc/shadow, and /etc/sudoers, to their original state.
- Reset passwords and review user accounts for any unauthorized changes or additions, focusing on accounts with elevated privileges.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the attack is part of a larger campaign.
- Implement enhanced logging policies to capture detailed process execution and file modification events, ensuring that CAP_CHOWN and CAP_FOWNER usage is monitored.
- Integrate security tools such as intrusion detection systems (IDS) and endpoint detection and response (EDR) solutions to improve visibility and detection capabilities.
- Apply security patches and updates to the operating system and applications to mitigate known vulnerabilities that could be exploited for privilege escalation.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Implement hardening measures such as restricting the use of capabilities to only necessary processes and users, and regularly auditing capability assignments."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1068"
name = "Exploitation for Privilege Escalation"
reference = "https://attack.mitre.org/techniques/T1068/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

