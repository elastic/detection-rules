[metadata]
creation_date = "2024/06/26"
integration = ["endpoint", "sentinel_one_cloud_funnel"]
maturity = "production"
min_stack_version = "8.13.0"
min_stack_comments = "Breaking change at 8.13.0 for SentinelOne Integration."
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects the creation or modification of a Git hook file on a Linux system. Git hooks are scripts that Git
executes before or after events such as commit, push, and receive. They are used to automate tasks, enforce policies,
and customize Git's behavior. Attackers can abuse Git hooks to maintain persistence on a system by executing malicious
code whenever a specific Git event occurs.
"""
from = "now-9m"
index = ["logs-endpoint.events.file*", "logs-sentinel_one_cloud_funnel.*", "endgame-*"]
language = "eql"
license = "Elastic License v2"
name = "Git Hook Created or Modified"
references = [
    "https://git-scm.com/docs/githooks/2.26.0",
    "https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms",
]
risk_score = 21
rule_id = "ac531fcc-1d3b-476d-bbb5-1357728c9a37"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Execution",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
    "Data Source: SentinelOne",
    "Data Source: Elastic Endgame",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "linux" and event.type == "creation" and file.path : "*.git/hooks/*" and
file.extension == null and process.executable != null and not (
  process.executable in (
    "/bin/dpkg", "/usr/bin/dpkg", "/bin/dockerd", "/usr/bin/dockerd", "/usr/sbin/dockerd", "/bin/microdnf",
    "/usr/bin/microdnf", "/bin/rpm", "/usr/bin/rpm", "/bin/snapd", "/usr/bin/snapd", "/bin/yum", "/usr/bin/yum",
    "/bin/dnf", "/usr/bin/dnf", "/bin/podman", "/usr/bin/podman", "/bin/dnf-automatic", "/usr/bin/dnf-automatic",
    "/bin/pacman", "/usr/bin/pacman", "/usr/bin/dpkg-divert", "/bin/dpkg-divert", "/sbin/apk", "/usr/sbin/apk",
    "/usr/local/sbin/apk", "/usr/bin/apt", "/usr/sbin/pacman", "/bin/podman", "/usr/bin/podman", "/usr/bin/puppet",
    "/bin/puppet", "/opt/puppetlabs/puppet/bin/puppet", "/usr/bin/chef-client", "/bin/chef-client",
    "/bin/autossl_check", "/usr/bin/autossl_check", "/proc/self/exe", "/usr/bin/pamac-daemon", "/bin/pamac-daemon",
    "/usr/local/bin/dockerd", "/sbin/dockerd"
  ) or
  process.executable : ("/nix/store/*", "/var/lib/dpkg/*", "/snap/*", "/dev/fd/*") or
  process.name in ("git", "dirname", "tar", "gitea", "git-lfs") or
  (process.name == "sed" and file.name : "sed*") or
  (process.name == "perl" and file.name : "e2scrub_all.tmp*") 
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Git Hook Created or Modified

Git hooks are scripts that automate tasks by executing before or after Git events like commits or pushes. While beneficial for workflow customization, adversaries can exploit them to maintain persistence by embedding malicious scripts. The detection rule identifies suspicious hook file changes on Linux systems, excluding benign processes, to flag potential unauthorized modifications.

### Possible investigation steps

- Review the alert details to identify the specific Git hook file path that was created or modified, as indicated by the `file.path` field.
- Verify the `process.executable` field to determine which process was responsible for the creation or modification of the Git hook file, and assess whether it is a known and trusted application.
- Check the `event.type` field to confirm whether the event was a creation or modification, as this can provide context on whether a new hook was added or an existing one was altered.
- Investigate the user account associated with the process by examining the process owner and any related user activity around the time of the event.
- Use Osquery to gather additional context about the file and process. For example, run the following query to list all files in the `.git/hooks` directory and their metadata: `SELECT * FROM file WHERE path LIKE '/path/to/repo/.git/hooks/%';`
- Examine the contents of the modified or newly created Git hook file to identify any potentially malicious or unexpected scripts or commands.
- Cross-reference the `process.name` field with known benign processes to ensure that the process responsible for the change is not typically associated with legitimate Git operations.
- Review system logs and other security tools for any related suspicious activity or anomalies around the time of the Git hook modification.
- Investigate any recent changes to the repository or system configuration that might explain the legitimate creation or modification of the Git hook.
- Consult with the development or operations team to verify if the change was authorized and aligns with any recent updates or deployments.

### False positive analysis

- System package managers like `dpkg`, `rpm`, `yum`, and `dnf` may trigger false positives when they update or install packages that include Git hooks. These processes are typically benign and can be excluded by adding them to the exception list in the detection rule.
- Container management tools such as `dockerd`, `podman`, and `microdnf` might modify Git hooks during container operations. These are generally safe and can be excluded by specifying their executables in the rule's exception criteria.
- Automated system maintenance scripts or tools like `puppet`, `chef-client`, and `autossl_check` may create or modify Git hooks as part of their routine operations. Users can handle these by adding the specific process names or paths to the exclusion list.
- Development tools and scripts, including `git`, `gitea`, and `git-lfs`, may modify hooks during normal development activities. These should be considered for exclusion if they are part of the regular development workflow.
- Custom scripts or processes that are known and trusted within the organization might also trigger this rule. Users should review these cases and, if deemed safe, add them to the exception list to prevent unnecessary alerts.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify the source of the unauthorized Git hook modification, examining recent changes and user activity logs.
- Review the contents of the modified or newly created Git hook files to determine if malicious code is present and assess the potential impact.
- Remove any unauthorized or malicious scripts found in the Git hook files and restore them to their original state if possible.
- Escalate the incident to the security operations team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging for Git operations and file modifications on critical systems to improve future detection capabilities.
- Integrate security tools with version control systems to monitor and alert on suspicious activities related to Git hooks.
- Apply system hardening measures, such as restricting write permissions to the .git/hooks directory to trusted users only.
- Educate developers and system administrators on the risks associated with Git hooks and best practices for securing them.
- Review and update incident response plans to include specific procedures for handling Git hook-related security incidents, leveraging MITRE ATT&CK framework details for persistence and system process modification."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"

[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
