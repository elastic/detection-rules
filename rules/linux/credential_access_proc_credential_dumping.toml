[metadata]
creation_date = "2023/04/26"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the execution of the mimipenguin exploit script which is linux adaptation of Windows tool mimikatz.
Mimipenguin exploit script is used to dump clear text passwords from a currently logged-in user. The tool exploits a
known vulnerability CVE-2018-20781. Malicious actors can exploit the cleartext credentials in memory by dumping the
process and extracting lines that have a high probability of containing cleartext passwords.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Linux Credential Dumping via Proc Filesystem"
references = [
    "https://github.com/huntergregal/mimipenguin",
    "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781",
]
risk_score = 47
rule_id = "ef100a2e-ecd4-4f72-9d1e-2f779ff3c311"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Use Case: Vulnerability",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id, process.parent.name with maxspan=1m
  [process where host.os.type == "linux" and process.name == "ps" and event.action == "exec"
   and process.args in ("-eo", "pid", "command")]
  [process where host.os.type == "linux" and process.name == "strings" and event.action == "exec"
   and process.args : "/tmp/*"]
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Linux Credential Dumping via Proc Filesystem

The /proc filesystem in Linux provides a mechanism to access process information, which is crucial for system diagnostics. Adversaries exploit this by using tools like mimipenguin to extract plaintext credentials from memory, leveraging vulnerabilities such as CVE-2018-20781. The detection rule identifies suspicious sequences of commands, like 'ps' and 'strings', executed in a short span, indicating potential credential dumping activities.

### Possible investigation steps

- Review the alert details to confirm the host.id and process.parent.name involved in the suspicious activity.
- Verify the execution of the 'ps' command by checking the process.args field for the presence of "-eo", "pid", "command" to ensure it matches the alert criteria.
- Examine the execution of the 'strings' command by confirming the process.args field includes paths like "/tmp/*", which may indicate temporary storage of dumped credentials.
- Use Osquery to list all processes running on the affected host to identify any unusual or unauthorized processes. Example query: `SELECT pid, name, path FROM processes WHERE name IN ('ps', 'strings');`
- Investigate the parent process of the suspicious 'ps' and 'strings' commands to determine if they were spawned by a legitimate or malicious process.
- Check the process execution timeline to see if the 'ps' and 'strings' commands were executed within a short span (maxspan=1m) to confirm the sequence of events.
- Analyze the command history on the affected host to identify any manual execution of similar commands that could indicate an insider threat or misconfiguration.
- Review system logs for any additional context around the time of the alert, focusing on authentication logs and any anomalies in user activity.
- Investigate any files in the /tmp directory that may have been created or modified around the time of the alert to identify potential credential dumps.
- Correlate the findings with other security tools and logs to determine if there are any related alerts or indicators of compromise on the same host or network.

### False positive analysis

- System administrators or automated scripts may frequently use the 'ps' and 'strings' commands for legitimate monitoring and diagnostic purposes, leading to false positives. 
- Security tools or monitoring solutions might execute similar command sequences as part of their regular operations, which could be mistaken for malicious activity.
- Developers and testers might use these commands during software development or testing phases, especially when debugging or analyzing application behavior.
- To manage these false positives, users can create exceptions for known benign processes or scripts by whitelisting specific process names or paths that are regularly used in their environment.
- Implementing a baseline of normal system behavior can help differentiate between legitimate and suspicious activities, allowing for more accurate detection and fewer false positives.
- Regularly updating and reviewing the list of exceptions is crucial to ensure that new legitimate processes are not flagged as threats while maintaining security against actual credential dumping attempts.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further credential exposure and lateral movement.
- Conduct a thorough investigation to confirm the presence of mimipenguin or similar tools by reviewing process execution logs and file system changes.
- Terminate any suspicious processes identified during the investigation, particularly those related to 'ps' and 'strings' commands executed in sequence.
- Change all passwords for accounts that were logged in on the affected system to prevent unauthorized access using potentially compromised credentials.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine the scope of the breach.
- Implement enhanced logging policies to capture detailed process execution and command-line arguments for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Restore the system from a known good backup to ensure no residual malicious artifacts remain.
- Apply security patches and updates to address vulnerabilities like CVE-2018-20781 and ensure all systems are up to date.
- Conduct a security awareness training session for users to recognize and report suspicious activities, emphasizing the importance of credential security."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.007"
name = "Proc Filesystem"
reference = "https://attack.mitre.org/techniques/T1003/007/"


[[rule.threat.technique]]
id = "T1212"
name = "Exploitation for Credential Access"
reference = "https://attack.mitre.org/techniques/T1212/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

