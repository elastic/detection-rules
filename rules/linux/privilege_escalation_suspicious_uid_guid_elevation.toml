[metadata]
creation_date = "2024/01/08"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies instances where a process (granted CAP_SETUID and/or CAP_SETGID capabilities) is executed, after which the
user's access is elevated to UID/GID 0 (root). In Linux, the CAP_SETUID and CAP_SETGID capabilities allow a process to
change its UID and GID, respectively, providing control over user and group identity management. Attackers may leverage
a misconfiguration for exploitation in order to escalate their privileges to root.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Privilege Escalation via CAP_SETUID/SETGID Capabilities"
risk_score = 47
rule_id = "9b80cb26-9966-44b5-abbf-764fbdbc3586"
setup = """## Setup


This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id, process.entity_id with maxspan=1s
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and process.name != null and
   (process.thread.capabilities.effective : "CAP_SET?ID" or process.thread.capabilities.permitted : "CAP_SET?ID") and 
   user.id != "0" and not (
     process.parent.executable : ("/tmp/newroot/*", "/opt/carbonblack*") or
     process.parent.executable in (
       "/opt/SolarWinds/Agent/bin/Plugins/JobEngine/SolarWinds.Agent.JobEngine.Plugin", "/usr/bin/vmware-toolbox-cmd",
       "/usr/bin/dbus-daemon", "/usr/bin/update-notifier", "/usr/share/language-tools/language-options",
       "/opt/SolarWinds/Agent/*", "/usr/local/sbin/lynis.sh"
     ) or
     process.executable : ("/opt/dynatrace/*", "/tmp/newroot/*", "/opt/SolarWinds/Agent/*") or
     process.executable in (
       "/bin/fgrep", "/usr/bin/sudo", "/usr/bin/pkexec", "/usr/lib/cockpit/cockpit-session", "/usr/sbin/suexec"
     ) or
     process.parent.name in ("update-notifier", "language-options", "osqueryd", "saposcol", "dbus-daemon", "osqueryi", "sdbrun") or
     process.command_line like ("sudo*BECOME-SUCCESS*", "/bin/sh*sapsysinfo.sh*", "sudo su", "sudo su -") or
     process.name == "sudo" or
     process.parent.command_line like "/usr/bin/python*ansible*"
   )]
  [process where host.os.type == "linux" and event.action == "uid_change" and event.type == "change" and 
   (process.thread.capabilities.effective : "CAP_SET?ID" or process.thread.capabilities.permitted : "CAP_SET?ID")
   and user.id == "0"]
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Privilege Escalation via CAP_SETUID/SETGID Capabilities

In Linux, CAP_SETUID and CAP_SETGID capabilities allow processes to change user and group IDs, crucial for identity management. Adversaries exploit misconfigurations to gain root access. The detection rule identifies processes with these capabilities that elevate privileges to root, excluding benign scenarios, to flag potential misuse.

### Possible investigation steps

- Review the alert details to identify the specific process and host involved, focusing on `process.entity_id`, `process.name`, and `host.id`.
- Verify the process's capabilities by checking `process.thread.capabilities.effective` and `process.thread.capabilities.permitted` to confirm the presence of CAP_SETUID or CAP_SETGID.
- Examine the process's parent information using `process.parent.executable` and `process.parent.name` to determine if the parent process is known or expected.
- Investigate the command line used to start the process with `process.command_line` to identify any suspicious or unexpected commands.
- Check the user context before and after the process execution by reviewing `user.id` to confirm if there was an unauthorized change to UID 0 (root).
- Use Osquery to gather additional context about the process and its capabilities. Example query: `SELECT pid, name, uid, gid, on_disk, path FROM processes WHERE pid = <process_id>;`
- Analyze the process's executable path with `process.executable` to ensure it is not located in a suspicious directory or matches known benign paths.
- Correlate the event with other logs or alerts from the same host to identify any related suspicious activities or patterns.
- Review the system's recent changes or configurations that might have inadvertently granted the process these capabilities.
- Consult threat intelligence sources to determine if the process or its behavior is associated with known privilege escalation techniques or campaigns.

### False positive analysis

- Processes related to system management tools like VMware, SolarWinds, and Dynatrace may trigger false positives due to their legitimate use of CAP_SETUID/SETGID capabilities for operational purposes. Users can handle these by adding exceptions for specific executables or paths such as "/usr/bin/vmware-toolbox-cmd" and "/opt/SolarWinds/Agent/*".
- System update and notification processes, including "update-notifier" and "language-options", might be flagged as they sometimes require elevated privileges. Exclude these by specifying their parent names or command lines in the detection rule.
- Security and monitoring tools like osquery and saposcol may also be flagged due to their need to access various system resources. Users should consider excluding these processes by their names or executable paths to prevent false alerts.
- Common administrative commands like "sudo" and "pkexec" are often used in legitimate scenarios to change user IDs. To manage these, users can exclude specific command lines or process names that are known to be safe in their environment.
- Automation tools such as Ansible, which may execute scripts with elevated privileges, can be excluded by identifying their command lines, such as those starting with "/usr/bin/python*ansible*".

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify the source of the privilege escalation, focusing on recent changes to system configurations and user permissions.
- Review system logs and security alerts to determine if any other systems have been compromised or if there are signs of lateral movement.
- Revoke any unnecessary CAP_SETUID and CAP_SETGID capabilities from processes and users to minimize the risk of future privilege escalation.
- Apply patches and updates to the operating system and any vulnerable applications to mitigate known exploits.
- Restore the system to a known good state using backups, ensuring that the backup is free from any malicious modifications.
- Implement enhanced logging policies to capture detailed information on process executions and user activities, aiding in future investigations.
- Integrate security tools such as intrusion detection systems (IDS) and endpoint detection and response (EDR) solutions to improve threat detection capabilities.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures accordingly.
- Educate users and administrators on security best practices and the importance of maintaining least privilege access to reduce the risk of privilege escalation attacks."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1068"
name = "Exploitation for Privilege Escalation"
reference = "https://attack.mitre.org/techniques/T1068/"

[[rule.threat.technique]]
id = "T1548"
name = "Abuse Elevation Control Mechanism"
reference = "https://attack.mitre.org/techniques/T1548/"
[[rule.threat.technique.subtechnique]]
id = "T1548.001"
name = "Setuid and Setgid"
reference = "https://attack.mitre.org/techniques/T1548/001/"



[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

