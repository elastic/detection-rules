[metadata]
creation_date = "2023/08/29"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for a sequence of 20 "id" command executions within 1 second by the same parent process. This
behavior is unusual, and may be indicative of the execution of an enumeration script such as LinPEAS or LinEnum. These
scripts leverage the "id" command to enumerate the privileges of all users present on the system.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Unusual User Privilege Enumeration via id"
risk_score = 21
rule_id = "afa135c0-a365-43ab-aa35-fd86df314a47"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id, process.parent.entity_id with maxspan=1s
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and 
   process.name == "id" and process.args_count == 2 and 
   not (process.parent.name == "rpm" or process.parent.args : "/var/tmp/rpm-tmp*")] with runs=20
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Unusual User Privilege Enumeration via id

In Linux environments, the `id` command is used to display user identity and group memberships, crucial for privilege assessment. Adversaries exploit this by executing scripts like LinPEAS to rapidly enumerate user privileges, potentially revealing sensitive information. The detection rule identifies suspicious activity by flagging rapid, repeated `id` executions, suggesting automated enumeration attempts, thus alerting analysts to potential reconnaissance activities.

### Possible investigation steps

- Review the alert details to confirm the host.id and process.parent.entity_id associated with the suspicious activity.
- Check the process execution timeline to verify if the 20 "id" command executions occurred within the specified 1-second window.
- Investigate the parent process of the "id" command using the process.parent.entity_id to determine if it is a known or legitimate process.
- Examine the process.parent.name and process.parent.args fields to identify any unusual or unexpected parent processes that might have triggered the "id" command.
- Use Osquery to list all processes running on the host at the time of the alert to identify any other suspicious activities. Example query: `SELECT pid, name, path, cmdline FROM processes WHERE start_time > (SELECT datetime('now', '-1 minute'));`
- Analyze the command-line arguments (process.args) used with the "id" command to check for any specific patterns or anomalies.
- Review system logs and audit logs for any other unusual activities or errors around the time of the alert.
- Investigate the user account associated with the process to determine if it has been compromised or is being misused.
- Check for any recent changes in user privileges or group memberships on the system that could indicate privilege escalation attempts.
- Correlate this activity with other alerts or incidents on the same host or network to identify potential patterns or coordinated attacks.

### False positive analysis

- System administration scripts or automated maintenance tasks that frequently execute the `id` command as part of their routine checks can trigger false positives. These scripts may be scheduled to run at regular intervals and are not indicative of malicious activity.
- Monitoring tools or security solutions that perform regular checks on user privileges for compliance or auditing purposes might also execute the `id` command multiple times in quick succession, leading to false alerts.
- Developers or system administrators testing scripts that involve user privilege checks could inadvertently cause the rule to trigger during development or debugging sessions.
- To manage these false positives, users can create exceptions for known benign processes by excluding specific parent process names or paths that are identified as non-threatening. This can be done by updating the detection rule to ignore executions originating from trusted scripts or applications.
- Another approach is to adjust the threshold of the rule to better fit the environment's normal behavior, such as increasing the number of allowed `id` executions or extending the time window, while ensuring it still effectively detects genuine threats.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to confirm the presence of enumeration scripts like LinPEAS or LinEnum by reviewing process execution logs and command history.
- Analyze the parent process and its origin to determine if the activity was initiated by a legitimate user or an adversary.
- Escalate the incident to the security operations center (SOC) for further analysis and to assess the potential impact on other systems within the network.
- Review and enhance logging policies to ensure comprehensive monitoring of command executions and user activities, focusing on privilege escalation attempts.
- Implement additional security measures such as multi-factor authentication and least privilege access to reduce the risk of unauthorized privilege enumeration.
- Restore the system to its operational state by removing any unauthorized scripts or tools and applying necessary security patches.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Educate users on recognizing and reporting suspicious activities to improve overall security awareness within the organization.
- Leverage MITRE ATT&CK framework to understand the adversary's tactics and techniques, and apply relevant threat intelligence to enhance detection and response capabilities."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1033"
name = "System Owner/User Discovery"
reference = "https://attack.mitre.org/techniques/T1033/"


[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

