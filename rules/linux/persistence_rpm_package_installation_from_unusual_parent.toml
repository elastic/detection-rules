[metadata]
creation_date = "2024/07/10"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule leverages the new_terms rule type to identify the installation of RPM packages by an unusual parent process.
RPM is a package management system used in Linux systems such as Red Hat, CentOS and Fedora. Attacks may backdoor RPM
packages to gain initial access or install malicious RPM packages to maintain persistence.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "RPM Package Installed by Unusual Parent Process"
risk_score = 21
rule_id = "8cc72fa3-70ae-4ea1-bee2-8e6aaf3c1fcf"
setup = """## Setup
This rule requires data coming in from Elastic Defend.
### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.
#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).
#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
host.os.type:linux and event.category:process and event.type:start and event.action:exec and process.name:rpm and
process.args:("-i" or "--install")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating RPM Package Installed by Unusual Parent Process

RPM is a crucial package management tool in Linux systems like Red Hat and CentOS, facilitating software installation and updates. Adversaries may exploit RPM by installing backdoored or malicious packages to gain persistence or initial access. The detection rule identifies anomalies by flagging RPM installations initiated by atypical parent processes, signaling potential unauthorized activities.

### Possible investigation steps

- Review the alert details to identify the specific host and timestamp of the RPM installation event.
- Examine the parent process of the RPM installation using the `process.parent.name` and `process.parent.pid` fields to determine if it is indeed unusual or suspicious.
- Check the command-line arguments used during the RPM installation by reviewing the `process.args` field to understand what package was being installed.
- Investigate the user account associated with the RPM installation event using the `user.name` field to determine if the action was authorized or expected.
- Use Osquery to list all RPM packages installed on the host and identify any recent additions or modifications. Example query: `SELECT name, version, release, install_time FROM rpm_packages WHERE install_time > strftime('%s', '2023-10-01');`
- Cross-reference the installed package name and version with known repositories or package signatures to verify its legitimacy.
- Analyze the network activity around the time of the RPM installation to identify any unusual outbound or inbound connections that could indicate data exfiltration or command-and-control activity.
- Review system logs for any other suspicious activities or errors around the time of the RPM installation to gather additional context.
- Check for any recent privilege escalation events on the host that could have allowed an adversary to perform the RPM installation.
- Consult threat intelligence sources to determine if the package or the parent process is associated with known malicious activity or campaigns.

### False positive analysis

- System administrators or automated scripts may frequently install or update RPM packages as part of routine maintenance, which could trigger the rule if these actions are initiated by non-standard parent processes like custom scripts or management tools.
- Development environments often use containerization or virtualization tools that might execute RPM installations through atypical parent processes, leading to false positives.
- Security or monitoring tools that perform regular checks or updates on system packages might also appear as unusual parent processes when executing RPM commands.
- To manage these false positives, users can create exceptions for known benign parent processes by adding them to an allowlist, ensuring that routine administrative tasks or automated processes do not trigger alerts.
- Regularly review and update the list of excluded parent processes to adapt to changes in system management practices or toolsets, maintaining a balance between security and operational efficiency.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Verify the legitimacy of the parent process that initiated the RPM installation by reviewing process logs and correlating with known benign activities.
- Conduct a thorough investigation to identify any malicious RPM packages installed, using file integrity monitoring and package verification tools.
- Remove any identified malicious or unauthorized RPM packages and replace them with verified, clean versions from trusted repositories.
- Escalate the incident to the security operations team if the investigation reveals signs of a broader compromise or if the threat actor's identity and intent are unclear.
- Implement enhanced logging policies to capture detailed process execution data, including parent-child process relationships, to aid in future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Restore the system to its operational state by applying the latest security patches and updates, and ensure all software is up-to-date.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Implement system hardening measures, such as disabling unnecessary services and enforcing least privilege access controls, to reduce the attack surface."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique]]
id = "T1546"
name = "Event Triggered Execution"
reference = "https://attack.mitre.org/techniques/T1546/"
[[rule.threat.technique.subtechnique]]
id = "T1546.016"
name = "Installer Packages"
reference = "https://attack.mitre.org/techniques/T1546/016/"


[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1195"
name = "Supply Chain Compromise"
reference = "https://attack.mitre.org/techniques/T1195/"
[[rule.threat.technique.subtechnique]]
id = "T1195.002"
name = "Compromise Software Supply Chain"
reference = "https://attack.mitre.org/techniques/T1195/002/"



[rule.threat.tactic]
id = "TA0001"
name = "Initial Access"
reference = "https://attack.mitre.org/tactics/TA0001/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.parent.executable"]
[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-7d"


