[metadata]
creation_date = "2023/10/05"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects potential privilege escalation attempts through Looney Tunables (CVE-2023-4911). Looney Tunables is a
buffer overflow vulnerability in GNU C Library's dynamic loader's processing of the GLIBC_TUNABLES environment variable.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Privilege Escalation via CVE-2023-4911"
references = [
    "https://blog.qualys.com/vulnerabilities-threat-research/2023/10/03/cve-2023-4911-looney-tunables-local-privilege-escalation-in-the-glibcs-ld-so",
]
risk_score = 73
rule_id = "6d8685a1-94fa-4ef7-83de-59302e7c4ca8"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).

Elastic Defend integration does not collect environment variable logging by default.
In order to capture this behavior, this rule requires a specific configuration option set within the advanced settings of the Elastic Defend integration.
 #### To set up environment variable capture for an Elastic Agent policy:
- Go to “Security → Manage → Policies”.
- Select an “Elastic Agent policy”.
- Click “Show advanced settings”.
- Scroll down or search for “linux.advanced.capture_env_vars”.
- Enter the names of environment variables you want to capture, separated by commas.
- For this rule the linux.advanced.capture_env_vars variable should be set to "GLIBC_TUNABLES".
- Click “Save”.
After saving the integration change, the Elastic Agents running this policy will be updated and the rule will function properly.
For more information on capturing environment variables refer to the [helper guide](https://www.elastic.co/guide/en/security/current/environment-variable-capture.html).
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Use Case: Vulnerability",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id, process.parent.entity_id, process.executable with maxspan=5s
 [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and 
  process.env_vars : "*GLIBC_TUNABLES=glibc.*=glibc.*=*"] with runs=5
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Privilege Escalation via CVE-2023-4911

CVE-2023-4911 exploits a buffer overflow in the GNU C Library's dynamic loader, specifically targeting the GLIBC_TUNABLES environment variable. This vulnerability allows attackers to manipulate memory, potentially escalating privileges. The detection rule identifies suspicious activity by monitoring Linux processes for specific environment variable patterns, flagging rapid, repeated execution attempts indicative of exploitation efforts.

### Possible investigation steps

- Review the alert details to confirm the presence of the GLIBC_TUNABLES environment variable pattern in the process execution, as indicated by the query.
- Identify the host and process information from the alert, focusing on `host.id`, `process.parent.entity_id`, and `process.executable` fields to understand which system and application are involved.
- Check the frequency and timing of the alert by examining the `maxspan=5s` and `runs=5` parameters to determine if the execution attempts are rapid and repeated, suggesting exploitation.
- Use Osquery to list all processes on the affected host that have the GLIBC_TUNABLES environment variable set. Example query: `SELECT pid, name, path, cmdline FROM processes WHERE cmdline LIKE '%GLIBC_TUNABLES=glibc%'`.
- Investigate the parent process (`process.parent.entity_id`) to determine if it is a legitimate process or potentially compromised, which could indicate how the exploit was initiated.
- Analyze the `process.executable` path to verify if it is a known and trusted application or if it has been tampered with or replaced.
- Cross-reference the alert with any recent changes or updates on the affected host that might have introduced the vulnerability or been exploited.
- Check system logs and audit logs on the affected host for any unusual activity or errors related to the dynamic loader or GLIBC_TUNABLES environment variable.
- Investigate network activity from the affected host around the time of the alert to identify any suspicious outbound connections or data exfiltration attempts.
- Correlate the alert with other security events or alerts in the environment to determine if this is part of a broader attack campaign or isolated incident.

### False positive analysis

- Known false positives for the CVE-2023-4911 detection rule may arise from legitimate applications or scripts that frequently set the GLIBC_TUNABLES environment variable for performance tuning or compatibility reasons. These applications might trigger the rule due to their rapid execution patterns, which mimic exploitation attempts.
- System administrators can manage these false positives by identifying and documenting legitimate processes that use GLIBC_TUNABLES. Once identified, these processes can be excluded from the detection rule by creating exceptions based on specific process names, paths, or other unique identifiers.
- Another approach to handle false positives is to adjust the detection rule's sensitivity by increasing the threshold for the number of rapid executions or extending the time window (maxspan) to better differentiate between benign and malicious activities.
- Regularly reviewing and updating the list of exceptions is crucial, as software updates or changes in system configurations might alter the behavior of legitimate applications, potentially leading to new false positives.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further exploitation and lateral movement.
- Conduct a thorough investigation to confirm the presence of CVE-2023-4911 exploitation by reviewing logs and correlating with the detection rule's findings.
- Terminate any suspicious processes identified as exploiting the GLIBC_TUNABLES environment variable to halt ongoing attacks.
- Apply the latest security patches and updates to the GNU C Library to mitigate the vulnerability.
- Restore the system from a known good backup taken before the exploitation occurred to ensure system integrity.
- Implement enhanced logging policies to capture detailed process execution and environment variable changes for future analysis.
- Integrate security solutions with SIEM systems to improve detection capabilities and automate alerting for similar threats.
- Escalate the incident to the security operations center (SOC) for further analysis and to determine if additional systems are affected.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Harden the system by disabling unnecessary services, enforcing least privilege access, and regularly auditing environment variables for anomalies."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1068"
name = "Exploitation for Privilege Escalation"
reference = "https://attack.mitre.org/techniques/T1068/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

