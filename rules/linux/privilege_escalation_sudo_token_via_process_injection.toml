[metadata]
creation_date = "2023/07/31"
integration = ["endpoint"]
maturity = "production"
min_stack_version = "8.16.0"
min_stack_comments = "Breaking change at 8.16.0 for the Endpoint Integration with respect to ecs field process.group.id"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule detects potential sudo token manipulation attacks through process injection by monitoring the use of a
debugger (gdb) process followed by a successful uid change event during the execution of the sudo process. A sudo token
manipulation attack is performed by injecting into a process that has a valid sudo token, which can then be used by
attackers to activate their own sudo token. This attack requires ptrace to be enabled in conjunction with the existence
of a living process that has a valid sudo token with the same uid as the current user.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Sudo Token Manipulation via Process Injection"
references = ["https://github.com/nongiach/sudo_inject"]
risk_score = 47
rule_id = "ff9bc8b9-f03b-4283-be58-ee0a16f5a11b"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id, process.session_leader.entity_id with maxspan=15s
[ process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and 
  process.name == "gdb" and process.user.id != "0" and process.group.id != "0" ]
[ process where host.os.type == "linux" and event.action == "uid_change" and event.type == "change" and 
  process.name == "sudo" and process.user.id == "0" and process.group.id == "0" ]
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Sudo Token Manipulation via Process Injection

In Linux environments, process injection can be exploited by adversaries to manipulate sudo tokens, allowing unauthorized privilege escalation. Attackers may use debugging tools like gdb to inject code into processes with valid sudo tokens, leveraging ptrace capabilities. The detection rule identifies this threat by monitoring for gdb execution followed by a uid change in the sudo process, indicating potential token manipulation.

### Possible investigation steps

- Review the alert details to confirm the host.id and process.session_leader.entity_id involved in the sequence to ensure the correct context is being investigated.
- Verify the execution of the gdb process by checking the process.name field and ensure it matches "gdb" with a non-root user and group id, as indicated by process.user.id != "0" and process.group.id != "0".
- Investigate the timing and sequence of events by examining the maxspan=15s condition to determine if the gdb execution and sudo uid change occurred within this short timeframe.
- Check the process tree and parent-child relationships for the gdb process to identify any suspicious parent processes or anomalies in the process hierarchy.
- Analyze the sudo process event where the uid_change occurred, ensuring the process.name is "sudo" and the user and group ids are root (process.user.id == "0" and process.group.id == "0").
- Use Osquery to gather additional context on the processes involved. For example, run the following query to list processes with their parent processes and command lines: `SELECT pid, parent, name, path, cmdline FROM processes WHERE pid IN (SELECT pid FROM processes WHERE name = 'gdb' OR name = 'sudo');`
- Investigate the ptrace settings on the host to determine if ptrace is enabled, which is necessary for process injection. This can be done by checking the value of `/proc/sys/kernel/yama/ptrace_scope`.
- Review system logs and audit logs for any additional context or anomalies around the time of the alert, focusing on user activity and any other privilege escalation attempts.
- Examine the user account associated with the gdb process to determine if there are any signs of compromise or unusual activity, such as recent logins from unexpected locations or times.
- Correlate the findings with any other alerts or incidents involving the same host or user to identify potential patterns or broader attack campaigns.

### False positive analysis

- Debugging activities by developers or system administrators using gdb on processes with valid sudo tokens can trigger false positives. To manage this, users can create exceptions for specific user IDs or process names that are known to be involved in legitimate debugging activities.
- Automated scripts or maintenance tasks that involve gdb and result in uid changes in the sudo process may also cause false positives. Users can handle these by identifying and excluding specific scripts or cron jobs from the detection rule.
- Security tools or monitoring solutions that utilize gdb for legitimate process analysis might be mistakenly flagged. Users should whitelist these tools by specifying their process names or user IDs in the exception list.
- Training or testing environments where gdb is frequently used for educational purposes can lead to false positives. Users can exclude these environments by filtering based on host identifiers or specific session leader entity IDs.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Use forensic tools to capture memory and disk images of the affected system for further analysis and evidence preservation.
- Investigate the process tree and logs to identify the source of the gdb execution and any associated processes that may have been injected.
- Check for unauthorized changes in user privileges and revert any unauthorized uid changes detected in the sudo process.
- Review and update ptrace settings to restrict debugging capabilities to trusted users only, reducing the risk of process injection.
- Implement enhanced logging for sudo and gdb activities, ensuring that all execution and privilege changes are recorded and monitored.
- Integrate security information and event management (SIEM) solutions to correlate and analyze logs for suspicious activities related to process injection.
- Escalate the incident to the security operations center (SOC) or incident response team for further investigation and threat intelligence correlation.
- Restore the system to its operational state by applying clean backups and verifying the integrity of critical system files and configurations.
- Conduct a security review and harden the system by applying the principle of least privilege, ensuring that only necessary users have sudo access, and regularly updating all software and security patches."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1055"
name = "Process Injection"
reference = "https://attack.mitre.org/techniques/T1055/"
[[rule.threat.technique.subtechnique]]
id = "T1055.008"
name = "Ptrace System Calls"
reference = "https://attack.mitre.org/techniques/T1055/008/"


[[rule.threat.technique]]
id = "T1548"
name = "Abuse Elevation Control Mechanism"
reference = "https://attack.mitre.org/techniques/T1548/"
[[rule.threat.technique.subtechnique]]
id = "T1548.003"
name = "Sudo and Sudo Caching"
reference = "https://attack.mitre.org/techniques/T1548/003/"



[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

