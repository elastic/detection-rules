[metadata]
creation_date = "2024/02/01"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Detects suspicious process events executed by the APT package manager, potentially indicating persistence through an APT
backdoor. In Linux, APT (Advanced Package Tool) is a command-line utility used for handling packages on Debian-based
systems, providing functions for installing, updating, upgrading, and removing software along with managing package
repositories. Attackers can backdoor APT to gain persistence by injecting malicious code into scripts that APT runs,
thereby ensuring continued unauthorized access or control each time APT is used for package management.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Suspicious APT Package Manager Execution"
references = ["https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms"]
risk_score = 47
rule_id = "ad959eeb-2b7b-4722-ba08-a45f6622f005"
setup = """## Setup


This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Execution",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id with maxspan=5s
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and
   process.parent.name == "apt" and process.args == "-c" and process.name in (
     "bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish"
   )
  ] by process.entity_id
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and process.name : (
     "bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish", "python*", "php*",
     "perl", "ruby", "lua*", "openssl", "nc", "netcat", "ncat", "telnet", "awk"
   )
  ] by process.parent.entity_id
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious APT Package Manager Execution

APT, a tool for managing software on Debian-based Linux systems, can be exploited by attackers to maintain persistence. By injecting malicious code into scripts executed by APT, adversaries can ensure unauthorized access whenever APT is used. The detection rule identifies suspicious executions by monitoring for shell or scripting language processes initiated by APT, indicating potential backdoor activity.

### Possible investigation steps

- Review the alert details to identify the specific host and process entity IDs involved in the suspicious execution.
- Examine the process tree to understand the parent-child relationship, focusing on the parent process named "apt" and its child processes, especially those involving shell or scripting languages.
- Check the command-line arguments of the suspicious processes, particularly looking for the "-c" flag, which may indicate execution of a command string.
- Investigate the timing of the suspicious process events to determine if they align with legitimate package management activities or if they appear anomalous.
- Use Osquery to gather additional context on the host by running a query such as: `SELECT * FROM processes WHERE name IN ('bash', 'dash', 'sh', 'tcsh', 'csh', 'zsh', 'ksh', 'fish', 'python', 'php', 'perl', 'ruby', 'lua', 'openssl', 'nc', 'netcat', 'ncat', 'telnet', 'awk') AND parent = (SELECT pid FROM processes WHERE name = 'apt');`
- Analyze the environment variables and working directory of the suspicious processes to identify any unusual settings or paths that could indicate tampering.
- Review the system logs for any additional context around the time of the alert, such as user logins, cron jobs, or other scheduled tasks that might correlate with the suspicious activity.
- Check for any recent changes to APT configuration files or scripts that could have been modified to include malicious code.
- Investigate the network activity of the host around the time of the alert to identify any suspicious outbound connections that could suggest data exfiltration or command-and-control communication.
- Correlate the findings with other security alerts or incidents involving the same host or user account to determine if this is part of a broader attack campaign.

### False positive analysis

- Routine administrative tasks: System administrators often use APT to perform legitimate package management tasks that may trigger the detection rule. These tasks can include running scripts for configuration or maintenance purposes, which might involve shell or scripting language processes.
- Custom scripts: Organizations may have custom scripts that are executed during package installations or updates. These scripts could be mistakenly flagged as suspicious if they involve shell or scripting language processes.
- Automated deployment tools: Tools like Ansible, Puppet, or Chef might use APT as part of their automated deployment processes, leading to benign script executions that could be misinterpreted as suspicious.
- To manage false positives, users can create exceptions for known benign processes or scripts by whitelisting specific process names or command-line arguments that are frequently used in legitimate operations. This can be done by adjusting the detection rule to exclude these known non-threatening behaviors.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify any malicious scripts or code injected into APT-related scripts or processes.
- Review and analyze logs from the affected system to trace the origin and timeline of the suspicious APT execution.
- Remove any identified malicious scripts or code and restore original APT scripts from a trusted source or backup.
- Update all system packages and apply security patches to mitigate any known vulnerabilities that could be exploited.
- Implement enhanced logging policies to capture detailed process execution and network activity for future investigations.
- Integrate security tools such as intrusion detection systems (IDS) and endpoint detection and response (EDR) solutions to monitor for similar threats.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and threat intelligence sharing.
- Restore the system to its operational state by verifying the integrity of critical system files and configurations.
- Harden the system by disabling unnecessary services, enforcing strong authentication mechanisms, and regularly reviewing user permissions and access controls."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique]]
id = "T1546"
name = "Event Triggered Execution"
reference = "https://attack.mitre.org/techniques/T1546/"
[[rule.threat.technique.subtechnique]]
id = "T1546.016"
name = "Installer Packages"
reference = "https://attack.mitre.org/techniques/T1546/016/"


[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

