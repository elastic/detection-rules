[metadata]
creation_date = "2020/04/17"
integration = ["endpoint", "auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = "Adversaries may encode/decode data in an attempt to evade detection by host- or network-based security controls."
false_positives = [
    """
    Automated tools such as Jenkins may encode or decode files as part of their normal behavior. These events can be
    filtered by the process executable or username values.
    """,
]
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*", "auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Base16 or Base32 Encoding/Decoding Activity"
risk_score = 21
rule_id = "debff20a-46bc-4a4d-bae5-5cdd14222795"
setup = """## Setup

This rule requires data coming in from one of the following integrations:
- Elastic Defend
- Auditbeat

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).

### Auditbeat Setup
Auditbeat is a lightweight shipper that you can install on your servers to audit the activities of users and processes on your systems. For example, you can use Auditbeat to collect and centralize audit events from the Linux Audit Framework. You can also use Auditbeat to detect changes to critical files, like binaries and configuration files, and identify potential security policy violations.

#### The following steps should be executed in order to add the Auditbeat on a Linux System:
- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.
- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setup-repositories.html).
- To run Auditbeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-docker.html).
- To run Auditbeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-kubernetes.html).
- For complete “Setup and Run Auditbeat” information refer to the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setting-up-and-running.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Endgame",
    "Data Source: Elastic Defend",
    "Data Source: Auditd Manager",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action in ("exec", "exec_event", "executed", "process_started")
 and process.name in ("base16", "base32", "base32plain", "base32hex") and
not process.args in ("--help", "--version")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Base16 or Base32 Encoding/Decoding Activity

Base16 and Base32 are encoding schemes that convert binary data into text, making it easier to transmit over text-based protocols. Adversaries exploit these encodings to obfuscate data, evading detection by security systems. The detection rule identifies suspicious encoding activities by monitoring specific processes on Linux systems, excluding benign actions like help or version checks, to flag potential misuse.

### Possible investigation steps

- Review the alert details to confirm the process name involved is one of the specified encoding tools: "base16", "base32", "base32plain", or "base32hex".
- Examine the process arguments to ensure they do not include benign actions like "--help" or "--version", which are excluded in the detection rule.
- Check the user account associated with the process to determine if it is a known and trusted user or if it might be compromised.
- Investigate the parent process of the encoding activity to understand the context in which the encoding tool was executed.
- Use Osquery to gather additional context about the process. For example, run the following query to list all processes with their parent process IDs and command-line arguments: `SELECT pid, name, path, cmdline, parent FROM processes WHERE name IN ('base16', 'base32', 'base32plain', 'base32hex');`
- Analyze recent command history for the user associated with the process to identify any suspicious commands or patterns leading up to the encoding activity.
- Review system logs for any related events or anomalies around the time the encoding process was executed, such as unusual login attempts or file access patterns.
- Check for any network connections initiated by the process to determine if data might be exfiltrated or communicated to an external host.
- Investigate any file modifications or creations by the process to identify if encoded data was written to disk or if there are any suspicious files.
- Correlate the encoding activity with other security alerts or indicators of compromise to assess if it is part of a larger attack campaign or isolated incident.

### False positive analysis

- Legitimate administrative tasks: System administrators may use Base16 or Base32 encoding/decoding for legitimate purposes such as data integrity checks or configuration management. These activities can be mistaken for malicious behavior.
- Automated scripts: Some automated scripts or applications may use Base16 or Base32 encoding as part of their normal operation, leading to false positives if these processes are not excluded.
- Development and testing: Developers might use encoding/decoding tools during software development or testing phases, which can trigger alerts if not properly accounted for.
- To manage false positives, users can create exceptions for known benign processes by adding specific process names or arguments to an exclusion list. This can be done by updating the detection rule to ignore certain command-line arguments or by whitelisting processes that are verified as non-threatening.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further data exfiltration or lateral movement by the adversary.
- Conduct a thorough investigation of the process execution logs to identify the source and scope of the encoding/decoding activity.
- Analyze the command-line arguments and any associated scripts or files to determine if sensitive data was encoded or if malicious payloads were delivered.
- Review user accounts and permissions on the affected system to identify any unauthorized access or privilege escalation attempts.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the activity is part of a larger attack campaign.
- Implement enhanced logging policies to capture detailed process execution data, including command-line arguments and user context, for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar encoding/decoding activities.
- Restore the system to its operational state by removing any malicious files, applying security patches, and verifying the integrity of critical system files.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures accordingly.
- Implement system hardening measures, such as disabling unnecessary services and enforcing strict access controls, to reduce the attack surface and prevent future incidents."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1027"
name = "Obfuscated Files or Information"
reference = "https://attack.mitre.org/techniques/T1027/"

[[rule.threat.technique]]
id = "T1140"
name = "Deobfuscate/Decode Files or Information"
reference = "https://attack.mitre.org/techniques/T1140/"


[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

