[metadata]
creation_date = "2023/08/29"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for the copying or moving of a system binary. Adversaries may copy/move and rename system binaries to
evade detection. Copying a system binary to a different location should not occur often, so if it does, the activity
should be investigated.
"""
from = "now-9m"
index = ["logs-endpoint.events.file*"]
language = "eql"
license = "Elastic License v2"
name = "System Binary Moved or Copied"
references = [
    "https://intezer.com/blog/research/kaiji-new-chinese-linux-malware-turning-to-golang/",
    "https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms",
]
risk_score = 47
rule_id = "fda1d332-5e08-4f27-8a9b-8c802e3292a6"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "linux" and event.type == "change" and event.action == "rename" and process.name != null and
file.Ext.original.path : (
  "/bin/*", "/usr/bin/*", "/usr/local/bin/*", "/sbin/*", "/usr/sbin/*", "/usr/local/sbin/*"
) and not (
  process.executable in (
    "/bin/dpkg", "/usr/bin/dpkg", "/bin/dockerd", "/usr/bin/dockerd", "/usr/sbin/dockerd", "/bin/microdnf",
    "/usr/bin/microdnf", "/bin/rpm", "/usr/bin/rpm", "/bin/snapd", "/usr/bin/snapd", "/bin/yum", "/usr/bin/yum",
    "/bin/dnf", "/usr/bin/dnf", "/bin/podman", "/usr/bin/podman", "/bin/dnf-automatic", "/usr/bin/dnf-automatic",
    "/bin/pacman", "/usr/bin/pacman", "/usr/bin/dpkg-divert", "/bin/dpkg-divert", "/sbin/apk", "/usr/sbin/apk",
    "/usr/local/sbin/apk", "/usr/bin/apt", "/usr/sbin/pacman", "/bin/podman", "/usr/bin/podman", "/usr/bin/puppet",
    "/bin/puppet", "/opt/puppetlabs/puppet/bin/puppet", "/usr/bin/chef-client", "/bin/chef-client",
    "/bin/autossl_check", "/usr/bin/autossl_check", "/proc/self/exe", "/dev/fd/*",  "/usr/bin/pamac-daemon",
    "/bin/pamac-daemon", "/usr/lib/snapd/snapd", "/usr/local/bin/dockerd", "/usr/libexec/netplan/generate",
    "/usr/bin/update-alternatives", "/bin/update-alternatives", "/usr/sbin/update-alternatives",
    "/sbin/update-alternatives", "/usr/bin/pip3", "/bin/pip3", "/usr/local/bin/pip3", "/usr/local/bin/node",
    "/bin/node", "/usr/bin/node", "/sbin/apk", "/usr/sbin/apk", "/usr/local/sbin/apk", "/usr/bin/pip", "/bin/pip",
    "/usr/local/bin/pip", "/usr/libexec/platform-python", "/usr/bin/platform-python", "/bin/platform-python",
    "/usr/lib/systemd/systemd", "/usr/sbin/sshd", "/sbin/sshd", "/usr/local/sbin/sshd", "/usr/sbin/crond", "/sbin/crond",
    "/usr/local/sbin/crond", "/usr/sbin/gdm"
  ) or
  process.name like (
    "python*", "packagekitd", "systemd", "ln", "platform-python", "dnf_install", "runc", "apt-get", "ssm-agent-worker",
    "convert-usrmerge", "updatenow.static-cpanelsync", "apk", "exe", "php", "containerd-shim-runc-v2", "dpkg", "sed",
    "platform-python*", "gedit", "crond", "sshd", "ruby", "sudo", "chainctl", "update-alternatives", "pip*"
  ) or
  file.Ext.original.path : (
    "/bin/*.tmp", "/usr/bin/*.tmp", "/usr/local/bin/*.tmp", "/sbin/*.tmp", "/usr/sbin/*.tmp", "/usr/local/sbin/*.tmp"
  ) or
  file.extension in ("swp", "swpx", "swx", "dpkg-remove") or
  file.Ext.original.extension == "dpkg-new" or
  process.executable : ("/nix/store/*", "/var/lib/dpkg/*", "/tmp/vmis.*", "/snap/*", "/dev/fd/*") or
  process.executable == null or
  (process.name == "sed" and file.name : "sed*") or
  (process.name == "perl" and file.name : "e2scrub_all.tmp*") 
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating System Binary Moved or Copied

System binaries are essential executables in Linux environments, responsible for core system functions. Adversaries may exploit these by moving or copying them to evade detection, often renaming them to mask malicious activities. The detection rule identifies unusual movements of these binaries, excluding legitimate processes and paths, to flag potential threats. This helps in identifying masquerading attempts, aligning with defense evasion tactics.

### Possible investigation steps

- Review the alert details to identify the specific system binary that was moved or copied, focusing on the `file.Ext.original.path` and `event.action` fields.
- Check the `process.name` and `process.executable` fields to determine which process initiated the action and assess if it is a known legitimate process or potentially malicious.
- Investigate the `host.os.type` to confirm the operating system environment and ensure the alert pertains to a Linux system.
- Examine the `event.type` field to verify that the event is indeed a "change" event, indicating a modification to the file system.
- Use Osquery to gather additional context about the process that triggered the alert. For example, run the following query to get more details about the process: `SELECT * FROM processes WHERE name = '<process.name from alert>';`
- Check the system logs for any related entries around the time of the alert to identify any other suspicious activities or anomalies.
- Investigate the user account associated with the process by checking the `process.user` field, if available, to determine if the action was performed by a legitimate user.
- Look for any recent changes in the system's package management logs (e.g., dpkg, rpm) that might explain the movement or copying of the binary.
- Assess the file's new location and permissions to determine if it aligns with typical system configurations or if it appears suspicious.
- Cross-reference the alert with any other recent alerts or incidents involving the same host or process to identify potential patterns or ongoing threats.

### False positive analysis

- Known false positives may arise from legitimate system updates or package management activities, where system binaries are moved or copied as part of routine operations. These include processes like `dpkg`, `rpm`, `yum`, `apt`, and `snapd`, which are commonly used for installing or updating software packages.
- System maintenance tasks performed by administrators or automated scripts might also trigger this rule. For example, using `ln` to create symbolic links or `sed` for in-place file editing can result in file movements that are benign.
- Development and testing environments often involve frequent changes to system binaries, especially when using tools like `pip`, `node`, or `platform-python` for package management and script execution.
- To manage these false positives, users can create exceptions for known benign processes and paths by adding them to the exclusion list in the detection rule. This involves specifying trusted process names, executables, or file paths that are known to perform legitimate operations.
- Regularly review and update the exclusion list to ensure it reflects the current environment and operational needs, minimizing unnecessary alerts while maintaining security vigilance.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify the source and scope of the binary movement, examining logs and system changes.
- Verify the integrity of the moved or copied binaries by comparing them with known good versions or using a trusted source.
- Remove or quarantine any unauthorized or suspicious binaries and restore legitimate versions from backups or trusted repositories.
- Escalate the incident to the security operations team if the activity is confirmed as malicious, providing detailed findings and context.
- Implement enhanced logging policies to capture detailed file and process activity, ensuring future incidents can be detected and analyzed more effectively.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities and provide context for similar threats.
- Review and update access controls and permissions to limit the ability of unauthorized users to move or copy system binaries.
- Conduct a post-incident review to identify gaps in detection and response, and update security policies and procedures accordingly.
- Apply system hardening measures, such as enabling file integrity monitoring and restricting execution of binaries from non-standard directories, to reduce the attack surface."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1036"
name = "Masquerading"
reference = "https://attack.mitre.org/techniques/T1036/"

[[rule.threat.technique.subtechnique]]
id = "T1036.003"
name = "Rename System Utilities"
reference = "https://attack.mitre.org/techniques/T1036/003/"

[[rule.threat.technique]]
id = "T1564"
name = "Hide Artifacts"
reference = "https://attack.mitre.org/techniques/T1564/"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
