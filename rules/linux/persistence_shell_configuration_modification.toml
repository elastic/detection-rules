[metadata]
creation_date = "2024/04/30"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors the creation/alteration of a shell configuration file. Unix systems use shell configuration files to
set environment variables, create aliases, and customize the user's environment. Adversaries may modify or add a shell
configuration file to execute malicious code and gain persistence in the system. This behavior is consistent with the
Kaiji malware family.
"""
false_positives = ["Legitimate user shell modification activity."]
from = "now-9m"
index = ["logs-endpoint.events.file*"]
language = "eql"
license = "Elastic License v2"
name = "Shell Configuration Creation or Modification"
references = [
    "https://intezer.com/blog/research/kaiji-new-chinese-linux-malware-turning-to-golang/",
    "https://www.elastic.co/security-labs/primer-on-persistence-mechanisms",
]
risk_score = 47
rule_id = "28f6f34b-8e16-487a-b5fd-9d22eb903db8"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
file where host.os.type == "linux" and event.action in ("rename", "creation") and file.path : (
  // system-wide configurations
  "/etc/profile", "/etc/profile.d/*", "/etc/bash.bashrc", "/etc/bash.bash_logout", "/etc/zsh/*",
  "/etc/csh.cshrc", "/etc/csh.login", "/etc/fish/config.fish", "/etc/ksh.kshrc",
  // root and user configurations
  "/home/*/.profile", "/home/*/.bashrc", "/home/*/.bash_login", "/home/*/.bash_logout", "/home/*/.bash_profile",
  "/root/.profile", "/root/.bashrc", "/root/.bash_login", "/root/.bash_logout", "/root/.bash_profile",
  "/home/*/.zprofile", "/home/*/.zshrc", "/root/.zprofile", "/root/.zshrc",
  "/home/*/.cshrc", "/home/*/.login", "/home/*/.logout", "/root/.cshrc", "/root/.login", "/root/.logout",
  "/home/*/.config/fish/config.fish", "/root/.config/fish/config.fish",
  "/home/*/.kshrc", "/root/.kshrc"
) and not (
  process.executable in (
    "/bin/dpkg", "/usr/bin/dpkg", "/bin/dockerd", "/usr/bin/dockerd", "/usr/sbin/dockerd", "/bin/microdnf",
    "/usr/bin/microdnf", "/bin/rpm", "/usr/bin/rpm", "/bin/snapd", "/usr/bin/snapd", "/bin/yum", "/usr/bin/yum",
    "/bin/dnf", "/usr/bin/dnf", "/bin/podman", "/usr/bin/podman", "/bin/dnf-automatic", "/usr/bin/dnf-automatic",
    "/bin/pacman", "/usr/bin/pacman", "/usr/bin/dpkg-divert", "/bin/dpkg-divert", "/sbin/apk", "/usr/sbin/apk",
    "/usr/local/sbin/apk", "/usr/bin/apt", "/usr/sbin/pacman", "/bin/podman", "/usr/bin/podman", "/usr/bin/puppet",
    "/bin/puppet", "/opt/puppetlabs/puppet/bin/puppet", "/usr/bin/chef-client", "/bin/chef-client",
    "/bin/autossl_check", "/usr/bin/autossl_check", "/proc/self/exe", "/dev/fd/*",  "/usr/bin/pamac-daemon",
    "/bin/pamac-daemon", "/usr/lib/snapd/snapd", "/usr/sbin/adduser", "/usr/sbin/useradd", "/usr/local/bin/dockerd",
    "/usr/sbin/gdm", "/usr/bin/unzip", "/usr/bin/gnome-shell", "/sbin/mkhomedir_helper", "/usr/sbin/sshd",
    "/opt/puppetlabs/puppet/bin/ruby", "/usr/bin/xfce4-session", "/usr/libexec/oddjob/mkhomedir", "/sbin/useradd",
    "/usr/lib/systemd/systemd", "/usr/sbin/crond", "/usr/bin/pamac-daemon", "/usr/sbin/mkhomedir_helper",
    "/opt/pbis/sbin/lwsmd", "/usr/sbin/oddjobd"
  ) or
  file.extension in ("swp", "swpx", "swx", "dpkg-remove") or
  file.Ext.original.extension == "dpkg-new" or
  process.executable : (
    "/nix/store/*", "/var/lib/dpkg/*", "/tmp/vmis.*", "/snap/*", "/dev/fd/*", "/usr/lib/virtualbox/*",
    "/usr/libexec/platform-python*"
  ) or
  process.executable == null or
  process.name in ("adclient", "mkhomedir_helper", "teleport", "mkhomedir", "adduser", "desktopDaemon") or
  (process.name == "sed" and file.name : "sed*") or
  (process.name == "perl" and file.name : "e2scrub_all.tmp*") 
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Shell Configuration Creation or Modification

Shell configuration files in Unix systems are crucial for setting up user environments, including environment variables and command aliases. Adversaries exploit these files to execute malicious scripts and maintain persistence. The detection rule identifies suspicious creation or modification of these files, excluding legitimate processes and temporary files, to flag potential unauthorized changes indicative of malicious activity.

### Possible investigation steps

- Review the alert details to identify the specific shell configuration file that was created or modified, using the `file.path` field from the query.
- Check the `event.action` field to determine whether the file was newly created or renamed, which can provide context on the nature of the change.
- Investigate the `process.executable` field to identify the process responsible for the file modification, ensuring it is not part of the excluded legitimate processes.
- Examine the `process.name` field to gather more information about the process that triggered the alert, especially if it is not part of the known exclusions.
- Use Osquery to list recent modifications to shell configuration files with a query like: `SELECT path, mtime FROM file WHERE path IN ('/etc/profile', '/etc/bash.bashrc', '/home/*/.bashrc', '/root/.bashrc') ORDER BY mtime DESC LIMIT 10;` to verify the alert and gather additional context.
- Cross-reference the `process.executable` and `process.name` with known malicious binaries or scripts to assess potential threats.
- Check the `file.extension` and `file.Ext.original.extension` fields to ensure the file is not a temporary or transitional file, which might be benign.
- Investigate the user account associated with the file modification to determine if the activity aligns with expected behavior for that user.
- Review system logs around the time of the alert to identify any other suspicious activities or related events that might indicate a broader compromise.
- Analyze the contents of the modified shell configuration file to identify any unauthorized or suspicious entries, such as unexpected scripts or commands that could indicate persistence mechanisms.

### False positive analysis

- **Package Management Tools**: Actions by package managers like `dpkg`, `rpm`, `yum`, and `apt` can trigger the rule when they update or install software, as they may modify shell configuration files. Users can handle these by excluding the executables of these package managers from the rule.
- **Container and Virtualization Software**: Tools such as `dockerd`, `podman`, and `snapd` may modify shell configurations during container or virtual environment setups. Excluding these specific executables can prevent false positives.
- **User Account Management**: Commands like `adduser` and `useradd` might modify shell configuration files when creating new user accounts. Excluding these processes can help reduce false alerts.
- **System Maintenance Scripts**: Automated scripts or system maintenance tasks, such as those run by `cron` or `systemd`, might alter shell configurations. Users can exclude these processes or specific script names to avoid false positives.
- **Text Editors and Temporary Files**: Editors like `vim` create temporary files (e.g., with extensions like `.swp`) that might be flagged. Excluding these file extensions can prevent unnecessary alerts.
- **Development and Scripting Tools**: Tools like `perl` and `sed` might be used in scripts that modify shell configurations. Users can exclude these processes when they are known to be part of legitimate scripts.
- **Custom Exclusions**: Users can create custom exclusions for specific paths or processes that are known to be safe in their environment, ensuring that legitimate activities do not trigger false positives.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or spread of malicious activity.
- Conduct a thorough investigation to identify the scope of the compromise, focusing on recent changes to shell configuration files and correlating with known indicators of compromise related to the Kaiji malware family.
- Review and analyze logs from the system and any connected systems to trace the origin of the unauthorized changes and identify any additional compromised systems.
- Remove any unauthorized or malicious entries from the shell configuration files and restore them to their last known good state using backups if available.
- Update and patch the system to the latest security standards to mitigate any vulnerabilities that may have been exploited.
- Implement enhanced logging policies to capture detailed information on file modifications and process executions, ensuring that future unauthorized changes are detected promptly.
- Integrate security solutions such as intrusion detection systems (IDS) and endpoint detection and response (EDR) tools to provide real-time monitoring and alerting for suspicious activities.
- Conduct a security audit of user accounts and permissions to ensure that only authorized users have access to modify shell configuration files.
- Escalate the incident to the appropriate internal security team or external cybersecurity experts if the compromise is severe or if additional expertise is required.
- Educate users on security best practices, including recognizing phishing attempts and maintaining strong, unique passwords, to reduce the risk of future compromises."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1546"
name = "Event Triggered Execution"
reference = "https://attack.mitre.org/techniques/T1546/"

[[rule.threat.technique.subtechnique]]
id = "T1546.004"
name = "Unix Shell Configuration Modification"
reference = "https://attack.mitre.org/techniques/T1546/004/"

[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
