[metadata]
creation_date = "2023/03/07"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the execution of the PRoot utility, an open-source tool for user-space implementation of chroot, mount
--bind, and binfmt_misc. Adversaries can leverage an open-source tool PRoot to expand the scope of their operations to
multiple Linux distributions and simplify their necessary efforts. In a normal threat scenario, the scope of an attack
is limited by the varying configurations of each Linux distribution. With PRoot, it provides an attacker with a
consistent operational environment across different Linux distributions, such as Ubuntu, Fedora, and Alpine. PRoot also
provides emulation capabilities that allow for malware built on other architectures, such as ARM, to be run.The
post-exploitation technique called bring your own filesystem (BYOF), can be used by the threat actors to execute
malicious payload or elevate privileges or perform network scans or orchestrate another attack on the environment.
Although PRoot was originally not developed with malicious intent it can be easily tuned to work for one.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Defense Evasion via PRoot"
references = ["https://proot-me.github.io/"]
risk_score = 47
rule_id = "5c9ec990-37fa-4d5c-abfc-8d432f3dedd0"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
    "Data Source: Elastic Endgame",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action in ("exec", "exec_event") and
process.parent.name == "proot"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Defense Evasion via PRoot

PRoot is a tool that emulates a chroot-like environment, allowing users to run applications in a consistent environment across different Linux distributions. Adversaries exploit PRoot to bypass system defenses by running malicious payloads in a controlled environment. The detection rule identifies suspicious activity by monitoring processes initiated by PRoot, flagging potential misuse for defense evasion.

### Possible investigation steps

- Review the alert details to confirm the presence of the PRoot process by checking the `process.parent.name` field for "proot" and ensure the `event.type` is "start" with `event.action` as "exec" or "exec_event".
- Identify the user account associated with the PRoot process by examining the `user.name` field to determine if the activity is linked to a legitimate user or a potential adversary.
- Investigate the command line arguments used with the PRoot process by analyzing the `process.command_line` field to understand the context and purpose of the execution.
- Check the parent process of PRoot using the `process.parent.executable` field to identify how PRoot was initiated and assess if it was launched by a legitimate or suspicious process.
- Use Osquery to list all processes running under the PRoot environment to identify any unusual or unauthorized applications. Example query: `SELECT pid, name, path FROM processes WHERE parent = (SELECT pid FROM processes WHERE name = 'proot');`
- Examine network connections established by processes running under PRoot using Osquery to detect any suspicious outbound connections. Example query: `SELECT pid, local_address, remote_address, remote_port FROM process_open_sockets WHERE pid IN (SELECT pid FROM processes WHERE parent = (SELECT pid FROM processes WHERE name = 'proot'));`
- Analyze file system changes or access patterns by processes under PRoot to identify any unauthorized data access or modifications.
- Review system logs for any additional context or anomalies around the time the PRoot process was initiated, focusing on authentication logs and system events.
- Correlate the PRoot activity with other security alerts or incidents to determine if it is part of a larger attack campaign or isolated event.
- Investigate the presence of any unusual or unauthorized binaries or scripts within the PRoot environment that could indicate malicious intent.

### False positive analysis

- Legitimate use of PRoot by developers or system administrators for testing or development purposes can trigger false positives. Users should identify and document these activities to differentiate them from malicious use.
- Automated scripts or tools that utilize PRoot for legitimate cross-distribution compatibility testing may also be flagged. Implementing exceptions for known scripts or tools can help reduce unnecessary alerts.
- Security researchers or penetration testers might use PRoot in controlled environments to simulate attacks or test defenses, which could be mistaken for malicious activity. Establishing a whitelist for these activities can prevent false alarms.
- Some containerization or virtualization solutions might employ PRoot-like functionality for legitimate purposes. Users should verify the context of such processes and consider excluding them if they are part of approved software solutions.
- Regular audits and reviews of flagged PRoot activities can help refine detection rules and improve the accuracy of alerts by excluding benign use cases.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify any malicious payloads or processes running within the PRoot environment and terminate them.
- Review system logs and PRoot usage history to determine the scope of the attack and identify any additional compromised systems.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the attack is part of a larger campaign.
- Implement enhanced logging policies to capture detailed process execution data, including command-line arguments and parent-child process relationships.
- Integrate threat intelligence feeds to correlate PRoot activity with known threat actor tactics, techniques, and procedures (TTPs) for improved detection and response.
- Restore the system to its operational state by reinstalling the operating system or restoring from a known good backup, ensuring all malicious artifacts are removed.
- Apply system hardening measures, such as disabling unnecessary services, applying security patches, and enforcing least privilege access controls.
- Educate users and administrators on the risks associated with tools like PRoot and the importance of monitoring for unusual activity.
- Regularly review and update security policies and procedures to address emerging threats and incorporate lessons learned from the incident."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1211"
name = "Exploitation for Defense Evasion"
reference = "https://attack.mitre.org/techniques/T1211/"


[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

