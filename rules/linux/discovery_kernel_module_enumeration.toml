[metadata]
creation_date = "2020/04/23"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They
extend the functionality of the kernel without the need to reboot the system. This identifies attempts to enumerate
information about a kernel module.
"""
false_positives = [
    """
    Security tools and device drivers may run these programs in order to enumerate kernel modules. Use of these programs
    by ordinary users is uncommon. These can be exempted by process name or username.
    """,
]
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*"]
language = "kuery"
license = "Elastic License v2"
name = "Enumeration of Kernel Modules"
risk_score = 47
rule_id = "2d8043ed-5bda-4caf-801c-c1feb7410504"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Discovery",
    "Data Source: Elastic Defend",
    "Data Source: Elastic Endgame",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
event.category:process and host.os.type:linux and event.type:start and event.action:(exec or exec_event) and (
 (process.name:(lsmod or modinfo)) or 
 (process.name:kmod and process.args:list) or 
 (process.name:depmod and process.args:(--all or -a))
) and
not (
  process.parent.name:(
    mkinitramfs or cryptroot or framebuffer or dracut or jem or thin-provisioning-tools or readykernel or lvm2 or
    vz-start or iscsi or mdadm or ovalprobes or bcache or plymouth or dkms or overlayroot or weak-modules or zfs or
    systemd or whoopsie-upload-all or kdumpctl or apport-gtk or casper or rear or kernel-install
  )
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Enumeration of Kernel Modules

Loadable Kernel Modules (LKMs) enhance a Linux kernel's capabilities dynamically, without requiring a system reboot. Adversaries may exploit this by enumerating kernel modules to gather system information or identify vulnerabilities. The detection rule identifies suspicious enumeration activities by monitoring specific processes and arguments associated with module listing, while excluding legitimate system processes to reduce false positives.

### Possible investigation steps

- Review the alert details to identify the specific process name and arguments that triggered the alert, focusing on `process.name` and `process.args` fields.
- Check the `event.category` and `event.type` fields to confirm the nature of the event and ensure it aligns with a process start event.
- Investigate the `process.parent.name` to determine if the parent process is one of the excluded legitimate system processes, which might indicate a false positive.
- Examine the user account associated with the process execution to determine if it is a privileged or unprivileged account, which can provide context on the potential risk.
- Use Osquery to list currently loaded kernel modules and compare them with the modules listed in the alert to identify any discrepancies or unusual modules:
  ```sql
  SELECT * FROM kernel_modules;
  ```
- Analyze the system logs around the time of the alert to identify any other suspicious activities or related events that might provide additional context.
- Check for any recent changes or updates to the system that might have triggered legitimate module enumeration, such as system updates or configuration changes.
- Investigate the network activity of the host to identify any potential data exfiltration or communication with known malicious IP addresses.
- Review historical data to determine if similar enumeration activities have been observed on the host or across the network, which might indicate a pattern or ongoing reconnaissance.
- Consult threat intelligence sources to check if the specific process names or arguments used in the alert are associated with known adversary techniques or campaigns.

### False positive analysis

- Legitimate system processes or administrative scripts may trigger the rule if they perform kernel module enumeration as part of routine operations, such as system updates or hardware checks.
- Automated maintenance tasks, like those executed by configuration management tools (e.g., Ansible, Puppet, Chef), might also cause false positives if they include module listing commands.
- Security monitoring or auditing tools that check system configurations and module statuses could inadvertently match the rule's criteria.
- Users can manage these false positives by creating exceptions for known benign processes or scripts that frequently trigger the rule, ensuring they are added to the exclusion list in the detection logic.
- Regularly review and update the exclusion list to accommodate new legitimate processes that may arise from system updates or changes in administrative practices.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to determine the source and intent of the kernel module enumeration, checking for any unauthorized access or privilege escalation attempts.
- Review system logs and security alerts to identify any other suspicious activities or anomalies that may indicate a broader compromise.
- If malicious activity is confirmed, remove any unauthorized kernel modules and restore the system to a known good state using backups or system snapshots.
- Update and patch the system to address any identified vulnerabilities that may have been exploited during the attack.
- Implement enhanced logging policies to capture detailed process execution and module loading activities for future investigations.
- Integrate security tools such as intrusion detection systems (IDS) and endpoint detection and response (EDR) solutions to improve monitoring and detection capabilities.
- Conduct a post-incident review to identify gaps in security controls and processes, and update incident response plans accordingly.
- Educate and train staff on recognizing and responding to similar threats, emphasizing the importance of maintaining system security and vigilance.
- Consider hardening measures such as disabling unnecessary kernel modules, implementing strict access controls, and using security-enhanced Linux (SELinux) or AppArmor to enforce security policies."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1082"
name = "System Information Discovery"
reference = "https://attack.mitre.org/techniques/T1082/"

[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

[rule.new_terms]
field = "new_terms_fields"
value = ["process.executable", "process.parent.executable"]

[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"
