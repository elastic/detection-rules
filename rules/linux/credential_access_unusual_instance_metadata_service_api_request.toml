[metadata]
creation_date = "2024/08/22"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule identifies potentially malicious processes attempting to access the cloud service provider's instance metadata
service (IMDS) API endpoint, which can be used to retrieve sensitive instance-specific information such as instance ID,
public IP address, and even temporary security credentials if role's are assumed by that instance. The rule monitors for
various tools and scripts like curl, wget, python, and perl that might be used to interact with the metadata API.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Unusual Instance Metadata Service (IMDS) API Request"
references = ["https://hackingthe.cloud/aws/general-knowledge/intro_metadata_service/"]
risk_score = 47
rule_id = "ecc0cd54-608e-11ef-ab6d-f661ea17fbce"
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Tactic: Discovery",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id,  process.parent.entity_id with maxspan=1s
[process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and process.name : (
    "curl", "wget", "python*", "perl*", "php*", "ruby*", "lua*", "telnet", "pwsh",
    "openssl", "nc", "ncat", "netcat", "awk", "gawk", "mawk", "nawk", "socat", "node"
    ) or process.executable : (
      "./*", "/tmp/*", "/var/tmp/*", "/var/www/*", "/dev/shm/*", "/etc/init.d/*", "/etc/rc*.d/*",
      "/etc/cron*", "/etc/update-motd.d/*", "/boot/*", "/srv/*", "/run/*", "/etc/rc.local"
    ) or
    process.command_line: "*169.254.169.254*" and
    not (process.working_directory: (
          "/opt/rapid7*",
          "/opt/nessus*",
          "/snap/amazon-ssm-agent*",
          "/var/snap/amazon-ssm-agent/*",
          "/var/log/amazon/ssm/*",
          "/srv/snp/docker/overlay2*",
          "/opt/nessus_agent/var/nessus/*") or
        process.executable: (
          "/opt/rumble/bin/rumble-agent*",
          "/opt/aws/inspector/bin/inspectorssmplugin") or
        process.parent.executable: (
          "/usr/bin/setup-policy-routes",
          "/usr/share/ec2-instance-connect/*",
          "/var/lib/amazon/ssm/*")
        )
]
[network where host.os.type == "linux"
  and event.action == "connection_attempted"
  and destination.ip == "169.254.169.254"]
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Unusual Instance Metadata Service (IMDS) API Request

The Instance Metadata Service (IMDS) API provides essential instance-specific data, including credentials, to applications running on cloud instances. Adversaries exploit this by using scripts or tools to access sensitive data, potentially leading to unauthorized access. The detection rule identifies suspicious access attempts by monitoring specific processes and network connections to the IMDS endpoint, filtering out known legitimate activities.

### Possible investigation steps

- Review the alert details to identify the specific process and command line that triggered the alert, focusing on the `process.name`, `process.executable`, and `process.command_line` fields.
- Check the `process.parent.entity_id` to understand the parent process and its relationship to the suspicious process, which might provide context on how the process was initiated.
- Investigate the `process.working_directory` to determine if the process was executed from a suspicious or unusual directory, which could indicate malicious activity.
- Examine the `network` event details, particularly the `destination.ip`, to confirm if there was an attempted connection to the IMDS endpoint at `169.254.169.254`.
- Use Osquery to gather more information about the suspicious process. For example, run the following query to list all processes with network connections to the IMDS endpoint:
  ```sql
  SELECT pid, name, path, cmdline, cwd FROM processes WHERE pid IN (SELECT pid FROM process_open_sockets WHERE remote_address = '169.254.169.254');
  ```
- Cross-reference the `host.id` with other security logs to identify any other suspicious activities or alerts associated with the same host.
- Investigate the `event.type` and `event.action` fields to confirm the nature of the process execution and network connection attempt, ensuring they align with the alert's context.
- Review historical data for the same `host.id` to identify any patterns or repeated attempts to access the IMDS API, which could indicate persistent malicious activity.
- Check for any legitimate software or scripts that might have been recently installed or updated on the host, which could explain the alert as a false positive.
- Collaborate with the cloud infrastructure team to verify if there are any known legitimate processes or maintenance activities that could have triggered the alert, ensuring alignment with operational changes.

### False positive analysis

- Security and monitoring tools such as Rapid7, Nessus, and Amazon SSM Agent may trigger false positives due to their legitimate access to the IMDS API for vulnerability assessments and system management. Users can handle these by adding exceptions for processes running from directories like `/opt/rapid7*`, `/opt/nessus*`, and `/snap/amazon-ssm-agent*`.
- Automated scripts or services that require instance metadata for configuration or management purposes might also be flagged. These can be excluded by specifying known safe process executables or parent executables, such as `/opt/rumble/bin/rumble-agent*` or `/usr/bin/setup-policy-routes`.
- Cloud-native services like EC2 Instance Connect, which use the IMDS API for legitimate operations, may appear suspicious. Users should consider excluding processes with parent executables located in `/usr/share/ec2-instance-connect/*`.
- Regular system updates or maintenance scripts that temporarily access the IMDS API could be misidentified as threats. To manage these, users can create exceptions for processes with specific working directories or command lines that are known to be safe.
- Network monitoring tools that check connectivity to the IMDS endpoint for health checks might be mistakenly flagged. Users should ensure that these tools are recognized and excluded by specifying their network activity as non-threatening.

### Response and remediation

- Immediately isolate the affected instance from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify the source and method of the unauthorized IMDS API access attempt, focusing on the processes and network connections flagged by the detection rule.
- Review and analyze logs from the affected instance and any associated cloud services to gather more context on the incident, including timestamps, IP addresses, and user accounts involved.
- Revoke any temporary security credentials that may have been accessed and rotate all potentially compromised credentials, including API keys and passwords.
- Escalate the incident to the security operations team and, if necessary, involve cloud service provider support for further assistance and investigation.
- Implement enhanced logging and monitoring for IMDS API access attempts, ensuring that all access is logged and alerts are configured for suspicious activities.
- Deploy additional security controls such as network segmentation and firewall rules to restrict access to the IMDS endpoint to only trusted processes and users.
- Restore the affected instance to its operational state by applying security patches, updating configurations, and verifying the integrity of system files and applications.
- Conduct a post-incident review to identify gaps in security controls and processes, and update incident response plans accordingly.
- Educate and train staff on the risks associated with IMDS API access and the importance of adhering to security best practices, leveraging MITRE ATT&CK framework details for threat context."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1552"
name = "Unsecured Credentials"
reference = "https://attack.mitre.org/techniques/T1552/"
[[rule.threat.technique.subtechnique]]
id = "T1552.005"
name = "Cloud Instance Metadata API"
reference = "https://attack.mitre.org/techniques/T1552/005/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1580"
name = "Cloud Infrastructure Discovery"
reference = "https://attack.mitre.org/techniques/T1580/"


[rule.threat.tactic]
id = "TA0007"
name = "Discovery"
reference = "https://attack.mitre.org/tactics/TA0007/"

