[metadata]
creation_date = "2024/02/01"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Detects suspicious network events executed by the APT package manager, potentially indicating persistence through an APT
backdoor. In Linux, APT (Advanced Package Tool) is a command-line utility used for handling packages on Debian-based
systems, providing functions for installing, updating, upgrading, and removing software along with managing package
repositories. Attackers can backdoor APT to gain persistence by injecting malicious code into scripts that APT runs,
thereby ensuring continued unauthorized access or control each time APT is used for package management.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Suspicious APT Package Manager Network Connection"
references = ["https://www.elastic.co/security-labs/sequel-on-persistence-mechanisms"]
risk_score = 47
rule_id = "eaef8a35-12e0-4ac0-bc14-81c72b6bd27c"
setup = """## Setup


This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Command and Control",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id with maxspan=5s
  [process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and
   process.parent.name == "apt" and process.args == "-c" and process.name in (
     "bash", "dash", "sh", "tcsh", "csh", "zsh", "ksh", "fish"
    )
  ] by process.entity_id
  [network where host.os.type == "linux" and event.action == "connection_attempted" and event.type == "start" and not (
     destination.ip == null or destination.ip == "0.0.0.0" or cidrmatch(
     destination.ip, "10.0.0.0/8", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.0.0/29",
     "192.0.0.8/32", "192.0.0.9/32", "192.0.0.10/32", "192.0.0.170/32", "192.0.0.171/32", "192.0.2.0/24",
     "192.31.196.0/24", "192.52.193.0/24", "192.168.0.0/16", "192.88.99.0/24", "224.0.0.0/4", "100.64.0.0/10",
     "192.175.48.0/24","198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "240.0.0.0/4", "::1", "FE80::/10",
     "FF00::/8", "172.31.0.0/16"
     )
   ) and not process.executable == "/usr/bin/apt-listbugs"
  ] by process.parent.entity_id
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious APT Package Manager Network Connection

The APT package manager is crucial for managing software on Debian-based Linux systems, handling installations and updates. Adversaries may exploit APT by embedding malicious scripts to maintain unauthorized access. The detection rule identifies unusual network connections initiated by APT, excluding known safe IP ranges, to spot potential backdoor activities.

### Possible investigation steps

- Review the alert details to identify the specific host and process entity IDs involved in the suspicious activity.
- Examine the process execution details, focusing on the parent process name "apt" and the child process names such as "bash", "dash", "sh", etc., to understand the context of the script execution.
- Check the command-line arguments used with the APT process, especially the presence of the "-c" flag, which indicates a custom configuration file, to identify any unusual or unauthorized configurations.
- Investigate the network connection details, particularly the destination IP address, to determine if it falls outside the known safe IP ranges and assess its legitimacy.
- Use Osquery to gather additional context on the suspicious process by running a query like: `SELECT * FROM processes WHERE pid = <process_id>;` to retrieve detailed information about the process, including its command line, parent process, and execution path.
- Analyze the network traffic logs for the host to identify any other unusual or unauthorized connections that may correlate with the suspicious APT activity.
- Review the system logs on the affected host for any related entries that might provide additional context or evidence of compromise, such as authentication logs or system events.
- Check for any recent changes to the APT configuration files or scripts on the host that could indicate tampering or unauthorized modifications.
- Investigate the history of package installations and updates on the host to identify any recent or suspicious package activities that could be linked to the alert.
- Correlate the findings with other security alerts or incidents involving the same host or network to determine if this activity is part of a broader attack campaign.

### False positive analysis

- Known false positives may include legitimate scripts executed by APT that initiate network connections for valid package management tasks, such as fetching updates or accessing external repositories.
- Network connections to newly added or less common repositories might be flagged as suspicious if they fall outside the predefined safe IP ranges, even if they are legitimate.
- Users can handle these false positives by creating exceptions for specific IP addresses or ranges that are known to be safe and frequently accessed by APT during normal operations.
- It is advisable to maintain an updated list of trusted repositories and their associated IP addresses to minimize false positives while ensuring security.
- Regularly review and update the exclusion list to accommodate changes in network infrastructure or repository configurations, ensuring that legitimate activities are not mistakenly flagged.
- Consider implementing additional context checks, such as verifying the digital signatures of packages, to differentiate between legitimate and potentially malicious activities.

### Response and remediation

- Isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation of the APT package manager logs and any associated scripts to identify and analyze the malicious code or backdoor.
- Terminate any suspicious processes initiated by the APT package manager that are not part of legitimate package management activities.
- Remove or replace any compromised scripts or packages identified during the investigation to eliminate the backdoor.
- Restore the system from a known good backup if the integrity of the system is in question and ensure all software is up to date.
- Implement enhanced logging policies to capture detailed information on APT package manager activities and network connections for future analysis.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to correlate and detect similar threats in real-time.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if other systems are affected.
- Review and update firewall and intrusion detection/prevention system (IDS/IPS) rules to block known malicious IP addresses and unusual outbound connections.
- Apply system hardening measures, such as disabling unnecessary services and enforcing the principle of least privilege, to reduce the attack surface and prevent future exploitation."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"

[[rule.threat.technique]]
id = "T1546"
name = "Event Triggered Execution"
reference = "https://attack.mitre.org/techniques/T1546/"
[[rule.threat.technique.subtechnique]]
id = "T1546.016"
name = "Installer Packages"
reference = "https://attack.mitre.org/techniques/T1546/016/"


[[rule.threat.technique]]
id = "T1574"
name = "Hijack Execution Flow"
reference = "https://attack.mitre.org/techniques/T1574/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0011"
name = "Command and Control"
reference = "https://attack.mitre.org/tactics/TA0011/"
[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"

