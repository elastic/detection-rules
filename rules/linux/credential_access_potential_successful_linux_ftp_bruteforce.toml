[metadata]
creation_date = "2023/07/06"
integration = ["auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
An FTP (file transfer protocol) brute force attack is a method where an attacker systematically tries different
combinations of usernames and passwords to gain unauthorized access to an FTP server, and if successful, the impact can
include unauthorized data access, manipulation, or theft, compromising the security and integrity of the server and
potentially exposing sensitive information. This rule identifies multiple consecutive authentication failures targeting
a specific user account from the same source address and within a short time interval, followed by a successful
authentication.
"""
from = "now-9m"
index = ["auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Successful Linux FTP Brute Force Attack Detected"
risk_score = 47
rule_id = "66712812-e7f2-4a1d-bbda-dd0b5cf20c5d"
setup = """## Setup

This rule requires data coming in from one of the following integrations:
- Auditbeat
- Auditd Manager

### Auditbeat Setup
Auditbeat is a lightweight shipper that you can install on your servers to audit the activities of users and processes on your systems. For example, you can use Auditbeat to collect and centralize audit events from the Linux Audit Framework. You can also use Auditbeat to detect changes to critical files, like binaries and configuration files, and identify potential security policy violations.

#### The following steps should be executed in order to add the Auditbeat on a Linux System:
- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.
- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setup-repositories.html).
- To run Auditbeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-docker.html).
- To run Auditbeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/running-on-kubernetes.html).
- For complete “Setup and Run Auditbeat” information refer to the [helper guide](https://www.elastic.co/guide/en/beats/auditbeat/current/setting-up-and-running.html).

### Auditd Manager Integration Setup
The Auditd Manager Integration receives audit events from the Linux Audit Framework which is a part of the Linux kernel.
Auditd Manager provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system.

#### The following steps should be executed in order to add the Elastic Agent System integration "auditd_manager" on a Linux System:
- Go to the Kibana home page and click “Add integrations”.
- In the query bar, search for “Auditd Manager” and select the integration to see more details about it.
- Click “Add Auditd Manager”.
- Configure the integration name and optionally add a description.
- Review optional and advanced settings accordingly.
- Add the newly installed “auditd manager” to an existing or a new agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.
- Click “Save and Continue”.
- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/auditd_manager).

#### Rule Specific Setup Note
Auditd Manager subscribes to the kernel and receives events as they occur without any additional configuration.
However, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the "audit rules" configuration box or the "auditd rule files" box by specifying a file to read the audit rules from.
- For this detection rule no additional audit rules are required to be added to the integration.
"""
severity = "medium"
tags = [
    "Data Source: Auditd Manager",
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
]
type = "eql"

query = '''
sequence by host.id, auditd.data.addr, related.user with maxspan=5s
  [authentication where host.os.type == "linux" and event.action == "authenticated" and
   auditd.data.terminal == "ftp" and event.outcome == "failure" and auditd.data.addr != null and
   auditd.data.addr != "0.0.0.0" and auditd.data.addr != "::"] with runs=10
  [authentication where host.os.type == "linux" and event.action  == "authenticated" and
   auditd.data.terminal == "ftp" and event.outcome == "success" and auditd.data.addr != null and
   auditd.data.addr != "0.0.0.0" and auditd.data.addr != "::"] | tail 1
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Successful Linux FTP Brute Force Attack Detected

FTP is a protocol used for transferring files between systems, often requiring authentication. Adversaries exploit this by attempting numerous username-password combinations to gain unauthorized access. The detection rule identifies a pattern of repeated failed login attempts from a single source, followed by a successful login, indicating a potential brute force attack.

### Possible investigation steps

- Review the alert details to identify the specific `host.id`, `auditd.data.addr`, and `related.user` involved in the potential brute force attack.
- Check the logs for the specified `host.id` to gather more information about the failed and successful login attempts, focusing on the `auditd.data.terminal` field to confirm they were FTP-related.
- Analyze the source IP address (`auditd.data.addr`) to determine if it is known for malicious activity or if it belongs to a legitimate user or partner.
- Investigate the `related.user` account to verify if it has been compromised or if there are any unusual activities associated with it.
- Use Osquery to gather additional context on the affected host. For example, run the following query to list recent login attempts: `SELECT * FROM last WHERE tty = 'ftp';`
- Examine the time interval between the failed and successful login attempts to assess the likelihood of a brute force attack, considering the `maxspan=5s` parameter in the detection rule.
- Cross-reference the `host.id` with other security alerts or logs to identify any correlated suspicious activities or patterns.
- Check for any recent changes in the FTP server configuration or user account settings that might have facilitated the attack.
- Review network traffic logs to identify any unusual data transfers or connections from the source IP address during or after the successful login.
- Consult threat intelligence sources to determine if the attack pattern or source IP address matches any known threat actors or campaigns.

### False positive analysis

- Automated scripts or applications that frequently attempt to connect to an FTP server with incorrect credentials due to misconfigurations can trigger false positives. Users should identify and correct these configurations or whitelist the IP addresses of trusted scripts.
- Legitimate users who frequently mistype their passwords or use password managers that incorrectly autofill credentials may cause false positives. Implementing user education on proper password management and verifying user behavior patterns can help mitigate this.
- Security testing tools or vulnerability scanners that perform credential testing as part of their operations might be mistaken for brute force attacks. Users should ensure these tools are configured to exclude FTP services or whitelist their IP addresses in the detection rule.
- Frequent legitimate access attempts from a single source, such as a shared corporate IP address, can be misinterpreted as a brute force attack. Users can adjust the detection rule to account for known safe IP ranges or implement additional context checks, such as user behavior analysis, to differentiate between legitimate and malicious activities.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access and data exfiltration.
- Review and analyze the logs of the FTP server and related systems to identify the source of the attack and any compromised accounts.
- Reset passwords for all affected accounts and consider implementing multi-factor authentication (MFA) to enhance security.
- Conduct a thorough investigation to determine if any data was accessed or exfiltrated and assess the extent of the compromise.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response.
- Implement additional logging and monitoring to detect similar brute force attempts in the future, ensuring logs are retained for an adequate period.
- Integrate threat intelligence feeds to enhance detection capabilities and correlate with known threat actor tactics, techniques, and procedures (TTPs).
- Restore the system to its operational state by applying patches, updating software, and ensuring all security configurations are correctly set.
- Harden the FTP server by disabling anonymous access, limiting login attempts, and using secure protocols like SFTP or FTPS.
- Conduct a post-incident review to identify gaps in the security posture and update incident response plans and security policies accordingly."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1110"
name = "Brute Force"
reference = "https://attack.mitre.org/techniques/T1110/"
[[rule.threat.technique.subtechnique]]
id = "T1110.001"
name = "Password Guessing"
reference = "https://attack.mitre.org/techniques/T1110/001/"

[[rule.threat.technique.subtechnique]]
id = "T1110.003"
name = "Password Spraying"
reference = "https://attack.mitre.org/techniques/T1110/003/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

