[metadata]
creation_date = "2024/07/30"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule identifies when the openssl client or server is used to establish a connection. Attackers may use openssl to
establish a secure connection to a remote server or to create a secure server to receive connections. This activity
may be used to exfiltrate data or establish a command and control channel.
"""
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*"]
language = "eql"
license = "Elastic License v2"
name = "Openssl Client or Server Activity"
references = ["https://gtfobins.github.io/gtfobins/openssl/"]
risk_score = 21
rule_id = "ad5a3757-c872-4719-8c72-12d3f08db655"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
    "Data Source: Elastic Endgame"
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type == "linux" and event.type == "start" and event.action in ("exec", "exec_event") and
process.name == "openssl" and (
  (process.args == "s_client" and process.args : ("-connect", "*:*") and not process.args == "-showcerts") or
  (process.args == "s_server" and process.args == "-port")
) and
not process.parent.executable in ("/pro/xymon/client/ext/awsXymonCheck.sh", "/opt/antidot-svc/nrpe/plugins/check_cert")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Openssl Client or Server Activity

OpenSSL is a widely-used toolkit for implementing secure communication via SSL/TLS protocols. In Linux environments, it can function as a client or server to establish encrypted connections. Adversaries may exploit OpenSSL to create secure channels for data exfiltration or command and control. The detection rule identifies suspicious OpenSSL usage by monitoring process execution patterns, specifically targeting client or server activities that deviate from typical operations, while excluding known benign processes.

### Possible investigation steps

- Review the alert details to understand the specific process execution that triggered the rule, focusing on the `process.name`, `process.args`, and `process.parent.executable` fields.
- Verify the legitimacy of the `openssl` process by checking the `process.parent.executable` to determine if it originates from a known benign source or a suspicious one.
- Examine the `process.args` to identify whether the `openssl` command is being used as a client (`s_client`) or server (`s_server`) and note any unusual arguments or patterns.
- Investigate the network connections associated with the `openssl` process using tools like `netstat` or `ss` to identify any suspicious remote IP addresses or ports.
- Use Osquery to gather additional context about the `openssl` process. For example, run the following query to list all processes with their network connections: `SELECT pid, name, path, cmdline, remote_address, remote_port FROM processes JOIN process_open_sockets ON processes.pid = process_open_sockets.pid WHERE name = 'openssl';`
- Check system logs, such as `/var/log/auth.log` or `/var/log/secure`, for any related authentication attempts or anomalies around the time the `openssl` process was executed.
- Review user activity logs to determine if the `openssl` process was initiated by a legitimate user or if there are signs of compromised credentials.
- Investigate any file transfers or data exfiltration attempts by examining file access logs and monitoring tools for unusual data movement.
- Correlate the `openssl` activity with other security alerts or logs to identify potential patterns or coordinated actions indicative of a larger attack.
- Consult threat intelligence sources to determine if the IP addresses or domains associated with the `openssl` connections are known to be malicious or part of a threat actor's infrastructure.

### False positive analysis

- Known false positives for the Openssl Client or Server Activity rule may include legitimate administrative tasks where OpenSSL is used for secure communications, such as system administrators testing SSL/TLS connections or setting up secure servers for internal use.
- Automated scripts or monitoring tools that use OpenSSL for regular checks, such as certificate validation or network diagnostics, can trigger this rule. These processes often have predictable patterns and can be excluded by identifying their parent processes or specific command-line arguments.
- To manage these false positives, users can create exceptions by adding known benign parent processes to the exclusion list, as seen with "/pro/xymon/client/ext/awsXymonCheck.sh" and "/opt/antidot-svc/nrpe/plugins/check_cert" in the rule. This helps in reducing noise and focusing on truly suspicious activities.
- Regularly review and update the exclusion list to accommodate new legitimate processes that may arise in the environment, ensuring that the detection rule remains effective without generating excessive false alerts.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further data exfiltration or command and control activities.
- Conduct a thorough investigation to determine the scope of the compromise, focusing on identifying any unauthorized connections established using OpenSSL.
- Review system logs and network traffic to identify any additional indicators of compromise or related suspicious activities.
- Terminate any unauthorized OpenSSL processes and remove any malicious scripts or binaries found on the system.
- Change all credentials and keys that may have been exposed during the incident to prevent further unauthorized access.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the attack is part of a larger campaign.
- Implement enhanced logging policies to capture detailed process execution and network connection data for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Restore the system to its operational state by applying the latest security patches and updates, and ensure all security configurations are hardened.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans to address any deficiencies."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"

[[rule.threat.technique.subtechnique]]
id = "T1059.004"
name = "Unix Shell"
reference = "https://attack.mitre.org/techniques/T1059/004/"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1071"
name = "Application Layer Protocol"
reference = "https://attack.mitre.org/techniques/T1071/"

[rule.threat.tactic]
id = "TA0011"
name = "Command and Control"
reference = "https://attack.mitre.org/tactics/TA0011/"
