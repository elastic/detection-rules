[metadata]
creation_date = "2023/07/25"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rule monitors for the usage of Docker runtime sockets to escalate privileges on Linux systems. Docker sockets by
default are only be writable by the root user and docker group. Attackers that have permissions to write to these
sockets may be able to create and run a container that allows them to escalate privileges and gain further access onto
the host file system.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Privilege Escalation through Writable Docker Socket"
references = [
    "https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation#automatic-enumeration-and-escape",
]
risk_score = 47
rule_id = "7acb2de3-8465-472a-8d9c-ccd7b73d0ed8"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Domain: Container",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "linux" and event.type == "start" and event.action == "exec" and 
(
  (process.name == "docker" and process.args : "run" and process.args : "-it"  and 
   process.args : ("unix://*/docker.sock", "unix://*/dockershim.sock")) or 
  (process.name == "socat" and process.args : ("UNIX-CONNECT:*/docker.sock", "UNIX-CONNECT:*/dockershim.sock"))
) and not user.Ext.real.id : "0" and not group.Ext.real.id : "0"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Privilege Escalation through Writable Docker Socket

Docker sockets facilitate communication between the Docker client and daemon, typically restricted to root or specific groups. If misconfigured to be writable by unauthorized users, adversaries can exploit this to execute containers with elevated privileges, potentially accessing the host system. The detection rule identifies suspicious processes attempting to interact with Docker sockets without root or group privileges, signaling possible privilege escalation attempts.

### Possible investigation steps

- Review the alert details to identify the specific process name and arguments that triggered the rule, focusing on `process.name` and `process.args` fields.
- Verify the user and group IDs associated with the process using `user.Ext.real.id` and `group.Ext.real.id` fields to confirm they are not root or part of the docker group.
- Check the system logs for any recent changes to Docker socket permissions that might have allowed unauthorized write access.
- Use Osquery to list all processes interacting with Docker sockets by running: `SELECT pid, name, path FROM processes WHERE path LIKE '/var/run/docker.sock' OR path LIKE '/var/run/dockershim.sock';`
- Investigate the user account associated with the process to determine if it has a history of legitimate Docker usage or if it might be compromised.
- Examine the command history of the user to identify any recent commands that could indicate an attempt to exploit Docker socket permissions.
- Analyze network logs to detect any unusual outbound connections from the host that might suggest data exfiltration or communication with a command and control server.
- Review Docker daemon logs for any suspicious container creation or execution events that align with the alert timestamp.
- Check for any newly created or modified containers on the host that could have been used to escalate privileges.
- Investigate the system for any additional indicators of compromise, such as unauthorized file modifications or new user accounts, that might correlate with the alert.

### False positive analysis

- Legitimate administrative tasks: System administrators or authorized users may perform legitimate tasks that involve interacting with Docker sockets, such as maintenance or configuration changes. These actions can trigger the rule if they are not executed with root or group privileges. To manage this, users can create exceptions for specific user IDs or groups known to perform these tasks regularly.
- Automated scripts or tools: Some automated scripts or monitoring tools might interact with Docker sockets as part of their normal operation. If these tools are known and trusted, users can exclude their process names or specific arguments from triggering the rule.
- Development environments: In development environments, developers might frequently use Docker commands to test applications. If these actions are non-threatening and part of regular development workflows, users can exclude specific user IDs or process arguments associated with these activities.
- Container orchestration systems: Systems like Kubernetes might interact with Docker sockets as part of their orchestration tasks. If these interactions are expected and secure, users can create exceptions for the specific processes or arguments used by these systems.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Investigate the source of the unauthorized access by reviewing logs and identifying any suspicious user accounts or processes that interacted with the Docker socket.
- Terminate any unauthorized containers or processes that were started using the writable Docker socket to prevent further exploitation.
- Change permissions on the Docker socket to restrict write access to only the root user and the docker group, ensuring no unauthorized users can access it.
- Conduct a thorough review of user accounts and group memberships to ensure only authorized personnel have access to Docker-related privileges.
- Implement enhanced logging for Docker daemon activities and socket interactions to capture detailed information for future investigations.
- Integrate security monitoring tools with SIEM solutions to detect and alert on suspicious Docker socket activities in real-time.
- Restore the system to its operational state by verifying the integrity of system files and configurations, ensuring no backdoors or malicious modifications remain.
- Apply security patches and updates to the Docker daemon and related components to mitigate known vulnerabilities.
- Educate and train system administrators and users on secure Docker practices and the importance of maintaining strict access controls."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1611"
name = "Escape to Host"
reference = "https://attack.mitre.org/techniques/T1611/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

