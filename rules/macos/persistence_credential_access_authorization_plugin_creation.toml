[metadata]
creation_date = "2021/01/13"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Authorization plugins are used to extend the authorization services API and implement mechanisms that are not natively
supported by the OS, such as multi-factor authentication with third party software. Adversaries may abuse this feature
to persist and/or collect clear text credentials as they traverse the registered plugins during user logon.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "Authorization Plugin Modification"
references = [
    "https://developer.apple.com/documentation/security/authorization_plug-ins",
    "https://www.xorrior.com/persistent-credential-theft/",
]
risk_score = 47
rule_id = "e6c98d38-633d-4b3e-9387-42112cd5ac10"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.category:file and host.os.type:macos and not event.type:deletion and
  file.path:(/Library/Security/SecurityAgentPlugins/* and
  not (/Library/Security/SecurityAgentPlugins/KandjiPassport.bundle/* or /Library/Security/SecurityAgentPlugins/TeamViewerAuthPlugin.bundle/*)) and
  not (process.name:shove and process.code_signature.trusted:true)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Authorization Plugin Modification

Authorization plugins in macOS extend the system's authentication capabilities, enabling features like third-party multi-factor authentication. Adversaries may exploit these plugins to maintain persistence or capture credentials by modifying or adding unauthorized plugins. The detection rule identifies suspicious modifications by monitoring changes in specific plugin directories, excluding known trusted plugins and processes, to flag potential unauthorized activities.

### Possible investigation steps

- Review the alert details to identify the specific file path and process name involved in the modification, focusing on the `file.path` and `process.name` fields.
- Verify the legitimacy of the modified or added plugin by checking the file path against known authorized plugins, ensuring it is not a false positive.
- Use Osquery to list all plugins in the `/Library/Security/SecurityAgentPlugins/` directory to identify any unauthorized or suspicious plugins. Example query: `SELECT path, mode, uid, gid, size, atime, mtime, ctime FROM file WHERE directory = '/Library/Security/SecurityAgentPlugins/';`
- Investigate the process that made the modification by examining the `process.name` and `process.code_signature.trusted` fields to determine if it is a trusted process.
- Check the modification timestamps (`mtime` and `ctime`) of the suspicious plugin files to correlate with any known user activity or scheduled tasks.
- Review system logs around the time of the modification for any unusual activity or errors that might provide additional context.
- Cross-reference the involved process with known software installations or updates to determine if the modification was part of a legitimate update.
- Investigate the user account associated with the modification to determine if it aligns with expected behavior or if it indicates potential compromise.
- Examine network logs for any unusual outbound connections from the host around the time of the modification, which might suggest data exfiltration or command and control activity.
- Consult threat intelligence sources to check if the identified plugin or process is associated with known malicious activity or campaigns.

### False positive analysis

- Known false positives may include legitimate software updates or installations that modify authorization plugins, such as updates to security software or new installations of trusted third-party authentication tools.
- Users can handle these false positives by creating exceptions for known trusted plugins and processes, ensuring that updates from verified vendors are not flagged.
- Regularly review and update the list of trusted plugins and processes to include new legitimate software that may be installed in the monitored directories.
- Implement a process to verify the digital signatures of plugins and processes, allowing those with valid and trusted signatures to be excluded from alerts.
- Consider the context of the detected changes, such as recent software installations or updates, to determine if the activity is expected and non-threatening.
- Collaborate with IT and security teams to maintain an updated inventory of authorized plugins and processes, which can be used to refine detection rules and reduce false positives.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent potential lateral movement by the adversary.
- Conduct a thorough investigation to identify any unauthorized plugins in the /Library/Security/SecurityAgentPlugins/ directory and verify their legitimacy.
- Review system logs and security events to trace the origin of the unauthorized plugin modification and identify any associated suspicious activities or processes.
- Remove any unauthorized or suspicious plugins and restore any modified legitimate plugins to their original state using trusted backups.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging policies to capture detailed file and process activities, focusing on the SecurityAgentPlugins directory and related processes.
- Integrate with threat intelligence platforms to correlate the incident with known threat actor tactics, techniques, and procedures (TTPs) as per MITRE ATT&CK framework.
- Apply security patches and updates to the macOS system to mitigate any known vulnerabilities that could be exploited by similar threats.
- Educate users on recognizing phishing attempts and other social engineering tactics that could lead to unauthorized plugin installations.
- Consider deploying additional security controls, such as application whitelisting and endpoint detection and response (EDR) solutions, to prevent future unauthorized modifications."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1547"
name = "Boot or Logon Autostart Execution"
reference = "https://attack.mitre.org/techniques/T1547/"
[[rule.threat.technique.subtechnique]]
id = "T1547.002"
name = "Authentication Package"
reference = "https://attack.mitre.org/techniques/T1547/002/"



[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

