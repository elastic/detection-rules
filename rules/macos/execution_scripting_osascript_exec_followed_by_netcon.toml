[metadata]
creation_date = "2020/12/07"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Detects execution via the Apple script interpreter (osascript) followed by a network connection from the same process
within a short time period. Adversaries may use malicious scripts for execution and command and control.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Apple Script Execution followed by Network Connection"
references = [
    "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html",
    "https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml",
]
risk_score = 47
rule_id = "47f76567-d58a-4fed-b32b-21f571e28910"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Command and Control",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
]
type = "eql"

query = '''
sequence by host.id, process.entity_id with maxspan=30s
 [process where host.os.type == "macos" and event.type == "start" and process.name == "osascript"]
 [network where host.os.type == "macos" and event.type != "end" and process.name == "osascript" and destination.ip != "::1" and
  not cidrmatch(destination.ip,
    "10.0.0.0/8", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.0.0/29", "192.0.0.8/32",
    "192.0.0.9/32", "192.0.0.10/32", "192.0.0.170/32", "192.0.0.171/32", "192.0.2.0/24", "192.31.196.0/24",
    "192.52.193.0/24", "192.168.0.0/16", "192.88.99.0/24", "224.0.0.0/4", "100.64.0.0/10", "192.175.48.0/24",
    "198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "240.0.0.0/4", "::1", "FE80::/10", "FF00::/8")]
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Apple Script Execution followed by Network Connection

AppleScript, a scripting language for macOS, automates tasks by controlling applications and system functions. Adversaries exploit it to execute scripts that initiate network connections, potentially for command and control activities. The detection rule identifies such behavior by monitoring the osascript process for network activity shortly after script execution, excluding local and reserved IP addresses to focus on suspicious external connections.

### Possible investigation steps

- Review the alert details to confirm the osascript process was involved, noting the `host.id` and `process.entity_id` for correlation.
- Check the timestamp of the osascript process start event to establish a timeline and determine if the network connection occurred within the 30-second window.
- Identify the destination IP address from the network event and verify if it is external and potentially malicious by cross-referencing threat intelligence sources.
- Use Osquery to gather additional context on the osascript process by running a query such as: `SELECT * FROM processes WHERE name = 'osascript' AND pid = <process_id>;` to retrieve details like parent process, command line arguments, and execution path.
- Investigate the parent process of osascript to determine if it was spawned by a legitimate application or a suspicious process.
- Examine recent system logs and user activity around the time of the alert to identify any unusual behavior or script execution attempts.
- Analyze the command line arguments used with osascript to understand the script's purpose and whether it aligns with known malicious patterns.
- Check for any additional network connections made by the osascript process to other external IPs that might indicate further command and control activity.
- Review historical data for the same `host.id` to identify any previous similar alerts or patterns of suspicious behavior involving osascript.
- If available, use endpoint detection and response (EDR) tools to perform a deeper analysis of the affected host, focusing on file modifications, registry changes, and other indicators of compromise related to the osascript execution.

### False positive analysis

- Legitimate automation scripts: Users may have legitimate AppleScripts that automate tasks and require network access, such as scripts for data synchronization or cloud service interactions. To handle these, users can create exceptions for known scripts by whitelisting specific script names or paths.
- Software updates and system processes: Some macOS system processes or third-party applications might use AppleScript for updates or network communications. Users should monitor and identify these processes, then exclude them from the detection rule by adding their process identifiers or network patterns to an exception list.
- Development and testing environments: Developers often use AppleScript for testing network-related functionalities. In such environments, users can reduce false positives by excluding specific host IDs or IP ranges associated with development machines.
- Remote management tools: IT departments might use AppleScript for remote management tasks that involve network connections. Users can manage these false positives by identifying and excluding the IP addresses or hostnames of known management servers from the detection criteria.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent further malicious activity and potential data exfiltration.
- Conduct a thorough investigation of the osascript process to determine the script's origin and intent, checking for any unauthorized or suspicious scripts.
- Review network logs to identify any external IP addresses the osascript process attempted to connect to, and block these IPs at the network perimeter.
- Analyze the system for additional signs of compromise, such as unauthorized user accounts or changes to system configurations.
- Remove any identified malicious scripts or files from the system and ensure that the osascript process is not running unauthorized tasks.
- Restore the system from a known good backup if the integrity of the system is in question, ensuring that the backup is free from compromise.
- Implement enhanced logging policies to capture detailed process execution and network activity, focusing on scripting and network connection events.
- Integrate threat intelligence feeds to update detection rules with known malicious IP addresses and script signatures.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the attack is part of a larger campaign.
- Apply system hardening measures, such as disabling unnecessary scripting capabilities and enforcing strict application control policies, to reduce the attack surface."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.002"
name = "AppleScript"
reference = "https://attack.mitre.org/techniques/T1059/002/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1105"
name = "Ingress Tool Transfer"
reference = "https://attack.mitre.org/techniques/T1105/"


[rule.threat.tactic]
id = "TA0011"
name = "Command and Control"
reference = "https://attack.mitre.org/tactics/TA0011/"

