[metadata]
creation_date = "2021/01/13"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the creation or modification of a DirectoryService PlugIns (dsplug) file. The DirectoryService daemon
launches on each system boot and automatically reloads after crash. It scans and executes bundles that are located in
the DirectoryServices PlugIns folder and can be abused by adversaries to maintain persistence.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "Persistence via DirectoryService Plugin Modification"
references = ["https://blog.chichou.me/2019/11/21/two-macos-persistence-tricks-abusing-plugins/"]
risk_score = 47
rule_id = "89fa6cb7-6b53-4de2-b604-648488841ab8"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.category:file and host.os.type:macos and not event.type:deletion and
  file.path:/Library/DirectoryServices/PlugIns/*.dsplug
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Persistence via DirectoryService Plugin Modification

DirectoryService PlugIns on macOS are integral for managing directory-based services, automatically executing on boot. Adversaries exploit this by modifying or creating malicious plugins to ensure their code runs persistently. The detection rule monitors for non-deletion events involving dsplug files in the PlugIns directory, flagging potential unauthorized changes indicative of persistence tactics.

### Possible investigation steps

- Review the alert details to confirm the event.category is 'file' and host.os.type is 'macos', ensuring the alert is relevant to the DirectoryService Plugin Modification.
- Verify the file path in the alert matches the pattern /Library/DirectoryServices/PlugIns/*.dsplug to confirm the location of the suspicious file.
- Check the timestamp of the event to determine when the modification or creation occurred, which can help correlate with other system activities.
- Investigate the file metadata, such as the file size, creation date, and modification date, to identify any anomalies or recent changes.
- Use Osquery to list all files in the /Library/DirectoryServices/PlugIns/ directory and gather additional details. Example query: `SELECT path, size, atime, mtime, ctime FROM file WHERE directory = '/Library/DirectoryServices/PlugIns/' AND path LIKE '%.dsplug';`
- Examine the file's contents or hash to determine if it matches known malicious signatures or if it has been altered from a known good state.
- Review system logs around the time of the event for any unusual activities or errors that might indicate tampering or unauthorized access.
- Check for any recent user logins or privilege escalations that could be related to the modification of the DirectoryService Plugin.
- Investigate any other alerts or events from the same host around the same time to identify potential patterns or related activities.
- Consult threat intelligence sources to see if the file or its characteristics match any known threats or indicators of compromise.

### False positive analysis

- Routine system updates or legitimate software installations may trigger the rule by creating or modifying dsplug files, as these processes often involve updating or adding new plugins to the DirectoryServices PlugIns folder.
- Administrative actions by IT personnel, such as troubleshooting or configuring directory services, can also result in legitimate modifications to dsplug files, leading to false positives.
- Users can manage these false positives by creating exceptions for known and trusted software update processes or specific administrative actions, ensuring that these are documented and reviewed regularly to maintain security integrity.
- Implementing a whitelist of approved dsplug files or directories can help reduce noise from expected changes, allowing security teams to focus on truly suspicious activities.
- Regularly reviewing and updating the list of exceptions is crucial to adapt to changes in software and system configurations, minimizing the risk of overlooking genuine threats.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent potential lateral movement by the adversary.
- Conduct a thorough investigation to identify any unauthorized dsplug files in the /Library/DirectoryServices/PlugIns/ directory and verify their legitimacy.
- Review system logs and security alerts to determine the timeline and method of the unauthorized modification or creation of the dsplug file.
- Remove any unauthorized or malicious dsplug files and restore any legitimate files from a known good backup.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging policies to capture detailed file creation and modification events, focusing on the DirectoryServices PlugIns directory.
- Integrate with endpoint detection and response (EDR) tools to monitor for similar persistence techniques and improve detection capabilities.
- Restore the system to its operational state by applying the latest security patches and updates, and ensure that the DirectoryService daemon is functioning correctly.
- Conduct a post-incident review to identify gaps in security controls and update security policies to prevent future occurrences.
- Implement hardening measures such as restricting write permissions to critical directories and employing application whitelisting to prevent unauthorized code execution."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1547"
name = "Boot or Logon Autostart Execution"
reference = "https://attack.mitre.org/techniques/T1547/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

