[metadata]
creation_date = "2021/01/11"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the execution of a suspicious child process of the Event Monitor Daemon (emond). Adversaries may abuse this
service by writing a rule to execute commands when a defined event occurs, such as system start up or user
authentication.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Suspicious Emond Child Process"
references = [
    "https://www.xorrior.com/emond-persistence/",
    "https://www.elastic.co/security-labs/handy-elastic-tools-for-the-enthusiastic-detection-engineer",
]
risk_score = 47
rule_id = "3e3d15c6-1509-479a-b125-21718372157e"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "macos" and event.type in ("start", "process_started") and
 process.parent.name : "emond" and
 process.name : (
   "bash",
   "dash",
   "sh",
   "tcsh",
   "csh",
   "zsh",
   "ksh",
   "fish",
   "Python",
   "python*",
   "perl*",
   "php*",
   "osascript",
   "pwsh",
   "curl",
   "wget",
   "cp",
   "mv",
   "touch",
   "echo",
   "base64",
   "launchctl")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious Emond Child Process

The Event Monitor Daemon (emond) on macOS is a service that executes predefined actions when specific system events occur. Adversaries exploit emond by crafting rules that trigger malicious processes during events like startup or login. The detection rule identifies unusual child processes spawned by emond, such as shells or scripting languages, which are indicative of potential abuse for persistence or unauthorized command execution.

### Possible investigation steps

- Review the alert details to confirm the process name and parent process name, ensuring they match the suspicious criteria outlined in the detection rule.
- Check the timestamp of the event to determine when the suspicious child process was initiated and correlate it with any known user activities or scheduled tasks.
- Investigate the command line arguments of the suspicious process to understand its intended actions and identify any potentially malicious commands or scripts.
- Examine the user account associated with the process to determine if it aligns with expected user behavior or if it indicates potential compromise.
- Utilize Osquery to gather additional context about the process. For example, run the following query to list all child processes of emond: `SELECT pid, name, path, cmdline FROM processes WHERE parent = (SELECT pid FROM processes WHERE name = 'emond');`
- Check system logs for any related events around the time of the alert, such as login attempts, system reboots, or other process executions that might provide context.
- Investigate the origin of the emond rule that triggered the process execution by reviewing configuration files or system settings that define event actions.
- Analyze network activity associated with the process to identify any suspicious outbound connections or data exfiltration attempts.
- Cross-reference the process hash with threat intelligence databases to determine if it is associated with known malware or adversary techniques.
- Review historical data to identify any previous occurrences of similar suspicious child processes spawned by emond, which could indicate a persistent threat.

### False positive analysis

- System administrators or legitimate software may use scripting languages or command-line tools for routine maintenance tasks, which could trigger the rule. For example, automated scripts executed during system startup or user login might be flagged as suspicious.
- Developers and IT professionals often use shells and scripting languages for testing and development purposes, which could result in false positives if these activities are performed on systems monitored by the rule.
- Users can manage false positives by creating exceptions for known, benign processes that are frequently executed by emond. This can be done by maintaining a whitelist of trusted scripts or applications that are expected to run as child processes of emond.
- Regularly review and update the list of exceptions to ensure that only legitimate processes are excluded, minimizing the risk of overlooking genuine threats.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify any unauthorized emond rules by reviewing the configuration files located in /etc/emond.d/rules/.
- Terminate any suspicious child processes spawned by emond to halt potential malicious activities.
- Review system logs and security alerts to gather additional context on the suspicious activity and identify any other affected systems.
- Escalate the incident to the security operations team for further analysis and to determine if the attack is part of a broader campaign.
- Remove any unauthorized emond rules and restore legitimate configurations from a known good backup.
- Implement enhanced logging policies to monitor emond activity and child processes, ensuring detailed logs are collected for future investigations.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to improve detection capabilities for similar threats.
- Apply security patches and updates to the macOS system to mitigate vulnerabilities that could be exploited by adversaries.
- Educate users on recognizing and reporting suspicious activities, and consider implementing additional security measures such as application whitelisting and endpoint detection and response (EDR) solutions."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1546"
name = "Event Triggered Execution"
reference = "https://attack.mitre.org/techniques/T1546/"
[[rule.threat.technique.subtechnique]]
id = "T1546.014"
name = "Emond"
reference = "https://attack.mitre.org/techniques/T1546/014/"



[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

