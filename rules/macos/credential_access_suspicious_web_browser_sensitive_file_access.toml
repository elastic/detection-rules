[metadata]
creation_date = "2020/01/04"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the access or file open of web browser sensitive files by an untrusted/unsigned process or osascript.
Adversaries may acquire credentials from web browsers by reading files specific to the target browser.
"""
from = "now-9m"
index = ["logs-endpoint.events.file-*"]
language = "eql"
license = "Elastic License v2"
name = "Suspicious Web Browser Sensitive File Access"
references = ["https://securelist.com/calisto-trojan-for-macos/86543/"]
risk_score = 73
rule_id = "20457e4f-d1de-4b92-ae69-142e27a4342a"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where event.action == "open" and host.os.type == "macos" and process.executable != null and
 file.name : ("cookies.sqlite", 
              "key?.db", 
              "logins.json", 
              "Cookies", 
              "Cookies.binarycookies", 
              "Login Data") and 
 ((process.code_signature.trusted == false or process.code_signature.exists == false) or process.name : "osascript") and 
 not process.code_signature.signing_id : "org.mozilla.firefox" and
 not Effective_process.executable : "/Library/Elastic/Endpoint/elastic-endpoint.app/Contents/MacOS/elastic-endpoint"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious Web Browser Sensitive File Access

Web browsers store sensitive data like cookies and login credentials in specific files. Adversaries exploit this by accessing these files using untrusted or unsigned processes, potentially stealing credentials. The detection rule identifies such unauthorized access on macOS by monitoring file access events, focusing on untrusted processes or scripts, and excluding known legitimate applications. This helps in identifying potential credential theft attempts.

### Possible investigation steps

- Review the alert details to identify the specific file accessed and the untrusted process involved, focusing on the `file.name` and `process.executable` fields.
- Verify the legitimacy of the process by checking the `process.code_signature.trusted` and `process.code_signature.exists` fields to confirm if the process is unsigned or untrusted.
- Investigate the process's parent process using the `process.parent.executable` field to determine if it was spawned by a legitimate application or script.
- Check the `process.name` field to see if the process is `osascript`, which could indicate a script-based attempt to access sensitive files.
- Use Osquery to gather more information about the process by running a query such as: `SELECT * FROM processes WHERE name = '<process_name>';` to retrieve details like process path, arguments, and parent process.
- Examine recent system logs for any unusual activity around the time of the alert, focusing on login events or other process executions that might correlate with the suspicious access.
- Cross-reference the `host.os.type` field to ensure the alert pertains to a macOS system, confirming the environment context for the investigation.
- Investigate the user account associated with the process by checking the `user.name` field to determine if the activity aligns with the user's typical behavior.
- Review any recent changes or installations on the system that might have introduced the untrusted process, focusing on software updates or new applications.
- Consult threat intelligence sources to check if the process or file access pattern matches known malicious activity or indicators of compromise.

### False positive analysis

- Legitimate applications or scripts that access browser files for non-malicious purposes, such as backup utilities or browser extensions, may trigger this rule. Users should verify the legitimacy of these applications and consider adding them to an exclusion list if they are frequently flagged.
- System maintenance or security software that scans or interacts with browser files might be mistakenly identified as suspicious. Users can create exceptions for these trusted processes by adding their code signatures or executable paths to the exclusion criteria.
- Developers or IT personnel using automation scripts that interact with browser data for testing or configuration purposes may also cause false positives. It is advisable to review these scripts and, if deemed safe, exclude them from the detection rule.
- Updates or new installations of legitimate software that temporarily lack a recognized code signature might be flagged. Users should monitor these events and update the exclusion list once the software is verified and trusted.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify the untrusted process or script that accessed the sensitive files, using endpoint detection and response (EDR) tools.
- Review system and application logs to trace the origin and timeline of the suspicious activity, focusing on any anomalies around the time of the alert.
- Verify the integrity of the accessed files and check for any unauthorized changes or data exfiltration.
- If credentials are suspected to be compromised, initiate a password reset for affected accounts and review access logs for any unauthorized logins.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging policies to capture detailed process execution and file access events for future investigations.
- Integrate threat intelligence feeds to correlate the activity with known threat actors or campaigns, leveraging MITRE ATT&CK framework for context.
- Restore the system to its operational state by removing any malicious processes or scripts and applying security patches and updates.
- Harden the system by implementing application whitelisting, ensuring all software is signed and trusted, and educating users on recognizing phishing attempts and suspicious activities."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1539"
name = "Steal Web Session Cookie"
reference = "https://attack.mitre.org/techniques/T1539/"

[[rule.threat.technique]]
id = "T1555"
name = "Credentials from Password Stores"
reference = "https://attack.mitre.org/techniques/T1555/"
[[rule.threat.technique.subtechnique]]
id = "T1555.003"
name = "Credentials from Web Browsers"
reference = "https://attack.mitre.org/techniques/T1555/003/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

