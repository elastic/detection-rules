[metadata]
creation_date = "2020/11/16"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the use of osascript to execute scripts via standard input that may prompt a user with a rogue dialog for
credentials.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Prompt for Credentials with OSASCRIPT"
references = [
    "https://github.com/EmpireProject/EmPyre/blob/master/lib/modules/collection/osx/prompt.py",
    "https://ss64.com/osx/osascript.html",
]
risk_score = 73
rule_id = "38948d29-3d5d-42e3-8aec-be832aaaf8eb"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where event.action == "exec" and host.os.type == "macos" and
 process.name : "osascript" and process.args : "-e" and process.command_line : ("*osascript*display*dialog*password*", "*osascript*display*dialog*passphrase*") and
 not (process.parent.executable : "/usr/bin/sudo" and process.command_line : "*Encryption Key Escrow*") and
 not (process.command_line : "*-e with timeout of 3600 seconds*" and user.id == "0" and process.parent.executable : "/bin/bash") and
 not process.Ext.effective_parent.executable : ("/usr/local/jamf/*", 
                                                "/Applications/Karabiner-Elements.app/Contents/MacOS/Karabiner-Elements",
                                                "/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal",
                                                "/Library/Application Support/JAMF/Jamf.app/Contents/MacOS/JamfDaemon.app/Contents/MacOS/JamfDaemon",
                                                "/Library/Application Support/JAMF/Jamf.app/Contents/MacOS/JamfManagementService.app/Contents/MacOS/JamfManagementService")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Prompt for Credentials with OSASCRIPT

OSASCRIPT is a command-line utility in macOS used to execute AppleScript and other OSA language scripts. Adversaries may exploit it to display deceptive dialogs prompting users for credentials, mimicking legitimate requests. The detection rule identifies suspicious OSASCRIPT usage by monitoring specific command patterns and excluding known legitimate processes, thus highlighting potential credential phishing attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of suspicious `osascript` usage, focusing on the `process.command_line` field to identify if it includes patterns like `*display*dialog*password*` or `*display*dialog*passphrase*`.
- Check the `process.parent.executable` field to determine the parent process of the `osascript` execution, ensuring it is not a known legitimate process such as `/usr/bin/sudo` or `/bin/bash` with specific command lines.
- Investigate the `user.id` associated with the process to determine if the execution was performed by a privileged user, which might indicate a higher risk.
- Examine the `process.Ext.effective_parent.executable` field to verify if the parent process is part of known legitimate applications like Jamf or Karabiner-Elements, which could explain the `osascript` usage.
- Use Osquery to gather additional context about the process and its parent. For example, run the following query to list recent processes executed by the same user: `SELECT * FROM processes WHERE uid = (SELECT uid FROM processes WHERE name = 'osascript' AND cmdline LIKE '%display dialog%');`
- Analyze the timing of the `osascript` execution by reviewing the event timestamp to correlate with any user-reported suspicious activity or other security events.
- Check system logs for any additional context or anomalies around the time of the `osascript` execution, such as login attempts or other process executions.
- Investigate the network activity of the affected host around the time of the alert to identify any unusual outbound connections that might suggest data exfiltration.
- Review any recent changes or updates to the system that might have introduced new scripts or applications capable of executing `osascript`.
- Consult with the user of the affected system to determine if they recall any unexpected prompts or dialogs, which could provide insight into whether the alert was a false positive or a genuine phishing attempt.

### False positive analysis

- Legitimate administrative scripts: Some organizations use osascript in administrative scripts for legitimate purposes, such as automating system configurations or user notifications. These scripts might inadvertently match the detection criteria. To handle this, users can create exceptions for specific scripts by excluding their parent executable paths or command-line patterns.
- Software management tools: Applications like JAMF or Karabiner-Elements may use osascript for legitimate functions, such as managing system settings or user preferences. These tools are often whitelisted in enterprise environments. Users can manage these false positives by adding exceptions for known software management tools, as indicated in the detection rule.
- Terminal-based automation: Users or administrators might use Terminal to run osascript commands for automation tasks. If these tasks are routine and verified as non-threatening, users can exclude the Terminal executable path from the detection rule to prevent false positives.
- System maintenance tasks: Some system maintenance tasks might involve osascript to prompt users for input or confirmation. If these tasks are part of regular system operations, users can exclude specific command-line patterns or parent processes associated with these tasks to reduce false alerts.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent further credential theft or lateral movement.
- Investigate the process tree to identify the source of the osascript execution and any associated scripts or files.
- Terminate any suspicious processes related to the osascript activity to stop ongoing credential phishing attempts.
- Review user accounts and credentials for any unauthorized access or changes, and reset passwords as necessary.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and threat intelligence correlation.
- Implement enhanced logging for osascript executions and other scripting activities on macOS systems to improve future detection capabilities.
- Integrate endpoint detection and response (EDR) solutions to monitor and alert on suspicious script executions and process behaviors.
- Restore the system to its operational state by removing any malicious scripts or files and applying security patches and updates.
- Conduct a security awareness training session for users to recognize and report phishing attempts and suspicious dialogs.
- Harden macOS systems by restricting script execution permissions and implementing application whitelisting to prevent unauthorized script usage."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1056"
name = "Input Capture"
reference = "https://attack.mitre.org/techniques/T1056/"
[[rule.threat.technique.subtechnique]]
id = "T1056.002"
name = "GUI Input Capture"
reference = "https://attack.mitre.org/techniques/T1056/002/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

