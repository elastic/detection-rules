[metadata]
creation_date = "2020/01/07"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and
features, including Wi-Fi and website passwords, secure notes, certificates, and Kerberos. Adversaries may collect the
keychain storage data from a system to acquire credentials.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "SystemKey Access via Command Line"
references = ["https://github.com/AlessandroZ/LaZagne/blob/master/Mac/lazagne/softwares/system/chainbreaker.py"]
risk_score = 73
rule_id = "d75991f2-b989-419d-b797-ac1e54ec2d61"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.category:process and host.os.type:macos and event.type:(start or process_started) and
  process.args:("/private/var/db/SystemKey" or "/var/db/SystemKey") and
  not process.Ext.effective_parent.executable : "/Library/Elastic/Endpoint/elastic-endpoint.app/Contents/MacOS/elastic-endpoint"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating SystemKey Access via Command Line

In macOS, keychains securely store user credentials, including passwords and certificates. Adversaries may exploit command-line access to extract keychain data, gaining unauthorized credentials. The detection rule identifies suspicious process activities targeting SystemKey paths, excluding legitimate security processes, to flag potential credential theft attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of suspicious process activities targeting SystemKey paths, specifically checking the `process.args` field for "/private/var/db/SystemKey" or "/var/db/SystemKey".
- Verify the `event.category` and `event.type` fields to ensure the event is related to a process start or initiation on a macOS host.
- Examine the `process.Ext.effective_parent.executable` field to confirm that the process is not a legitimate security process, such as the Elastic Endpoint.
- Use Osquery to list all processes that have accessed the SystemKey paths recently with a query like: `SELECT pid, name, path FROM processes WHERE path LIKE '/private/var/db/SystemKey%' OR path LIKE '/var/db/SystemKey%';`
- Investigate the parent process of the suspicious activity by checking the `process.parent.name` and `process.parent.executable` fields to understand the origin of the process.
- Check the `host.name` and `host.ip` fields to identify the affected system and correlate with any other suspicious activities on the same host.
- Review user activity on the affected host by examining the `user.name` field to determine if the activity aligns with expected user behavior.
- Analyze historical data for similar process activities on the same host or across the environment to identify patterns or repeated attempts.
- Cross-reference the `process.name` and `process.executable` fields with known malicious or suspicious binaries to assess the threat level.
- Consult threat intelligence sources to determine if the observed behavior or process is associated with known adversary techniques or campaigns.

### False positive analysis

- Legitimate security software or system maintenance tools may access SystemKey paths as part of routine operations, leading to false positives. Users should identify these processes and consider excluding them from the detection rule.
- macOS updates or system diagnostics might trigger access to SystemKey paths. Users can monitor update schedules and correlate them with alerts to determine if they are false positives.
- Custom scripts or administrative tools developed in-house that require access to keychain data for legitimate purposes may also be flagged. Users should document these scripts and create exceptions for them in the detection rule.
- Security audits or compliance checks performed by authorized personnel might involve accessing SystemKey paths. Users should ensure these activities are logged and recognized as non-threatening, adjusting the rule to exclude them if necessary.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify any unauthorized processes or users accessing the SystemKey paths, focusing on the process arguments and parent processes.
- Review system logs and security alerts to determine the scope of the breach and identify any other potentially compromised systems.
- Terminate any suspicious processes identified during the investigation that are accessing the SystemKey paths without legitimate reasons.
- Change all passwords and credentials stored in the keychain on the affected system and any other systems where the same credentials are used.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if the attack is part of a larger campaign.
- Implement enhanced logging policies to capture detailed process execution data and command-line arguments for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Restore the system to its operational state by reinstalling the operating system and applications, ensuring all security patches and updates are applied.
- Harden the system by disabling unnecessary services, enforcing strong password policies, and implementing multi-factor authentication to reduce the risk of future credential theft."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1555"
name = "Credentials from Password Stores"
reference = "https://attack.mitre.org/techniques/T1555/"
[[rule.threat.technique.subtechnique]]
id = "T1555.001"
name = "Keychain"
reference = "https://attack.mitre.org/techniques/T1555/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

