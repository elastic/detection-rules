[metadata]
creation_date = "2020/11/16"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies a high number (20) of macOS SSH KeyGen process executions from the same host. An adversary may attempt a
brute force attack to obtain unauthorized access to user accounts.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "Potential macOS SSH Brute Force Detected"
references = ["https://themittenmac.com/detecting-ssh-activity-via-process-monitoring/"]
risk_score = 47
rule_id = "ace1e989-a541-44df-93a8-a8b0591b63c0"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "threshold"

query = '''
event.category:process and host.os.type:macos and event.type:start and process.name:"sshd-keygen-wrapper" and process.parent.name:launchd
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential macOS SSH Brute Force Detected

SSH (Secure Shell) is a protocol used to securely access remote systems. On macOS, the `sshd-keygen-wrapper` process is involved in SSH key generation. Adversaries may exploit this by repeatedly attempting to generate keys to gain unauthorized access, a technique known as brute force. The detection rule identifies unusual activity by monitoring for excessive SSH key generation attempts, signaling potential brute force attacks.

### Possible investigation steps

- Review the alert details to confirm the number of `sshd-keygen-wrapper` process executions and verify if it meets or exceeds the threshold of 20 executions from the same host.
- Check the `host.os.type` field to ensure the operating system is macOS, as the rule is specific to this OS.
- Investigate the `process.parent.name` field to confirm that the parent process is `launchd`, which is expected for legitimate SSH key generation activities.
- Use Osquery to list all recent processes executed on the host to identify any unusual or unauthorized activities. Example query: `SELECT pid, name, path, cmdline, start_time FROM processes WHERE name = 'sshd-keygen-wrapper';`
- Examine the `event.category` and `event.type` fields to ensure the event is categorized as a process start, which aligns with the rule's focus on process execution.
- Correlate the timestamps of the `sshd-keygen-wrapper` executions with user login attempts or other authentication logs to identify any patterns or anomalies.
- Investigate the user accounts associated with the `sshd-keygen-wrapper` executions to determine if they are legitimate users or potentially compromised accounts.
- Check for any recent changes in SSH configuration files on the host that might indicate tampering or misconfiguration that could facilitate brute force attempts.
- Review network logs for any unusual inbound SSH traffic to the host, which might indicate external brute force attempts.
- Analyze historical data to determine if this host has a pattern of similar alerts or if this is an isolated incident, which can help assess the severity and potential impact.

### False positive analysis

- Legitimate administrative tasks: System administrators may perform legitimate tasks that involve generating multiple SSH keys, such as setting up new user accounts or configuring automated processes. These activities can trigger the detection rule as false positives.
- Automated scripts or tools: Some automated scripts or tools used for system management or deployment may execute the `sshd-keygen-wrapper` process multiple times, leading to false positives.
- Development environments: In development environments, developers might frequently generate SSH keys for testing purposes, which can be mistaken for brute force attempts.
- To manage these false positives, users can create exceptions for known administrative activities or trusted scripts by excluding specific user accounts or processes from the detection rule. This can be done by refining the query to exclude certain conditions or by using allowlists for recognized non-threatening behaviors.

### Response and remediation

- Immediately isolate the affected macOS host from the network to prevent further unauthorized access.
- Review the system logs to identify the source IP addresses and user accounts involved in the excessive SSH key generation attempts.
- Change passwords for all user accounts on the affected system and enforce strong password policies.
- Investigate the source IP addresses for any known malicious activity or previous incidents.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and threat intelligence correlation.
- Implement additional logging and monitoring for SSH activities, including successful and failed login attempts, to enhance future detection capabilities.
- Integrate threat intelligence feeds to identify and block known malicious IP addresses attempting SSH brute force attacks.
- Restore the system to its operational state by ensuring all unauthorized keys are removed and legitimate keys are verified.
- Apply security patches and updates to the macOS system to mitigate any known vulnerabilities that could be exploited.
- Harden the system by disabling SSH access for root accounts, using SSH key-based authentication, and configuring fail2ban or similar tools to block repeated failed login attempts."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1110"
name = "Brute Force"
reference = "https://attack.mitre.org/techniques/T1110/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

[rule.threshold]
field = ["host.id"]
value = 20

