[metadata]
creation_date = "2020/12/07"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Detects modification of a Folder Action script. A Folder Action script is executed when the folder to which it is
attached has items added or removed, or when its window is opened, closed, moved, or resized. Adversaries may abuse this
feature to establish persistence by utilizing a malicious script.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Persistence via Folder Action Script"
references = ["https://posts.specterops.io/folder-actions-for-persistence-on-macos-8923f222343d"]
risk_score = 47
rule_id = "c292fa52-4115-408a-b897-e14f684b3cb7"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "macos" and event.type : "start" and process.name in ("osascript", "python", "tcl", "node", "perl", "ruby", "php", "bash", "csh", "zsh", "sh") and
  process.parent.name == "com.apple.foundation.UserScriptService" and not process.args : ("/Users/*/Library/Application Support/iTerm2/Scripts/AutoLaunch/*.scpt", "/Users/*/Library/Application Scripts/com.microsoft.*/FoxitUtils.applescript")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Persistence via Folder Action Script

Folder Action scripts on macOS automate tasks when folder contents change. Adversaries exploit this by attaching malicious scripts to folders, ensuring execution upon folder events, thus achieving persistence. The detection rule identifies suspicious script executions by monitoring specific processes initiated by the UserScriptService, excluding known benign scripts, to flag potential threats.

### Possible investigation steps

- Review the alert details to identify the specific process name and arguments that triggered the detection, focusing on the `process.name` and `process.args` fields.
- Verify the parent process by examining the `process.parent.name` field to confirm it is `com.apple.foundation.UserScriptService`, which indicates a Folder Action script execution.
- Check the user account associated with the process to determine if it aligns with expected user behavior or if it appears suspicious.
- Investigate the script path and content by accessing the folder specified in the `process.args` to identify any unauthorized or malicious modifications.
- Use Osquery to list all Folder Action scripts currently configured on the system with the following query: `SELECT * FROM file WHERE path LIKE '/Users/%/Library/Scripts/Folder Action Scripts/%';`
- Cross-reference the detected script with known benign scripts to ensure it is not mistakenly flagged, using the exclusion paths provided in the detection rule.
- Analyze recent changes to the folder associated with the script to identify any unusual activity or unauthorized access.
- Review system logs for any additional context or related events around the time of the alert to identify potential patterns or repeated attempts.
- Check for any other processes or network connections initiated by the suspicious script to assess further malicious activity.
- Consult threat intelligence sources to determine if the script or its behavior matches known malicious patterns or campaigns.

### False positive analysis

- Known false positives for the Persistence via Folder Action Script rule include legitimate automation scripts that users have intentionally attached to folders for productivity purposes, such as scripts for organizing files or triggering backups.
- Users may frequently encounter false positives from development environments where scripts are executed as part of the software development process, especially if using scripting languages like Python, Ruby, or Node.js.
- To manage these false positives, users can create exceptions for specific scripts or folders by modifying the detection rule to exclude known benign scripts or directories, similar to the existing exclusions for iTerm2 and Microsoft-related scripts.
- Users should regularly review and update their exclusion list to ensure that only trusted scripts are excluded, maintaining a balance between reducing false positives and ensuring security.
- It is advisable to document any exclusions made for auditing purposes and to reassess them periodically to confirm they remain non-threatening.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Investigate the specific Folder Action script that triggered the alert to determine if it is indeed malicious by analyzing its contents and behavior.
- Review recent changes to the folder and associated scripts to identify unauthorized modifications or additions.
- Remove or disable the malicious script from the Folder Action configuration to prevent further execution.
- Conduct a thorough scan of the system using updated antivirus and anti-malware tools to identify and remove any additional threats.
- Restore any modified or deleted legitimate scripts from a known good backup to ensure system functionality.
- Escalate the incident to the security operations team if the script is part of a broader attack campaign or if multiple systems are affected.
- Implement enhanced logging policies to capture detailed script execution events and folder modifications for future investigations.
- Integrate with a centralized security information and event management (SIEM) system to correlate events and improve threat detection capabilities.
- Apply hardening measures such as restricting script execution permissions, disabling unnecessary scripting languages, and educating users on the risks of unauthorized script usage."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1037"
name = "Boot or Logon Initialization Scripts"
reference = "https://attack.mitre.org/techniques/T1037/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"


[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

