[metadata]
creation_date = "2020/01/06"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Adversaries may collect keychain storage data from a system to in order to acquire credentials. Keychains are the
built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi
and website passwords, secure notes, certificates, and Kerberos.
"""
false_positives = ["Applications for password management."]
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Keychain Password Retrieval via Command Line"
references = [
    "https://www.netmeister.org/blog/keychain-passwords.html",
    "https://github.com/priyankchheda/chrome_password_grabber/blob/master/chrome.py",
    "https://ss64.com/osx/security.html",
    "https://www.intezer.com/blog/research/operation-electrorat-attacker-creates-fake-companies-to-drain-your-crypto-wallets/",
]
risk_score = 73
rule_id = "9092cd6c-650f-4fa3-8a8a-28256c7489c9"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "macos" and event.action == "exec" and
 process.name : "security" and
 process.args : ("-wa", "-ga") and process.args : ("find-generic-password", "find-internet-password") and
 process.command_line : ("*Chrome*", "*Chromium*", "*Opera*", "*Safari*", "*Brave*", "*Microsoft Edge*", "*Firefox*") and
 not process.parent.executable : "/Applications/Keeper Password Manager.app/Contents/Frameworks/Keeper Password Manager Helper*/Contents/MacOS/Keeper Password Manager Helper*"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Keychain Password Retrieval via Command Line

macOS Keychain securely stores user credentials, including passwords and certificates. Adversaries exploit command-line tools to extract these credentials, targeting applications like browsers. The detection rule identifies suspicious command executions involving keychain access commands and browser references, excluding legitimate password manager activities, to flag potential credential theft attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of suspicious command executions involving the `security` process with arguments `-wa` or `-ga` and `find-generic-password` or `find-internet-password`.
- Verify the command line details to check for references to browsers such as Chrome, Chromium, Opera, Safari, Brave, Microsoft Edge, or Firefox, which may indicate an attempt to access stored credentials.
- Cross-reference the process parent executable to ensure it is not originating from a legitimate password manager, specifically checking against the Keeper Password Manager.
- Use Osquery to gather additional context on the process execution. For example, run the following query to list recent executions of the `security` command:
  ```sql
  SELECT pid, name, path, cmdline, parent FROM processes WHERE name = 'security' AND cmdline LIKE '%find-generic-password%' OR cmdline LIKE '%find-internet-password%';
  ```
- Investigate the user account associated with the suspicious process to determine if it aligns with expected behavior or if it might be compromised.
- Check system logs for any other unusual activities or errors around the time of the alert to identify potential correlations or additional indicators of compromise.
- Analyze network activity from the host to detect any suspicious outbound connections that might suggest data exfiltration.
- Review recent login events on the system to identify any unauthorized access attempts that could be related to the alert.
- Examine the file system for any newly created or modified files that could be associated with credential theft tools or scripts.
- Consult threat intelligence sources to determine if there are any known campaigns or threat actors using similar techniques, which could provide additional context for the investigation.

### False positive analysis

- Legitimate applications or scripts that access the keychain for routine operations may trigger false positives. For example, automated scripts that manage browser settings or credentials for enterprise environments might use similar command-line arguments.
- Developers or IT administrators using command-line tools for debugging or managing browser settings could inadvertently match the detection criteria.
- Users can manage these false positives by creating exceptions for known, trusted applications or scripts that frequently access the keychain. This can be done by adding specific process names or command-line patterns to an exclusion list.
- Regularly review and update the exclusion list to ensure it reflects current legitimate activities, especially after software updates or changes in IT policies.
- Consider implementing additional context checks, such as verifying the user account executing the command or the network location, to differentiate between benign and malicious activities.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to confirm the alert by reviewing the command execution logs and identifying any unauthorized access to keychain data.
- If unauthorized access is confirmed, reset all potentially compromised credentials stored in the keychain, including Wi-Fi, website passwords, and any other sensitive information.
- Escalate the incident to the security operations team for further analysis and to determine if the attack is part of a larger campaign.
- Implement enhanced logging policies to capture detailed command-line activity and process execution on macOS systems for future investigations.
- Integrate security tools with SIEM solutions to correlate events and improve detection capabilities for similar threats.
- Restore the system to its operational state by ensuring all security patches and updates are applied, and conduct a full malware scan to remove any persistent threats.
- Educate users on the importance of using strong, unique passwords and the risks associated with storing sensitive information in easily accessible locations.
- Review and update security policies to include regular audits of keychain access and implement multi-factor authentication for accessing sensitive applications and data.
- Utilize MITRE ATT&CK framework to continuously assess and improve defenses against credential access techniques, focusing on T1555 (Credentials from Password Stores)."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1555"
name = "Credentials from Password Stores"
reference = "https://attack.mitre.org/techniques/T1555/"
[[rule.threat.technique.subtechnique]]
id = "T1555.001"
name = "Keychain"
reference = "https://attack.mitre.org/techniques/T1555/001/"


[[rule.threat.technique]]
id = "T1555"
name = "Credentials from Password Stores"
reference = "https://attack.mitre.org/techniques/T1555/"
[[rule.threat.technique.subtechnique]]
id = "T1555.003"
name = "Credentials from Web Browsers"
reference = "https://attack.mitre.org/techniques/T1555/003/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

