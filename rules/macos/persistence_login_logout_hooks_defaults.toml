[metadata]
creation_date = "2020/12/07"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies use of the Defaults command to install a login or logoff hook in MacOS. An adversary may abuse this
capability to establish persistence in an environment by inserting code to be executed at login or logout.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Persistence via Login or Logout Hook"
references = [
    "https://www.virusbulletin.com/uploads/pdf/conference_slides/2014/Wardle-VB2014.pdf",
    "https://www.manpagez.com/man/1/defaults/",
]
risk_score = 47
rule_id = "5d0265bf-dea9-41a9-92ad-48a8dcd05080"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "macos" and event.type == "start" and
 process.name == "defaults" and process.args == "write" and process.args : ("LoginHook", "LogoutHook") and
 not process.args :
       (
         "Support/JAMF/ManagementFrameworkScripts/logouthook.sh",
         "Support/JAMF/ManagementFrameworkScripts/loginhook.sh",
         "/Library/Application Support/JAMF/ManagementFrameworkScripts/logouthook.sh",
         "/Library/Application Support/JAMF/ManagementFrameworkScripts/loginhook.sh"
       )
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Persistence via Login or Logout Hook

In macOS environments, login and logout hooks are scripts that execute automatically during user login or logout, respectively. Adversaries exploit this by inserting malicious scripts to maintain persistence. The detection rule identifies suspicious use of the 'defaults' command to set these hooks, excluding known legitimate scripts, thus highlighting potential unauthorized persistence attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of the 'defaults' command with 'write' arguments targeting 'LoginHook' or 'LogoutHook', ensuring it matches the query criteria.
- Check the process execution context, including the user account under which the 'defaults' command was executed, to determine if it aligns with expected administrative activity.
- Investigate the parent process of the 'defaults' command to understand how it was initiated and whether it was part of a legitimate workflow or a suspicious chain of processes.
- Examine the command line arguments used with the 'defaults' command to identify the specific script or executable being set as a login or logout hook.
- Cross-reference the script paths against known legitimate scripts to verify if they are indeed unauthorized or potentially malicious.
- Utilize Osquery to list all current login and logout hooks on the system with a query like: `SELECT * FROM preferences WHERE domain = 'com.apple.loginwindow' AND key IN ('LoginHook', 'LogoutHook');` to gather more context.
- Analyze the content of the identified scripts or executables to determine their purpose and whether they contain any malicious or unexpected code.
- Review system logs around the time of the 'defaults' command execution for any additional suspicious activity or related events that could provide further context.
- Check for any recent changes to user accounts or permissions that might indicate an adversary's attempt to gain or maintain access.
- Correlate this activity with other alerts or indicators of compromise within the environment to assess if this is part of a broader attack campaign.

### False positive analysis

- Known false positives for the Persistence via Login or Logout Hook rule primarily involve legitimate scripts used by system management tools like JAMF, which utilize login and logout hooks for administrative tasks.
- Users can manage these false positives by creating exceptions for known legitimate scripts, such as those located in "/Library/Application Support/JAMF/ManagementFrameworkScripts/".
- To handle frequent non-threatening behaviors, users should maintain an updated list of trusted scripts and directories that are commonly used in their environment, ensuring these are excluded from detection.
- Regularly review and update the exclusion list to accommodate any changes in legitimate administrative scripts or tools, minimizing the risk of overlooking genuine threats while reducing false positives.
- Collaborate with IT and security teams to identify and document any new legitimate scripts that may trigger the rule, ensuring they are promptly added to the exclusion list.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent further malicious activity and lateral movement.
- Review the process execution logs to confirm the unauthorized use of the 'defaults' command and identify any associated scripts or payloads.
- Terminate any suspicious processes that are linked to the unauthorized login or logout hooks to halt potential malicious actions.
- Remove the unauthorized login or logout hooks by resetting them to their default state or replacing them with legitimate scripts if necessary.
- Conduct a thorough scan of the system using updated antivirus or endpoint detection and response (EDR) tools to identify and remove any additional malware or persistence mechanisms.
- Review user accounts and privileges on the affected system to ensure no unauthorized accounts or privilege escalations have occurred.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if other systems are affected.
- Implement enhanced logging policies to capture detailed process execution and command-line arguments for future investigations.
- Integrate threat intelligence feeds and MITRE ATT&CK framework mappings into security monitoring tools to improve detection of similar threats.
- Apply system hardening measures, such as disabling unused services and enforcing strong authentication mechanisms, to reduce the attack surface and prevent future persistence attempts."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1037"
name = "Boot or Logon Initialization Scripts"
reference = "https://attack.mitre.org/techniques/T1037/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

