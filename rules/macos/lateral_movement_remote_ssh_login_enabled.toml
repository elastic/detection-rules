[metadata]
creation_date = "2020/08/18"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = "Detects use of the systemsetup command to enable remote SSH Login."
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "Remote SSH Login Enabled via systemsetup Command"
references = [
    "https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf",
    "https://ss64.com/osx/systemsetup.html",
    "https://support.apple.com/guide/remote-desktop/about-systemsetup-apd95406b8d/mac",
]
risk_score = 47
rule_id = "5ae4e6f8-d1bf-40fa-96ba-e29645e1e4dc"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Lateral Movement",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.category:process and host.os.type:macos and event.type:(start or process_started) and
 process.name:systemsetup and
 process.args:("-setremotelogin" and on) and
 not process.parent.executable : /usr/local/jamf/bin/jamf
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Remote SSH Login Enabled via systemsetup Command

The `systemsetup` command in macOS is a utility that allows administrators to configure system settings, including enabling remote SSH login. While useful for legitimate remote management, adversaries can exploit this to gain unauthorized access. The detection rule identifies suspicious use of `systemsetup` to enable SSH, excluding known legitimate processes, thus highlighting potential lateral movement attempts by attackers.

### Possible investigation steps

- Review the alert details to confirm the presence of the `systemsetup` command with arguments `-setremotelogin on` and verify the process name as `systemsetup`.
- Check the parent process of the `systemsetup` command to ensure it is not `/usr/local/jamf/bin/jamf`, as this is a known legitimate process.
- Identify the user account associated with the process execution to determine if it is a known administrator or a potentially compromised account.
- Examine the timestamp of the event to correlate with any other suspicious activities or anomalies in the system logs around the same time.
- Use Osquery to list all current SSH configurations and check if remote login is enabled with the following query: `SELECT * FROM plist WHERE path = '/etc/ssh/sshd_config' AND key = 'PermitRootLogin';`
- Investigate the system's SSH access logs to identify any recent or unusual login attempts, especially around the time the `systemsetup` command was executed.
- Cross-reference the host IP address with known assets to determine if the system is part of a critical network segment or if it has any history of security incidents.
- Analyze any network traffic logs to identify potential lateral movement or data exfiltration attempts following the enabling of remote SSH login.
- Check for any recent changes in user permissions or group memberships that could indicate privilege escalation attempts.
- Review any other security alerts or incidents involving the same host or user account to assess if this event is part of a broader attack campaign.

### False positive analysis

- Known false positives for the Remote SSH Login Enabled via systemsetup Command rule often arise from legitimate administrative tools and scripts that manage macOS systems, such as configuration management software or custom scripts used by IT departments.
- One common source of false positives is the use of the `systemsetup` command by authorized IT personnel or automated scripts to enable SSH for legitimate remote management tasks.
- To manage these false positives, users can create exceptions for specific parent processes or scripts that are known to perform legitimate SSH enabling actions. This can be done by adding these processes to the exclusion list in the detection rule.
- Another method to handle false positives is to monitor the frequency and context of the `systemsetup` command usage. If a particular process or script frequently triggers the rule but is verified as non-threatening, it can be safely excluded.
- It's important to regularly review and update the list of exceptions to ensure that new legitimate processes are accounted for while maintaining the integrity of the detection rule against potential threats.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent further unauthorized access or lateral movement.
- Verify the legitimacy of the process by checking the user account that executed the `systemsetup` command and cross-reference with known administrative activities.
- Review system logs and security alerts to identify any other suspicious activities or unauthorized access attempts around the time the SSH was enabled.
- If unauthorized access is confirmed, reset credentials for affected accounts and any other accounts that may have been compromised.
- Disable remote SSH login if it was enabled without authorization and ensure that only authorized users can enable it in the future.
- Escalate the incident to the security operations team for further investigation and to determine if additional systems have been compromised.
- Implement enhanced logging policies to capture detailed process execution and network activity, ensuring that future unauthorized changes are detected promptly.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Restore the system to its operational state by applying any necessary patches, updates, and security configurations to prevent exploitation of known vulnerabilities.
- Harden the system by enforcing strong authentication mechanisms, such as multi-factor authentication, and regularly auditing user permissions and access controls."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1021"
name = "Remote Services"
reference = "https://attack.mitre.org/techniques/T1021/"
[[rule.threat.technique.subtechnique]]
id = "T1021.004"
name = "SSH"
reference = "https://attack.mitre.org/techniques/T1021/004/"



[rule.threat.tactic]
id = "TA0008"
name = "Lateral Movement"
reference = "https://attack.mitre.org/tactics/TA0008/"

