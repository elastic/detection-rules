[metadata]
creation_date = "2022/04/25"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies attempts to create or modify a crontab via a process that is not crontab (i.e python, osascript, etc.). This
activity should not be highly prevalent and could indicate the use of cron as a persistence mechanism by a threat actor.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Suspicious CronTab Creation or Modification"
references = [
    "https://taomm.org/PDFs/vol1/CH%200x02%20Persistence.pdf",
    "https://theevilbit.github.io/beyond/beyond_0004/",
]
risk_score = 47
rule_id = "530178da-92ea-43ce-94c2-8877a826783d"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where host.os.type == "macos" and event.type != "deletion" and process.name != null and
  file.path : "/private/var/at/tabs/*" and not process.executable == "/usr/bin/crontab"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious CronTab Creation or Modification

Cron jobs are scheduled tasks in Unix-like systems, including macOS, used for automating repetitive tasks. Adversaries may exploit cron to maintain persistence by creating or altering cron jobs using unconventional processes like Python scripts. The detection rule identifies such anomalies by flagging non-standard processes modifying cron files, which could indicate malicious activity.

### Possible investigation steps

- Review the alert details to identify the specific process name and executable path that triggered the alert, focusing on the `process.name` and `process.executable` fields.
- Verify the legitimacy of the process by checking the process's parent and child processes to understand its context and origin.
- Use Osquery to list all cron jobs on the system and identify any recent changes. Example query: `SELECT * FROM crontab WHERE path LIKE '/private/var/at/tabs/%';`
- Investigate the user account associated with the process to determine if it has a history of creating or modifying cron jobs.
- Check the file modification timestamps in `/private/var/at/tabs/` to correlate with the alert time and identify any unauthorized changes.
- Examine system logs around the time of the alert for any additional suspicious activity or related events.
- Investigate the network activity of the process to identify any external connections that might indicate command and control communication.
- Review the process's binary or script for any signs of tampering or malicious code, especially if it is a non-standard executable for cron modifications.
- Cross-reference the process and file path with threat intelligence sources to identify any known malicious indicators.
- Assess the system for other signs of compromise, such as unauthorized user accounts or unusual system behavior, to determine if the cron modification is part of a larger attack.

### False positive analysis

- System administrators or legitimate software may use scripts or automation tools to manage cron jobs, leading to false positives when these processes modify cron files. 
- Development environments or testing scenarios might involve the use of scripts to automate task scheduling, which could trigger the rule.
- Users can handle these false positives by creating exceptions for known and trusted processes that regularly modify cron files, such as specific automation scripts or administrative tools.
- Regularly review and update the list of exceptions to ensure that only verified and non-threatening processes are excluded from detection.
- Consider the context of the environment, such as development or production, to better assess whether a detected modification is likely to be benign.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Investigate the process that modified the crontab by reviewing process execution details, including the parent process, command-line arguments, and user context.
- Check for other signs of compromise on the system, such as unusual network connections, unexpected user accounts, or additional unauthorized scheduled tasks.
- Remove or disable the suspicious cron job and any other unauthorized persistence mechanisms identified during the investigation.
- Restore the crontab to its original state using backups or by manually recreating legitimate scheduled tasks.
- Escalate the incident to the security operations team if the investigation reveals evidence of a broader compromise or if the threat actor's identity or intent is unclear.
- Implement enhanced logging and monitoring for cron job modifications and process execution to detect similar activities in the future.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities and contextualize alerts with known threat actor behaviors.
- Conduct a post-incident review to identify gaps in security controls and update policies and procedures to prevent recurrence.
- Apply system hardening measures, such as restricting cron job creation to authorized users and processes, and regularly review and audit scheduled tasks for anomalies."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1053"
name = "Scheduled Task/Job"
reference = "https://attack.mitre.org/techniques/T1053/"
[[rule.threat.technique.subtechnique]]
id = "T1053.003"
name = "Cron"
reference = "https://attack.mitre.org/techniques/T1053/003/"



[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

