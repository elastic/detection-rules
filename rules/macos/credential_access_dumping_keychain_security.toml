[metadata]
creation_date = "2021/01/04"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Adversaries may dump the content of the keychain storage data from a system to acquire credentials. Keychains are the
built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi
and website passwords, secure notes, certificates, and Kerberos.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Dumping of Keychain Content via Security Command"
references = ["https://ss64.com/osx/security.html"]
risk_score = 73
rule_id = "565d6ca5-75ba-4c82-9b13-add25353471c"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "macos" and event.type in ("start", "process_started") and process.args : "dump-keychain" and process.args : "-d"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Dumping of Keychain Content via Security Command

Keychains in macOS securely store user credentials, including passwords and certificates. Adversaries exploit this by using commands to extract keychain data, potentially gaining unauthorized access to sensitive information. The detection rule identifies suspicious activity by monitoring for specific command-line arguments associated with keychain dumping, alerting analysts to potential credential theft attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of the "dump-keychain" and "-d" arguments in the process arguments, as these are indicative of keychain dumping attempts.
- Identify the user account associated with the process to determine if the activity aligns with expected behavior or if it is potentially malicious.
- Examine the parent process of the suspicious activity to understand how the keychain dumping command was initiated and if it was part of a larger chain of suspicious events.
- Check the timestamp of the event to correlate with other security events or logs that might provide additional context or indicate a broader attack pattern.
- Investigate the source IP address and geolocation, if available, to assess whether the activity originated from a trusted network or an unusual location.
- Use Osquery to gather more information about the process. For example, run the following query to list all processes with similar command-line arguments: `SELECT pid, name, path, cmdline FROM processes WHERE cmdline LIKE '%dump-keychain%' AND cmdline LIKE '%-d%';`
- Analyze recent login events for the user account to determine if there were any unauthorized access attempts or anomalies around the time of the alert.
- Review system logs for any other unusual activities or errors that occurred around the same time as the keychain dumping attempt.
- Check for any recent changes to user permissions or system configurations that might have facilitated the keychain dumping attempt.
- Consult threat intelligence sources to see if there are any known campaigns or threat actors currently exploiting keychain dumping techniques, which could provide additional context for the investigation.

### False positive analysis

- Routine administrative tasks or legitimate software updates may trigger the rule if they involve accessing or managing keychain data, as these processes might use similar command-line arguments.
- Security or IT personnel conducting authorized audits or system checks might inadvertently match the rule criteria when verifying keychain integrity or performing backups.
- Developers or advanced users using scripts or automation tools to manage their keychain entries for legitimate purposes could also be flagged.
- To manage these false positives, users can create exceptions for known and trusted processes or users by whitelisting specific command invocations or user accounts that regularly perform these actions.
- Implementing a baseline of normal keychain access patterns can help differentiate between legitimate and suspicious activities, allowing for more accurate filtering of alerts.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to confirm the presence of unauthorized keychain access by reviewing system logs and correlating with the detected command-line arguments.
- Identify and terminate any suspicious processes related to the keychain dumping activity to halt ongoing credential theft attempts.
- Change all potentially compromised credentials stored in the keychain, including passwords for Wi-Fi, websites, and any other services.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine the scope of the breach.
- Implement enhanced logging policies to capture detailed command-line activity and process execution on macOS systems for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Restore the system to its operational state by reinstalling the operating system or restoring from a clean backup, ensuring all security patches are applied.
- Conduct a security audit of the affected system and network to identify and remediate any vulnerabilities that may have been exploited.
- Educate users on security best practices, including recognizing phishing attempts and the importance of using strong, unique passwords for different services."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1555"
name = "Credentials from Password Stores"
reference = "https://attack.mitre.org/techniques/T1555/"
[[rule.threat.technique.subtechnique]]
id = "T1555.001"
name = "Keychain"
reference = "https://attack.mitre.org/techniques/T1555/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

