[metadata]
creation_date = "2021/01/25"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the execution of macOS built-in commands used to dump user account hashes. Adversaries may attempt to dump
credentials to obtain account login information in the form of a hash. These hashes can be cracked or leveraged for
lateral movement.
"""
from = "now-9m"
index = ["logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "Dumping Account Hashes via Built-In Commands"
references = [
    "https://apple.stackexchange.com/questions/186893/os-x-10-9-where-are-password-hashes-stored",
    "https://www.unix.com/man-page/osx/8/mkpassdb/",
]
risk_score = 73
rule_id = "02ea4563-ec10-4974-b7de-12e65aa4f9b3"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a macOS System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, for MacOS it is recommended to select "Traditional Endpoints".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/current/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.category:process and host.os.type:macos and event.type:start and
 process.name:(defaults or mkpassdb) and process.args:(ShadowHashData or "-dump")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Dumping Account Hashes via Built-In Commands

On macOS, built-in commands like `defaults` and `mkpassdb` can be exploited by adversaries to extract user account hashes, which are crucial for credential access. These hashes, once obtained, can be cracked or used for unauthorized access and lateral movement within a network. The detection rule identifies suspicious process activities involving these commands and specific arguments, signaling potential credential dumping attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of the `defaults` or `mkpassdb` commands in the process execution logs, focusing on the `process.name` and `process.args` fields.
- Examine the `event.category`, `host.os.type`, and `event.type` fields to ensure the alert is specific to macOS and involves a process start event.
- Check the user account associated with the process execution to determine if it aligns with expected behavior or if it is an unusual account for such activity.
- Investigate the parent process of the suspicious command execution to understand the context and origin of the command.
- Use Osquery to list recent processes executed by the user in question to identify any other suspicious activities. Example query: `SELECT * FROM processes WHERE user = '<suspicious_user>' ORDER BY start_time DESC LIMIT 10;`
- Analyze system logs for any other unusual activities or errors around the time of the alert to gather additional context.
- Verify if there are any recent changes or updates to the system that might explain the use of these commands legitimately.
- Check for any network connections initiated by the system around the time of the alert to identify potential data exfiltration attempts.
- Review historical data to determine if there have been previous instances of similar command executions on the host.
- Correlate the findings with other security tools and logs to identify if this activity is part of a broader attack pattern or isolated incident.

### False positive analysis

- Routine administrative tasks: System administrators may use the `defaults` or `mkpassdb` commands for legitimate purposes, such as managing user settings or performing system maintenance. These activities can trigger the detection rule, leading to false positives.
- Software installations or updates: Certain software installations or updates might invoke these commands as part of their setup or configuration processes, which can be mistaken for malicious activity.
- Automated scripts: Scripts designed for system management or user account maintenance might include these commands, causing alerts even though they are part of regular operations.
- To manage false positives, users can create exceptions for known benign processes or scripts by whitelisting specific command executions that are verified as non-threatening. This can be done by identifying the process IDs or command patterns associated with legitimate activities and excluding them from triggering alerts.

### Response and remediation

- Immediately isolate the affected macOS system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to confirm the presence of unauthorized access by reviewing logs and identifying any suspicious activities related to the `defaults` or `mkpassdb` commands.
- Capture and preserve forensic evidence, including process execution details and any associated files, to support further analysis and potential legal actions.
- Reset passwords for all affected accounts and consider implementing multi-factor authentication to enhance security.
- Review and update security policies to ensure that only authorized personnel have access to sensitive commands and data.
- Implement enhanced logging and monitoring for macOS systems to detect similar activities in the future, focusing on process execution and command-line arguments.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to correlate and analyze potential threats more effectively.
- Escalate the incident to the appropriate internal teams and, if necessary, external cybersecurity experts for further investigation and response.
- Restore the system to its operational state by applying the latest security patches and updates, and ensure that all security configurations are properly set.
- Conduct a post-incident review to identify gaps in the security posture and implement hardening measures, such as disabling unnecessary services and restricting the use of built-in commands."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

