[metadata]
creation_date = "2020/02/18"
maturity = "production"
promotion = true
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Elastic Endgame detected an Exploit. Click the Elastic Endgame icon in the event.module column or the link in the
rule.reference column for additional information.
"""
from = "now-15m"
index = ["endgame-*"]
interval = "10m"
language = "kuery"
license = "Elastic License v2"
max_signals = 10000
name = "Exploit - Detected - Elastic Endgame"
risk_score = 73
rule_id = "2003cdc8-8d83-4aa5-b132-1f9a8eb48514"
setup = """## Setup

This rule is configured to generate more **Max alerts per run** than the default 1000 alerts per run set for all rules. This is to ensure that it captures as many alerts as possible.

**IMPORTANT:** The rule's **Max alerts per run** setting can be superseded by the `xpack.alerting.rules.run.alerts.max` Kibana config setting, which determines the maximum alerts generated by _any_ rule in the Kibana alerting framework. For example, if `xpack.alerting.rules.run.alerts.max` is set to 1000, this rule will still generate no more than 1000 alerts even if its own **Max alerts per run** is set higher.

To make sure this rule can generate as many alerts as it's configured in its own **Max alerts per run** setting, increase the `xpack.alerting.rules.run.alerts.max` system setting accordingly.

**NOTE:** Changing `xpack.alerting.rules.run.alerts.max` is not possible in Serverless projects."""
severity = "high"
tags = [
    "Data Source: Elastic Endgame",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Tactic: Privilege Escalation",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.kind:alert and event.module:endgame and endgame.metadata.type:detection and (event.action:exploit_event or endgame.event_subtype_full:exploit_event)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Exploit - Detected - Elastic Endgame

Elastic Endgame is a security solution designed to detect and prevent exploits by monitoring system activities and identifying suspicious behaviors. Adversaries exploit vulnerabilities to execute unauthorized code, often leading to system compromise. The detection rule identifies alerts from the Endgame module, focusing on exploit-related events, thus enabling timely identification and response to potential threats.

### Possible investigation steps

- Review the alert details in the Elastic Endgame console by clicking the Elastic Endgame icon in the event.module column or the link in the rule.reference column for additional context.
- Examine the event.kind field to confirm that the alert is indeed an 'alert' type, ensuring it is not a false positive or misclassification.
- Check the event.module field to verify that the alert originated from the 'endgame' module, confirming the source of the detection.
- Analyze the endgame.metadata.type field to ensure it is marked as 'detection', indicating that the alert is based on a detection rule rather than a simple log entry.
- Investigate the event.action and endgame.event_subtype_full fields to determine the specific exploit event that triggered the alert, providing insight into the nature of the potential exploit.
- Correlate the alert with other related events in the system to identify any patterns or sequences that may indicate a broader attack or compromise.
- Use Osquery to gather additional system information related to the alert. For example, run the following query to list all running processes and their network connections: `SELECT pid, name, path, address, port FROM processes JOIN process_open_sockets ON processes.pid = process_open_sockets.pid;`
- Check for any recent changes or anomalies in system configurations or user accounts that could be related to the exploit attempt.
- Review historical data and logs to identify any previous similar alerts or activities that might suggest a persistent threat or recurring vulnerability.
- Consult threat intelligence sources to determine if the detected exploit is part of a known campaign or associated with specific threat actors, enhancing the context of the investigation.

### False positive analysis

- Known false positives for the Exploit - Detected - Elastic Endgame rule may include legitimate software updates or patches that mimic exploit-like behavior, triggering alerts. 
- Certain administrative tools or scripts used for system maintenance might also be flagged as exploit events due to their nature of executing code.
- Users can manage these false positives by creating exceptions for specific processes or applications that are known to exhibit such behaviors but are verified as non-threatening.
- Implementing a whitelist of trusted software and regularly updating it can help reduce the occurrence of false positives.
- Monitoring the frequency and context of alerts can assist in identifying patterns that are consistently non-malicious, allowing for more informed decisions on exclusions.
- Collaboration with IT and security teams to review and validate alerts can ensure that only genuine threats are acted upon, minimizing disruptions from false positives.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further exploitation and lateral movement.
- Conduct a thorough investigation to identify the exploited vulnerability and determine the scope of the compromise using forensic tools and logs.
- Apply available patches or updates to remediate the identified vulnerability and prevent re-exploitation.
- Review and analyze the alert details in Elastic Endgame to understand the exploit's behavior and entry point.
- Escalate the incident to the security operations center (SOC) or incident response team if the exploit is part of a larger attack campaign or if sensitive data is at risk.
- Implement enhanced logging and monitoring policies to capture detailed system activities and potential exploit attempts for future investigations.
- Integrate Elastic Endgame with other security tools such as SIEMs and threat intelligence platforms to improve detection and response capabilities.
- Restore the system to its operational state by reinstalling the operating system and applications from trusted sources, ensuring all security patches are applied.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Implement system hardening measures, such as disabling unnecessary services, enforcing strong authentication, and applying least privilege principles, to reduce the attack surface."""


[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1068"
name = "Exploitation for Privilege Escalation"
reference = "https://attack.mitre.org/techniques/T1068/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

