[metadata]
creation_date = "2020/02/18"
maturity = "production"
promotion = true
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Elastic Endgame prevented an Exploit. Click the Elastic Endgame icon in the event.module column or the link in the
rule.reference column for additional information.
"""
from = "now-15m"
index = ["endgame-*"]
interval = "10m"
language = "kuery"
license = "Elastic License v2"
max_signals = 10000
name = "Exploit - Prevented - Elastic Endgame"
risk_score = 47
rule_id = "2863ffeb-bf77-44dd-b7a5-93ef94b72036"
setup = """## Setup

This rule is configured to generate more **Max alerts per run** than the default 1000 alerts per run set for all rules. This is to ensure that it captures as many alerts as possible.

**IMPORTANT:** The rule's **Max alerts per run** setting can be superseded by the `xpack.alerting.rules.run.alerts.max` Kibana config setting, which determines the maximum alerts generated by _any_ rule in the Kibana alerting framework. For example, if `xpack.alerting.rules.run.alerts.max` is set to 1000, this rule will still generate no more than 1000 alerts even if its own **Max alerts per run** is set higher.

To make sure this rule can generate as many alerts as it's configured in its own **Max alerts per run** setting, increase the `xpack.alerting.rules.run.alerts.max` system setting accordingly.

**NOTE:** Changing `xpack.alerting.rules.run.alerts.max` is not possible in Serverless projects."""
severity = "medium"
tags = [
    "Data Source: Elastic Endgame",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Tactic: Privilege Escalation",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.kind:alert and event.module:endgame and endgame.metadata.type:prevention and (event.action:exploit_event or endgame.event_subtype_full:exploit_event)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Exploit - Prevented - Elastic Endgame

Elastic Endgame is a security solution designed to prevent exploits by monitoring and analyzing system behaviors. Adversaries often exploit vulnerabilities to execute unauthorized code, gaining control over systems. The detection rule identifies alerts where Elastic Endgame has preemptively blocked such exploit attempts, focusing on prevention events and specific exploit-related actions, thus safeguarding against potential execution threats.

### Possible investigation steps

- Review the alert details in the security dashboard to understand the context and specifics of the exploit attempt, focusing on the `event.kind`, `event.module`, and `endgame.metadata.type` fields.
- Examine the `event.action` and `endgame.event_subtype_full` fields to determine the nature of the exploit event and identify any patterns or specific exploit techniques used.
- Check the `rule.reference` column for additional documentation or guidance related to the specific exploit attempt to gain further insights.
- Investigate the affected system by identifying the host and user involved in the alert to assess potential exposure and impact.
- Use Osquery to gather more information about the affected system. For example, run the following query to list all running processes and their associated network connections: `SELECT pid, name, path, listening_ports FROM processes JOIN listening_ports USING (pid);`
- Analyze recent system logs and security events on the affected host to identify any unusual activities or anomalies that occurred around the time of the alert.
- Correlate the alert with other security events or alerts in the environment to determine if this is part of a broader attack campaign or isolated incident.
- Review the system's patch and update status to ensure that all known vulnerabilities are addressed, focusing on those related to the exploit attempt.
- Investigate any recent changes or deployments on the affected system that might have introduced vulnerabilities or altered security configurations.
- Consult threat intelligence sources to check for any known exploits or attack patterns that match the characteristics of the alert, which could provide additional context or indicators of compromise.

### False positive analysis

- Known false positives for the Exploit - Prevented - Elastic Endgame rule may include legitimate software behaviors that mimic exploit-like activities, such as certain software updates or debugging tools that modify system processes in a way that resembles exploit attempts.
- Users can manage these false positives by creating exceptions for specific processes or applications that are known to trigger alerts but are verified as non-threatening. This can be done by adding these processes to an allowlist within the Elastic Endgame settings.
- Regularly review and update the list of exceptions to ensure that only verified non-threatening behaviors are excluded, maintaining a balance between security and operational efficiency.
- Consider implementing a monitoring period where alerts are closely observed to distinguish between true threats and benign activities, allowing for more informed decisions on which behaviors to exclude.
- Engage with the security community or Elastic support to stay informed about common false positives and recommended practices for handling them, ensuring that the security posture remains robust while minimizing unnecessary alerts.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further exploitation or lateral movement.
- Conduct a thorough investigation to identify the vulnerability exploited and gather forensic evidence, including logs and memory dumps.
- Verify the alert by cross-referencing with other security tools and logs to confirm the exploit attempt and assess the scope of the incident.
- Apply patches or updates to remediate the identified vulnerability and prevent future exploitation.
- Restore the system from a known good backup if the integrity of the system is compromised.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response coordination.
- Implement enhanced logging policies to capture detailed system and network activity for future investigations.
- Integrate Elastic Endgame with other security solutions, such as SIEM or EDR, to improve detection and response capabilities.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Apply system hardening measures, such as disabling unnecessary services and enforcing least privilege access, to reduce the attack surface."""


[[rule.threat]]
framework = "MITRE ATT&CK"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1068"
name = "Exploitation for Privilege Escalation"
reference = "https://attack.mitre.org/techniques/T1068/"


[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

