[metadata]
creation_date = "2020/02/18"
maturity = "production"
promotion = true
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Elastic Endgame detected an Adversary Behavior. Click the Elastic Endgame icon in the event.module column or the link in
the rule.reference column for additional information.
"""
from = "now-15m"
index = ["endgame-*"]
interval = "10m"
language = "kuery"
license = "Elastic License v2"
max_signals = 10000
name = "Adversary Behavior - Detected - Elastic Endgame"
risk_score = 47
rule_id = "77a3c3df-8ec4-4da4-b758-878f551dee69"
setup = """## Setup

This rule is configured to generate more **Max alerts per run** than the default 1000 alerts per run set for all rules. This is to ensure that it captures as many alerts as possible.

**IMPORTANT:** The rule's **Max alerts per run** setting can be superseded by the `xpack.alerting.rules.run.alerts.max` Kibana config setting, which determines the maximum alerts generated by _any_ rule in the Kibana alerting framework. For example, if `xpack.alerting.rules.run.alerts.max` is set to 1000, this rule will still generate no more than 1000 alerts even if its own **Max alerts per run** is set higher.

To make sure this rule can generate as many alerts as it's configured in its own **Max alerts per run** setting, increase the `xpack.alerting.rules.run.alerts.max` system setting accordingly.

**NOTE:** Changing `xpack.alerting.rules.run.alerts.max` is not possible in Serverless projects."""
severity = "medium"
tags = ["Data Source: Elastic Endgame"]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.kind:alert and event.module:endgame and (event.action:behavior_protection_event or endgame.event_subtype_full:behavior_protection_event)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Adversary Behavior - Detected - Elastic Endgame

Elastic Endgame is a security solution designed to detect and prevent adversarial actions by monitoring system behaviors. Adversaries often exploit system vulnerabilities or misuse legitimate tools to execute malicious activities. This detection rule identifies suspicious behavior by analyzing alerts and specific event actions related to behavior protection, helping security analysts pinpoint potential threats and mitigate risks effectively.

### Possible investigation steps

- Review the alert details in the Elastic Endgame console by clicking the Elastic Endgame icon in the event.module column or the link in the rule.reference column to gather more context about the detected behavior.
- Examine the event.kind field to confirm that the alert is indeed an 'alert' type, ensuring that it requires immediate attention.
- Analyze the event.module field to verify that the alert originated from the 'endgame' module, confirming the source of the detection.
- Investigate the event.action and endgame.event_subtype_full fields to understand the specific behavior protection event that triggered the alert, identifying the nature of the suspicious activity.
- Cross-reference the alert with other recent alerts or logs to identify any patterns or correlations that might indicate a broader attack campaign.
- Use Osquery to gather additional system information related to the alert. For example, run the following query to list all running processes and their network connections: `SELECT pid, name, path, listening_ports FROM processes WHERE on_disk = 1;`
- Check the affected system's recent login history and user activity to identify any unauthorized access attempts or unusual user behavior.
- Review the system's installed software and running services to detect any unauthorized or suspicious applications that might have been used by the adversary.
- Analyze network traffic logs to identify any unusual outbound connections or data exfiltration attempts that might be associated with the detected behavior.
- Consult threat intelligence sources to determine if the detected behavior matches any known adversary tactics, techniques, or procedures, even though the MITRE ATT&CK tactic and technique fields are marked as 'None'.

### False positive analysis

- Known false positives for the Adversary Behavior - Detected - Elastic Endgame rule often arise from legitimate software or administrative tools that exhibit behavior similar to adversarial actions. For example, system administration scripts or automated maintenance tasks may trigger alerts due to their access patterns or execution methods.
- Users can manage these false positives by creating exceptions for specific processes or actions that are known to be safe. This involves identifying the benign behavior patterns that frequently trigger alerts and configuring the security solution to exclude these from future detections.
- It is important to regularly review and update these exceptions to ensure that they do not inadvertently allow new or modified threats to bypass detection. Security teams should document the rationale for each exception and periodically reassess their validity in the context of evolving threat landscapes.
- Collaboration with IT and development teams can help in understanding the normal operational behaviors of systems and applications, which aids in distinguishing between legitimate activities and potential threats.

### Response and remediation

- Isolate the affected system from the network to prevent further spread of potential threats.
- Conduct a thorough investigation of the alert by reviewing related logs and events to understand the scope and impact.
- Identify and terminate any malicious processes or unauthorized access points detected on the system.
- Escalate the incident to the security operations center (SOC) or incident response team if the threat is beyond initial containment capabilities.
- Apply patches and updates to address any exploited vulnerabilities and prevent future exploitation.
- Restore the system from a known good backup to ensure the removal of any persistent threats.
- Implement enhanced logging policies to capture detailed system and network activity for future investigations.
- Integrate additional security tools, such as endpoint detection and response (EDR) solutions, to improve threat visibility and response capabilities.
- Conduct a post-incident review to identify gaps in the current security posture and update incident response plans accordingly.
- Educate users on security best practices and awareness to reduce the risk of similar incidents occurring in the future."""

