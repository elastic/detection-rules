[metadata]
creation_date = "2020/12/21"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Adversaries may modify the standard authentication module for persistence via patching the normal authorization process
or modifying the login configuration to allow unauthorized access or elevate privileges.
"""
false_positives = [
    "Trusted system module updates or allowed Pluggable Authentication Module (PAM) daemon configuration changes.",
]
from = "now-9m"
index = ["auditbeat-*", "logs-endpoint.events.*"]
language = "kuery"
license = "Elastic License v2"
name = "Modification of Standard Authentication Module or Configuration"
references = [
    "https://github.com/zephrax/linux-pam-backdoor",
    "https://github.com/eurialo/pambd",
    "http://0x90909090.blogspot.com/2016/06/creating-backdoor-in-pam-in-5-line-of.html",
    "https://www.trendmicro.com/en_us/research/19/i/skidmap-linux-malware-uses-rootkit-capabilities-to-hide-cryptocurrency-mining-payload.html",
]
risk_score = 47
rule_id = "93f47b6f-5728-4004-ba00-625083b3dcb0"
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: macOS",
    "OS: Linux",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Tactic: Persistence",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
event.category:file and event.type:change and
  (file.name:pam_*.so or file.path:(/etc/pam.d/* or /private/etc/pam.d/* or /usr/lib64/security/*)) and
  process.executable:
    (* and
      not
      (
        /usr/libexec/packagekitd or
        /usr/bin/vim or
        /usr/libexec/xpcproxy or
        /usr/bin/bsdtar or
        /usr/local/bin/brew or
        "/System/Library/PrivateFrameworks/PackageKit.framework/Versions/A/XPCServices/package_script_service.xpc/Contents/MacOS/package_script_service"
      )
    ) and
  not file.path:
         (
           /tmp/snap.rootfs_*/pam_*.so or
           /tmp/newroot/lib/*/pam_*.so or
           /private/var/folders/*/T/com.apple.fileprovider.ArchiveService/TemporaryItems/*/lib/security/pam_*.so or
           /tmp/newroot/usr/lib64/security/pam_*.so
         ) and
  not process.name:
         (
           yum or dnf or rsync or platform-python or authconfig or rpm or pdkg or apk or dnf-automatic or btrfs or
           dpkg or pam-auth-update or steam or platform-python3.6 or pam-config or microdnf or yum_install or yum-cron or
           systemd or containerd or pacman
         )
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Modification of Standard Authentication Module or Configuration

Authentication modules, such as PAM (Pluggable Authentication Modules), are crucial for managing user authentication in systems. Adversaries may exploit these by altering modules or configurations to gain unauthorized access or escalate privileges. The detection rule identifies suspicious changes to authentication files and processes, excluding legitimate system updates, to flag potential security breaches.

### Possible investigation steps

- Review the alert details to identify the specific file and process involved in the modification, focusing on `file.name` and `file.path` fields to determine which authentication module was altered.
- Check the `process.executable` field to identify the process that made the change and verify if it is listed as an excluded legitimate process.
- Investigate the `event.category` and `event.type` fields to confirm the nature of the change and ensure it aligns with unauthorized modifications.
- Use Osquery to list all PAM modules and their current configurations to identify any discrepancies or unauthorized changes. Example query: `SELECT * FROM file WHERE path LIKE '/etc/pam.d/%' OR path LIKE '/usr/lib64/security/%';`
- Cross-reference the timestamp of the alert with system logs to identify any concurrent suspicious activities or user logins that could indicate unauthorized access.
- Examine the system's package management logs (e.g., yum, dnf, apt) to rule out legitimate updates or installations that might have triggered the alert.
- Check for any recent user account changes or additions that could be associated with the modification, using commands like `getent passwd` or `cat /etc/passwd`.
- Investigate the system's cron jobs and startup scripts for any unauthorized entries that could indicate persistence mechanisms.
- Review the system's audit logs for any anomalies or patterns of access that coincide with the time of the modification.
- Conduct a historical search for similar alerts or modifications on the same system or across the network to identify potential patterns or repeated attempts.

### False positive analysis

- System updates and package installations can trigger false positives as they often involve legitimate changes to authentication modules or configurations. Users should monitor and exclude processes related to package management tools like `yum`, `dnf`, `apt`, and `rpm` to reduce noise.
- Administrative tasks such as system configuration changes or maintenance activities performed by authorized personnel may also result in false positives. It's advisable to create exceptions for known administrative processes and users during these periods.
- Automated scripts or tools that manage system configurations, such as configuration management software (e.g., Ansible, Puppet, Chef), can cause false positives. Users should identify and exclude these tools from triggering alerts.
- Temporary files or directories used during legitimate software installations or updates, such as those in `/tmp` or `/private/var/folders`, may be flagged. Excluding these paths from monitoring can help minimize false positives.
- Development or testing environments where frequent changes to authentication modules are expected might generate false positives. Users should consider applying more lenient rules or exclusions in these environments to avoid unnecessary alerts.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify the scope of the modification, including reviewing logs and identifying any unauthorized changes to authentication modules or configurations.
- Verify the integrity of the authentication modules by comparing them against known good versions or using a trusted source to restore them.
- Remove any unauthorized users or credentials that may have been added as a result of the modification.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging and monitoring for authentication-related activities to detect future unauthorized changes promptly.
- Review and update access controls and permissions to ensure that only authorized personnel can modify authentication modules or configurations.
- Apply security patches and updates to the system to address any vulnerabilities that may have been exploited.
- Conduct a post-incident review to identify gaps in security controls and processes, and implement measures to prevent similar incidents in the future.
- Consider deploying additional security measures such as multi-factor authentication (MFA) and intrusion detection systems (IDS) to enhance the overall security posture."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1543"
name = "Create or Modify System Process"
reference = "https://attack.mitre.org/techniques/T1543/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1556"
name = "Modify Authentication Process"
reference = "https://attack.mitre.org/techniques/T1556/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

[rule.new_terms]
field = "new_terms_fields"
value = ["host.id", "process.executable", "file.path"]
[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-7d"


