[metadata]
creation_date = "2020/12/21"
integration = ["endpoint", "windows"]
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."
min_stack_version = "8.14.0"
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the execution of a Chromium based browser with the debugging process argument, which may indicate an attempt
to steal authentication cookies. An adversary may steal web application or service session cookies and use them to gain
access web applications or Internet services as an authenticated user without needing credentials.
"""
false_positives = ["Developers performing browsers plugin or extension debugging."]
from = "now-9m"
index = ["auditbeat-*", "winlogbeat-*", "logs-endpoint.events.*", "logs-windows.*"]
language = "eql"
license = "Elastic License v2"
max_signals = 33
name = "Potential Cookies Theft via Browser Debugging"
references = [
    "https://github.com/defaultnamehere/cookie_crimes",
    "https://embracethered.com/blog/posts/2020/cookie-crimes-on-mirosoft-edge/",
    "https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/post/multi/gather/chrome_cookies.md",
    "https://posts.specterops.io/hands-in-the-cookie-jar-dumping-cookies-with-chromiums-remote-debugger-port-34c4f468844e",
]
risk_score = 47
rule_id = "027ff9ea-85e7-42e3-99d2-bbb7069e02eb"
setup = """## Setup

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,
events will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.
Hence for this rule to work effectively, users will need to add a custom ingest pipeline to populate
`event.ingested` to @timestamp.
For more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "OS: Windows",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where event.type in ("start", "process_started", "info") and
  process.name in (
             "Microsoft Edge",
             "chrome.exe",
             "Google Chrome",
             "google-chrome-stable",
             "google-chrome-beta",
             "google-chrome",
             "msedge.exe") and
   process.args : ("--remote-debugging-port=*",
                   "--remote-debugging-targets=*",
                   "--remote-debugging-pipe=*") and
   process.args : "--user-data-dir=*" and not process.args:"--remote-debugging-port=0"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Cookies Theft via Browser Debugging

Chromium-based browsers support debugging features that allow developers to inspect and modify web applications. Adversaries can exploit these features to access session cookies, enabling unauthorized access to web services. The detection rule identifies suspicious browser processes using debugging arguments, which may indicate attempts to hijack cookies, by monitoring specific process names and arguments indicative of debugging activities.

### Possible investigation steps

- Review the alert details to confirm the presence of suspicious process arguments, specifically checking for `--remote-debugging-port=*`, `--remote-debugging-targets=*`, and `--remote-debugging-pipe=*` in conjunction with `--user-data-dir=*`.
- Verify the process name involved in the alert to ensure it matches one of the targeted Chromium-based browsers such as "chrome.exe", "Google Chrome", "msedge.exe", or "Microsoft Edge".
- Check the process start time and correlate it with user activity logs to determine if the browser was launched during normal working hours or if it coincides with unusual activity.
- Investigate the user account associated with the process to determine if the account has a history of legitimate debugging activities or if it is potentially compromised.
- Use Osquery to gather additional context about the process by running a query like: `SELECT pid, name, path, cmdline FROM processes WHERE name IN ('chrome.exe', 'msedge.exe') AND cmdline LIKE '%--remote-debugging-port=%';` to identify the full command line and path of the suspicious process.
- Examine network logs to identify any unusual outbound connections from the host that may indicate data exfiltration or communication with a command and control server.
- Review browser history and cache files for any evidence of unauthorized access to sensitive web applications or services.
- Check for any recent changes to browser extensions or plugins that could have been used to facilitate cookie theft.
- Analyze system logs for any other suspicious activities or anomalies around the time the alert was triggered, such as unexpected file modifications or new user accounts.
- Consult with the user or system owner to verify if they were conducting legitimate debugging activities and gather any additional context that may explain the alert.

### False positive analysis

- Developers and IT professionals often use debugging features in Chromium-based browsers for legitimate purposes, such as testing and troubleshooting web applications, which can trigger this detection rule.
- Automated testing frameworks and tools that rely on browser automation may use debugging arguments to control browser instances, leading to false positives.
- Users can manage these false positives by creating exceptions for known and trusted processes or users who regularly engage in legitimate debugging activities.
- Implementing a whitelist of IP addresses or user accounts associated with development and testing environments can help reduce false positives.
- Regularly review and update the list of exceptions to ensure that only authorized debugging activities are excluded from detection.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access.
- Investigate the process logs to confirm the presence of suspicious debugging arguments and identify any unauthorized access to session cookies.
- Terminate any suspicious browser processes that are running with debugging arguments to stop potential cookie theft.
- Change passwords and invalidate session tokens for any accounts that may have been compromised to prevent unauthorized access.
- Escalate the incident to the security operations team for further analysis and to determine the scope of the breach.
- Implement enhanced logging policies to capture detailed process execution data, including command-line arguments and network connections.
- Integrate security tools with SIEM systems to automate the detection of suspicious debugging activities and alert security teams in real-time.
- Restore the system to its operational state by applying security patches, updating software, and ensuring all security configurations are correctly set.
- Conduct a security review to identify and address any vulnerabilities that allowed the attack, such as weak browser configurations or insufficient monitoring.
- Educate users on the risks of session hijacking and the importance of secure browsing practices to reduce the likelihood of future incidents."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1539"
name = "Steal Web Session Cookie"
reference = "https://attack.mitre.org/techniques/T1539/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

