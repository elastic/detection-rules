[metadata]
creation_date = "2022/10/18"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This rules identifies a process created from an executable with a space appended to the end of the filename. This may
indicate an attempt to masquerade a malicious file as benign to gain user execution. When a space is added to the end of
certain files, the OS will execute the file according to it's true filetype instead of it's extension. Adversaries can
hide a program's true filetype by changing the extension of the file. They can then add a space to the end of the name
so that the OS automatically executes the file when it's double-clicked.
"""
from = "now-9m"
index = ["auditbeat-*", "logs-endpoint.events.*"]
language = "eql"
license = "Elastic License v2"
name = "Masquerading Space After Filename"
references = [
    "https://www.picussecurity.com/resource/blog/picus-10-critical-mitre-attck-techniques-t1036-masquerading",
]
risk_score = 47
rule_id = "f5fb4598-4f10-11ed-bdc3-0242ac120002"
setup = """## Setup

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,
events will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.
Hence for this rule to work effectively, users will need to add a custom ingest pipeline to populate
`event.ingested` to @timestamp.
For more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Linux",
    "OS: macOS",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"
query = '''
process where host.os.type:("linux","macos") and event.type == "start" and
process.executable regex~ """/[a-z0-9\s_\-\\./]+\s""" and not (
  process.name in ("ls", "find", "grep", "xkbcomp") or
  process.executable like ("/opt/nessus_agent/*", "/opt/gitlab/sv/gitlab-exporter/*", "/tmp/ansible-admin/*") or
  process.parent.args in (
    "./check_rubrik", "/usr/bin/check_mk_agent", "/etc/rubrik/start_stop_bootstrap.sh", "/etc/rubrik/start_stop_agent.sh"
  )
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Masquerading Space After Filename

In Linux and macOS environments, appending a space to a filename can trick the OS into executing a file based on its true type rather than its extension. Adversaries exploit this by disguising malicious files with benign extensions, adding a space to ensure execution. The detection rule identifies such anomalies by monitoring process creation events, filtering out known benign processes, and flagging suspicious executable patterns.

### Possible investigation steps

- Review the alert details to identify the specific process executable path that triggered the rule, focusing on the presence of a space at the end of the filename.
- Verify the legitimacy of the process by checking the process name and executable path against known benign processes and paths listed in the query's exceptions.
- Use Osquery to gather additional context about the process by running a query such as: `SELECT pid, name, path, cmdline, cwd, uid, gid, start_time FROM processes WHERE path LIKE '% ' AND path = '<triggered_executable_path>';` to retrieve detailed information about the suspicious process.
- Investigate the parent process of the suspicious executable to understand the process hierarchy and determine if the parent process is known or expected.
- Check the file metadata of the suspicious executable, including creation and modification times, to identify any anomalies or recent changes that could indicate tampering.
- Examine the file type of the executable using the `file` command to confirm if the actual file type matches the expected type based on the file extension.
- Search for any network connections or communications initiated by the suspicious process to identify potential command and control activity or data exfiltration.
- Review system logs and other security tools for any additional indicators of compromise or related suspicious activity around the time the process was executed.
- Investigate the user account associated with the process execution to determine if the account has been compromised or is exhibiting unusual behavior.
- Correlate the findings with threat intelligence sources to check for known indicators of compromise or patterns associated with the detected behavior.

### False positive analysis

- Known false positives for the Masquerading Space After Filename rule include legitimate processes that may have a space appended to their filenames due to user error or specific application behavior. These can include scripts or executables that are mistakenly renamed with a trailing space.
- Users can manage these false positives by creating exceptions for known benign processes. This can be done by adding specific process names or executable paths to the exclusion list within the detection rule.
- For instance, if a legitimate script in a custom directory frequently triggers the rule, users can modify the rule to exclude that specific path or process name.
- It's important to regularly review and update the exclusion list to ensure that new legitimate processes are not mistakenly flagged, while still maintaining the integrity of the detection for potential threats.
- Users should also consider the context of the flagged process, such as its parent process and command-line arguments, to determine if it aligns with expected behavior or if it warrants further investigation.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further spread of the potential threat.
- Conduct a thorough investigation to identify the source and scope of the masquerading file, examining logs and process creation events.
- Terminate any suspicious processes identified as being executed with a space after the filename to halt any ongoing malicious activity.
- Remove or quarantine the identified malicious files from the system to prevent re-execution.
- Review and update endpoint protection and antivirus signatures to detect similar threats in the future.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging policies to capture detailed process creation events and file modifications for future investigations.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to improve detection capabilities for similar masquerading techniques.
- Restore the system from a known good backup to ensure the integrity and security of the operating environment.
- Apply system hardening measures, such as restricting file execution permissions and educating users on recognizing suspicious file behaviors, to reduce the risk of future attacks."""

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1036"
name = "Masquerading"
reference = "https://attack.mitre.org/techniques/T1036/"

[[rule.threat.technique.subtechnique]]
id = "T1036.006"
name = "Space after Filename"
reference = "https://attack.mitre.org/techniques/T1036/006/"

[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
