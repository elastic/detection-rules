[metadata]
creation_date = "2022/09/03"
integration = ["endpoint", "auditd_manager"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the use of the AWS Systems Manager (SSM) `SendCommand` API with the either `AWS-RunShellScript` or
`AWS-RunPowerShellScript` parameters. The `SendCommand` API call allows users to execute commands on EC2 instances using
the SSM service. Adversaries may use this technique to execute commands on EC2 instances without the need for SSH or RDP
access. This behavior may indicate an adversary attempting to execute commands on an EC2 instance for malicious
purposes. This is a [New Terms](https://www.elastic.co/guide/en/security/current/rules-ui-create.html#create-new-terms-rule) rule that only flags
when this behavior is observed for the first time on a host in the last 7 days.
"""
false_positives = [
    """
    Legitimate use of the `SendCommand` API call to execute commands on EC2 instances using the SSM service may be done
    by system administrators or DevOps engineers for legitimate purposes.
    """,
]
from = "now-9m"
index = ["logs-endpoint.events.*", "endgame-*", "auditbeat-*", "logs-auditd_manager.auditd-*"]
language = "kuery"
license = "Elastic License v2"
name = "AWS SSM `SendCommand` with Run Shell Command Parameters"
references = [
    "https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-privilege-escalation/aws-ssm-privesc",
    "https://securitycafe.ro/2023/01/17/aws-post-explitation-with-ssm-sendcommand/",
]
risk_score = 47
rule_id = "c371e9fc-6a10-11ef-a0ac-f661ea17fbcc"
setup = """## Setup

This rule requires data coming in from Elastic Defend.

### Elastic Defend Integration Setup
Elastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.

#### Prerequisite Requirements:
- Fleet is required for Elastic Defend.
- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).

#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:
- Go to the Kibana home page and click "Add integrations".
- In the query bar, search for "Elastic Defend" and select the integration to see more details about it.
- Click "Add Elastic Defend".
- Configure the integration name and optionally add a description.
- Select the type of environment you want to protect, either "Traditional Endpoints" or "Cloud Workloads".
- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).
- We suggest selecting "Complete EDR (Endpoint Detection and Response)" as a configuration setting, that provides "All events; all preventions"
- Enter a name for the agent policy in "New agent policy name". If other agent policies already exist, you can click the "Existing hosts" tab and select an existing policy instead.
For more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).
- Click "Save and Continue".
- To complete the integration, select "Add Elastic Agent to your hosts" and continue to the next section to install the Elastic Agent on your hosts.
For more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "Domain: Cloud",
    "OS: Linux",
    "OS: macOS",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
    "Data Source: Elastic Endgame",
    "Data Source: Auditd Manager"
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
event.category: "process" and event.type: "start" and process.name: "aws"
and (
    host.os.type: ("windows" or "macos")
    or (
        host.os.type: "linux"
        and event.action: ("exec" or "exec_event" or "executed" or "process_started")
    )
)
and process.args: (
    "send-command" and "--parameters" and commands=*
    and ("AWS-RunShellScript" or "AWS-RunPowerShellScript")
)
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating AWS SSM `SendCommand` with Run Shell Command Parameters

AWS Systems Manager (SSM) `SendCommand` allows remote command execution on EC2 instances, bypassing traditional access methods like SSH. Adversaries exploit this to execute unauthorized commands, potentially leading to data breaches or system compromise. The detection rule identifies unusual `SendCommand` usage, flagging first-time occurrences of shell script execution on hosts, which may indicate malicious activity.

### Possible investigation steps

- Review the alert details to identify the specific EC2 instance and the time when the `SendCommand` was executed. Pay attention to the `process.args` field to understand the exact command and parameters used.
- Verify the identity of the user or role that initiated the `SendCommand` by examining the AWS CloudTrail logs. Look for the `userIdentity` field to determine if the action was performed by an expected user or service.
- Check the AWS CloudTrail logs for any other unusual activities around the same time, such as changes in IAM policies or unusual API calls, which might indicate a broader attack.
- Investigate the EC2 instance's recent activity by reviewing its system logs. Look for any unexpected processes or network connections that could suggest malicious behavior.
- Use Osquery to gather more information about the processes running on the affected EC2 instance. For example, run the following query to list all processes that have been started recently:
  ```sql
  SELECT pid, name, path, cmdline, start_time FROM processes WHERE start_time > (SELECT datetime('now', '-1 hour'));
  ```
- Examine the `host.os.type` field to determine the operating system of the affected instance and tailor your investigation steps accordingly, such as checking for specific OS-related logs or configurations.
- Analyze the `event.category` and `event.type` fields to confirm that the event is indeed a process start event, ensuring that the alert is not a false positive.
- Cross-reference the `process.name` field with known legitimate AWS CLI usage patterns within your organization to determine if the command execution is expected or anomalous.
- Investigate any other alerts or incidents involving the same EC2 instance or AWS account to identify potential patterns or correlations with other suspicious activities.
- Consult with the instance owner or relevant stakeholders to verify if the `SendCommand` execution was authorized and part of a legitimate operation, or if it requires further investigation.

### False positive analysis

- Routine administrative tasks: Organizations often use AWS SSM `SendCommand` with `AWS-RunShellScript` or `AWS-RunPowerShellScript` for legitimate administrative purposes, such as patch management or software installation. These activities can trigger the rule as false positives.
- Automated scripts: Scheduled or automated scripts that perform regular maintenance or monitoring tasks on EC2 instances may also use these parameters, leading to false positives.
- DevOps processes: Continuous integration and deployment pipelines might leverage AWS SSM `SendCommand` for deploying applications or configurations, which can be mistakenly flagged as suspicious.
- To manage these false positives, users can create exceptions for known, non-threatening behaviors by identifying and excluding specific hosts or processes that regularly use these commands for legitimate purposes.
- Implementing a baseline of normal activity for each host can help distinguish between expected and anomalous command executions, reducing the likelihood of false positives.
- Regularly review and update the list of exceptions to ensure that only verified and safe activities are excluded from detection.

### Response and remediation

- Immediately isolate the affected EC2 instance from the network to prevent further unauthorized access or data exfiltration.
- Review AWS CloudTrail logs to identify the source of the `SendCommand` API call and determine if it was authorized or if credentials were compromised.
- Verify the integrity of the affected instance by checking for unauthorized changes or installed software, focusing on the execution of shell scripts.
- Revoke any compromised AWS IAM credentials and rotate keys to prevent further unauthorized access.
- Conduct a thorough investigation to determine the scope of the incident, including identifying other potentially affected instances or services.
- Escalate the incident to the security operations team for further analysis and to determine if additional resources are needed.
- Implement enhanced logging and monitoring for AWS SSM and related services to detect similar activities in the future.
- Restore the affected EC2 instance from a known good backup or AMI to ensure it is free from malicious modifications.
- Apply security hardening measures, such as restricting SSM command execution permissions to only trusted users and roles.
- Update security policies and provide training to relevant personnel to prevent similar incidents, leveraging MITRE ATT&CK framework insights on cloud administration command threats."""

[rule.investigation_fields]
field_names = [
    "@timestamp",
    "process.user.name",
    "process.entry_leader.group.name",
    "process.entry_leader.real_user.name",
    "event.action",
    "event.type",
    "host.os.type",
    "host.os.kernel",
    "process.entry_leader.executable",
    "process.entry_leader.working_directory",
    "process.parent.executable",
    "process.executable",
    "process.hash.sha256",
    "process.parent.command_line",
    "process.command_line",
    "process.args"
]

[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1651"
name = "Cloud Administration Command"
reference = "https://attack.mitre.org/techniques/T1651/"


[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

[rule.new_terms]
field = "new_terms_fields"
value = ["host.id"]
[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-7d"


