[metadata]
creation_date = "2021/10/07"
integration = ["windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
Identifies suspicious access to LSASS handle from a call trace pointing to DBGHelp.dll or DBGCore.dll, which both export
the MiniDumpWriteDump method that can be used to dump LSASS memory content in preparation for credential access.
"""
from = "now-9m"
index = ["winlogbeat-*", "logs-windows.sysmon_operational-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Credential Access via LSASS Memory Dump"
references = [
    "https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dump-credentials-from-lsass-process-without-mimikatz",
    "https://www.elastic.co/security-labs/detect-credential-access",
    "https://www.elastic.co/security-labs/elastic-protects-against-data-wiper-malware-targeting-ukraine-hermeticwiper",
]
risk_score = 73
rule_id = "9960432d-9b26-409f-972b-839a959e79e2"
setup = """## Setup

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,
events will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.
Hence for this rule to work effectively, users will need to add a custom ingest pipeline to populate
`event.ingested` to @timestamp.
For more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Tactic:Execution",
    "Data Source: Sysmon",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "windows" and event.code == "10" and
  winlog.event_data.TargetImage : "?:\\WINDOWS\\system32\\lsass.exe" and

   /* DLLs exporting MiniDumpWriteDump API to create an lsass mdmp*/
  winlog.event_data.CallTrace : ("*dbghelp*", "*dbgcore*") and

   /* case of lsass crashing */
  not process.executable : (
        "?:\\Windows\\System32\\WerFault.exe",
        "?:\\Windows\\SysWOW64\\WerFault.exe",
        "?:\\Windows\\System32\\WerFaultSecure.exe"
      )
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Credential Access via LSASS Memory Dump

LSASS (Local Security Authority Subsystem Service) is crucial for managing Windows security policies and handling user logins. Adversaries exploit this by using tools that leverage the MiniDumpWriteDump API, often exported by libraries like DBGHelp.dll, to extract sensitive credentials from LSASS memory. The detection rule identifies suspicious access patterns to LSASS, excluding legitimate crash handlers, to flag potential credential dumping attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of suspicious access to the LSASS handle, focusing on the `winlog.event_data.TargetImage` field to ensure it points to "?:\\\\WINDOWS\\\\system32\\\\lsass.exe".
- Examine the `winlog.event_data.CallTrace` field to verify if the call trace includes references to "dbghelp" or "dbgcore", indicating potential use of the MiniDumpWriteDump API.
- Check the process that triggered the alert by analyzing the `process.executable` field to ensure it is not a legitimate crash handler like WerFault.exe or WerFaultSecure.exe.
- Investigate the parent process of the suspicious activity to determine if it is a known legitimate process or potentially malicious.
- Use Osquery to list all processes with open handles to LSASS by running: `SELECT pid, name, path FROM processes WHERE path LIKE '%lsass.exe%';` to identify any unexpected processes.
- Correlate the timestamp of the alert with other security events on the host to identify any concurrent suspicious activities or anomalies.
- Review recent user logins and account activities on the affected host to detect any unauthorized access attempts.
- Analyze network connections from the host around the time of the alert to identify any unusual outbound connections that could indicate data exfiltration.
- Check for any recent changes or installations of software on the host that could have introduced the suspicious behavior.
- Consult threat intelligence sources to determine if the identified behavior matches any known attack patterns or tools used by adversaries.

### False positive analysis

- Legitimate software debugging tools may trigger this rule if they access LSASS memory for troubleshooting purposes, as they might use the MiniDumpWriteDump API. Users should verify if the process is part of a known debugging or monitoring tool.
- System crash handlers, other than those explicitly excluded, might access LSASS memory during a crash event. Users can add additional known crash handler executables to the exclusion list to prevent false positives.
- Security software or endpoint protection solutions may access LSASS memory as part of their normal operations. Users should confirm with their security vendor and consider excluding these processes if they are verified as safe.
- Custom in-house applications that perform memory dumps for diagnostic purposes could also be flagged. Users should ensure these applications are documented and add them to the exclusion list if necessary.
- To manage false positives, users can create exceptions by adding specific process executables or paths to the exclusion list, ensuring these are thoroughly vetted to avoid overlooking genuine threats.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further credential access and lateral movement by the adversary.
- Conduct a thorough investigation to confirm the presence of unauthorized LSASS memory access, reviewing logs and call traces for DBGHelp.dll or DBGCore.dll usage.
- Capture a memory dump of the affected system for forensic analysis to identify any malicious processes or tools used for credential dumping.
- If unauthorized access is confirmed, reset passwords for all accounts that may have been compromised, prioritizing high-privilege accounts.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine the scope of the breach.
- Implement enhanced logging policies to capture detailed process creation and DLL loading events, ensuring visibility into future suspicious activities.
- Integrate endpoint detection and response (EDR) solutions to monitor and alert on suspicious access patterns to critical system processes like LSASS.
- Restore the system to its operational state by applying the latest security patches and updates, and ensure that all security configurations are hardened.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Educate users and administrators on the risks of credential dumping and the importance of maintaining strong, unique passwords and enabling multi-factor authentication (MFA)."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.001"
name = "LSASS Memory"
reference = "https://attack.mitre.org/techniques/T1003/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1106"
name = "Native API"
reference = "https://attack.mitre.org/techniques/T1106/"


[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

