[metadata]
creation_date = "2021/11/27"
integration = ["windows", "system"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
Identifies the creation of an LSASS process clone via PssCaptureSnapShot where the parent process is the initial LSASS
process instance. This may indicate an attempt to evade detection and dump LSASS memory for credential access.
"""
from = "now-9m"
index = ["winlogbeat-*", "logs-system.*", "logs-windows.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential LSASS Clone Creation via PssCaptureSnapShot"
references = [
    "https://www.matteomalvica.com/blog/2019/12/02/win-defender-atp-cred-bypass/",
    "https://medium.com/@Achilles8284/the-birth-of-a-process-part-2-97c6fb9c42a2",
]
risk_score = 73
rule_id = "a16612dd-b30e-4d41-86a0-ebe70974ec00"
setup = """## Setup

This is meant to run only on datasources using Windows security event 4688 that captures the process clone creation.

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,
events will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.
Hence for this rule to work effectively, users will need to add a custom ingest pipeline to populate
`event.ingested` to @timestamp.
For more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Sysmon",
    "Data Source: System",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "windows" and event.code:"4688" and
  process.executable : "?:\\Windows\\System32\\lsass.exe" and
  process.parent.executable : "?:\\Windows\\System32\\lsass.exe"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential LSASS Clone Creation via PssCaptureSnapShot

PssCaptureSnapShot is a Windows API used for creating snapshots of processes, often for debugging or analysis. Adversaries exploit this to clone the LSASS process, aiming to extract credentials without triggering alarms. The detection rule identifies suspicious LSASS clones by monitoring process creation events where both the process and its parent are LSASS, signaling potential credential dumping attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of a process creation event with event code 4688, where both the process and its parent are `lsass.exe`.
- Verify the timestamp of the event to determine when the suspicious LSASS clone was created and correlate it with other security events around the same time.
- Check the user account context under which the LSASS clone process was created to identify any unusual or unauthorized access.
- Investigate the command line arguments used during the process creation to identify any anomalies or suspicious parameters.
- Use Osquery to list all running processes and their parent processes to confirm the presence of any LSASS clones. Example query: `SELECT pid, name, path, parent FROM processes WHERE name = 'lsass.exe';`
- Examine the network connections and open ports on the host to identify any unusual outbound connections that might indicate data exfiltration.
- Review recent login events and account activity on the host to identify any unauthorized access attempts or anomalies.
- Analyze the host for any recent changes to system files or configurations that could indicate tampering or preparation for credential dumping.
- Check for any other security alerts or logs related to the host or user account to identify potential patterns or repeated attempts.
- Consult threat intelligence sources to determine if there are any known campaigns or tools that match the observed behavior, providing additional context for the investigation.

### False positive analysis

- Legitimate software or security tools that perform memory analysis or debugging might trigger this rule by creating LSASS process snapshots for non-malicious purposes.
- System administrators or security teams using authorized tools for system diagnostics or forensic investigations may inadvertently cause LSASS clones, leading to false positives.
- Exclude known and trusted applications or tools that are verified to perform legitimate LSASS process interactions by adding them to an exception list in the monitoring system.
- Regularly update the exception list to include new versions or updates of trusted software that interact with LSASS to prevent unnecessary alerts.
- Collaborate with IT and security teams to identify and document routine maintenance or diagnostic activities that could mimic suspicious behavior, ensuring these are accounted for in the monitoring setup.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further credential access and lateral movement.
- Conduct a thorough investigation to confirm the presence of unauthorized LSASS process clones using forensic tools and logs.
- Terminate any suspicious LSASS clone processes identified during the investigation to halt potential credential dumping.
- Review and analyze security logs, including Windows Event Logs and security information and event management (SIEM) data, to trace the source and scope of the attack.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if other systems are affected.
- Implement enhanced logging policies to capture detailed process creation events and monitor for similar suspicious activities in the future.
- Integrate endpoint detection and response (EDR) solutions to provide real-time monitoring and automated response capabilities.
- Restore the affected system from a known good backup to ensure no residual malicious activity remains.
- Apply security patches and updates to the operating system and applications to mitigate vulnerabilities that could be exploited for credential dumping.
- Strengthen system hardening measures by enforcing least privilege access, enabling Credential Guard, and regularly reviewing user permissions and access controls."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.001"
name = "LSASS Memory"
reference = "https://attack.mitre.org/techniques/T1003/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

