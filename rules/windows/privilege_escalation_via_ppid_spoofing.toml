[metadata]
creation_date = "2022/10/20"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies parent process spoofing used to create an elevated child process. Adversaries may spoof the parent process
identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges.
"""
from = "now-9m"
index = ["logs-endpoint.events.process-*"]
language = "eql"
license = "Elastic License v2"
name = "Privileges Elevation via Parent Process PID Spoofing"
references = [
    "https://gist.github.com/xpn/a057a26ec81e736518ee50848b9c2cd6",
    "https://blog.didierstevens.com/2017/03/20/",
    "https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-updateprocthreadattribute",
    "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1134.002/T1134.002.md",
]
risk_score = 73
rule_id = "26b01043-4f04-4d2f-882a-5a1d2e95751b"
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
/* This rule is compatible with Elastic Endpoint only */

process where host.os.type == "windows" and event.action == "start" and

 /* process creation via seclogon */
 process.parent.Ext.real.pid > 0 and

 /* PrivEsc to SYSTEM */
 user.id : "S-1-5-18"  and

 /* Common FPs - evasion via hollowing is possible, should be covered by code injection */
 not process.executable : ("?:\\Windows\\System32\\WerFault.exe",
                           "?:\\Windows\\SysWOW64\\WerFault.exe",
                           "?:\\Windows\\System32\\WerFaultSecure.exe",
                           "?:\\Windows\\SysWOW64\\WerFaultSecure.exe",
                           "?:\\Windows\\System32\\Wermgr.exe",
                           "?:\\Windows\\SysWOW64\\Wermgr.exe",
                           "?:\\Windows\\SoftwareDistribution\\Download\\Install\\securityhealthsetup.exe") and
 /* Logon Utilities */
 not (process.parent.executable : "?:\\Windows\\System32\\Utilman.exe" and
     process.executable : ("?:\\Windows\\System32\\osk.exe",
                           "?:\\Windows\\System32\\Narrator.exe",
                           "?:\\Windows\\System32\\Magnify.exe")) and

 not process.parent.executable : "?:\\Windows\\System32\\AtBroker.exe" and

 not (process.code_signature.subject_name in
           ("philandro Software GmbH", "Freedom Scientific Inc.", "TeamViewer Germany GmbH", "Projector.is, Inc.",
            "TeamViewer GmbH", "Cisco WebEx LLC", "Dell Inc") and process.code_signature.trusted == true) and 

 /* AM_Delta_Patch Windows Update */
 not (process.executable : ("?:\\Windows\\System32\\MpSigStub.exe", "?:\\Windows\\SysWOW64\\MpSigStub.exe") and
      process.parent.executable : ("?:\\Windows\\System32\\wuauclt.exe", 
                                   "?:\\Windows\\SysWOW64\\wuauclt.exe", 
                                   "?:\\Windows\\UUS\\Packages\\Preview\\*\\wuaucltcore.exe", 
                                   "?:\\Windows\\UUS\\amd64\\wuauclt.exe", 
                                   "?:\\Windows\\UUS\\amd64\\wuaucltcore.exe", 
                                   "?:\\ProgramData\\Microsoft\\Windows\\UUS\\*\\wuaucltcore.exe")) and
 not (process.executable : ("?:\\Windows\\System32\\MpSigStub.exe", "?:\\Windows\\SysWOW64\\MpSigStub.exe") and process.parent.executable == null) and

 /* Other third party SW */
 not process.parent.executable :
                   ("?:\\Program Files (x86)\\HEAT Software\\HEAT Remote\\HEATRemoteServer.exe",
                    "?:\\Program Files (x86)\\VisualCron\\VisualCronService.exe",
                    "?:\\Program Files\\BinaryDefense\\Vision\\Agent\\bds-vision-agent-app.exe",
                    "?:\\Program Files\\Tablet\\Wacom\\WacomHost.exe",
                    "?:\\Program Files (x86)\\LogMeIn\\x64\\LogMeIn.exe",
                    "?:\\Program Files (x86)\\EMC Captiva\\Captiva Cloud Runtime\\Emc.Captiva.WebCaptureRunner.exe",
                    "?:\\Program Files\\Freedom Scientific\\*.exe",
                    "?:\\Program Files (x86)\\Google\\Chrome Remote Desktop\\*\\remoting_host.exe",
                    "?:\\Program Files (x86)\\GoToAssist Remote Support Customer\\*\\g2ax_comm_customer.exe") and
 not (
    process.code_signature.trusted == true and process.code_signature.subject_name == "Netwrix Corporation" and
    process.name : "adcrcpy.exe" and process.parent.executable : (
      "?:\\Program Files (x86)\\Netwrix Auditor\\Active Directory Auditing\\Netwrix.ADA.EventCollector.exe",
      "?:\\Program Files (x86)\\Netwrix Auditor\\Active Directory Auditing\\Netwrix.ADA.Analyzer.exe",
      "?:\\Netwrix Auditor\\Active Directory Auditing\\Netwrix.ADA.EventCollector.exe"
    )
 )
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Privileges Elevation via Parent Process PID Spoofing

Parent Process ID (PPID) spoofing is a technique where attackers manipulate the PPID of a process to disguise its origin, often to gain elevated privileges or evade detection. By altering the PPID, adversaries can make malicious processes appear as if they were spawned by legitimate, trusted processes. The detection rule identifies such spoofing by monitoring process creation events, specifically looking for anomalies in parent-child process relationships and excluding known legitimate processes and signatures to reduce false positives. This helps in identifying unauthorized privilege escalation attempts.

### Possible investigation steps

- Review the alert details to understand which process triggered the rule, focusing on the `process.name`, `process.executable`, and `process.parent.executable` fields to identify the suspicious process and its parent.
- Check the `process.parent.Ext.real.pid` field to verify if the parent process ID has been spoofed and assess the legitimacy of the parent process.
- Investigate the `user.id` field to determine if the process is attempting to escalate privileges to SYSTEM, which could indicate malicious intent.
- Examine the `process.code_signature.subject_name` and `process.code_signature.trusted` fields to verify the authenticity of the process's digital signature and identify any discrepancies.
- Cross-reference the `process.executable` and `process.parent.executable` paths against known legitimate software paths to rule out false positives.
- Utilize Osquery to gather additional context about the suspicious process. For example, run the following query to list all processes with their parent process IDs and user IDs:
  ```sql
  SELECT pid, name, path, parent, uid FROM processes WHERE pid = <suspicious_process_pid>;
  ```
- Analyze historical process creation events to identify any patterns or anomalies in parent-child relationships that could suggest further spoofing attempts.
- Investigate any network connections initiated by the suspicious process using network monitoring tools to identify potential command and control communication.
- Review system logs for any other unusual activities or errors around the time the alert was triggered, which might provide additional context or evidence of compromise.
- Consult threat intelligence sources to determine if the process or its parent is associated with known malware or attack campaigns, providing further insight into the potential threat.

### False positive analysis

- The rule may trigger false positives when legitimate processes are involved in activities that resemble PPID spoofing, such as software updates or system utilities that spawn processes with elevated privileges. 
- Common false positives include processes related to Windows Error Reporting (WerFault.exe, Wermgr.exe) and Windows Update (MpSigStub.exe, wuauclt.exe) which are known to exhibit behavior similar to PPID spoofing during normal operations.
- Third-party software like remote support tools (TeamViewer, LogMeIn) and accessibility utilities (Utilman.exe spawning osk.exe, Narrator.exe, Magnify.exe) can also generate false positives due to their legitimate use of elevated privileges.
- To manage these false positives, users can create exceptions by excluding specific process paths or code signatures from the detection rule. This involves adding known legitimate processes and their parent-child relationships to the exclusion list.
- Users should regularly review and update the exclusion list to ensure it reflects the current environment and includes any new legitimate software that may trigger the rule.
- It is crucial to verify the trustworthiness of the code signatures associated with excluded processes to prevent adversaries from exploiting these exceptions.

### Response and remediation

- Isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify the source of the PPID spoofing, including reviewing process creation logs and correlating with known attack patterns.
- Terminate any malicious processes identified during the investigation to stop ongoing threats.
- Escalate the incident to the security operations center (SOC) or incident response team if the threat is part of a larger attack campaign or if sensitive data may have been compromised.
- Restore the system to a known good state using backups or system restore points, ensuring that all malicious changes are removed.
- Implement enhanced logging policies to capture detailed process creation events and parent-child process relationships for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Review and update security policies and access controls to minimize the risk of privilege escalation through PPID spoofing.
- Conduct a post-incident review to identify gaps in the current security posture and update incident response plans accordingly.
- Educate users and administrators on recognizing signs of privilege escalation and the importance of reporting suspicious activities promptly."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1134"
name = "Access Token Manipulation"
reference = "https://attack.mitre.org/techniques/T1134/"
[[rule.threat.technique.subtechnique]]
id = "T1134.002"
name = "Create Process with Token"
reference = "https://attack.mitre.org/techniques/T1134/002/"

[[rule.threat.technique.subtechnique]]
id = "T1134.004"
name = "Parent PID Spoofing"
reference = "https://attack.mitre.org/techniques/T1134/004/"



[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

