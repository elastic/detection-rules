[metadata]
creation_date = "2021/10/14"
integration = ["windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
Identifies suspicious access to an LSASS handle via PssCaptureSnapShot where two successive process accesses are
performed by the same process and target two different instances of LSASS. This may indicate an attempt to evade
detection and dump LSASS memory for credential access.
"""
from = "now-9m"
index = ["winlogbeat-*", "logs-windows.sysmon_operational-*"]
language = "kuery"
license = "Elastic License v2"
name = "Potential LSASS Memory Dump via PssCaptureSnapShot"
references = [
    "https://www.matteomalvica.com/blog/2019/12/02/win-defender-atp-cred-bypass/",
    "https://twitter.com/sbousseaden/status/1280619931516747777?lang=en",
]
risk_score = 73
rule_id = "0f93cb9a-1931-48c2-8cd0-f173fd3e5283"
setup = """## Setup

This is meant to run only on datasources using Elastic Agent 7.14+ since versions prior to that will be missing the threshold
rule cardinality feature.
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Sysmon",
]
timestamp_override = "event.ingested"
type = "threshold"

query = '''
event.category:process and host.os.type:windows and event.code:10 and
 winlog.event_data.TargetImage:("C:\\Windows\\system32\\lsass.exe" or
                                 "c:\\Windows\\system32\\lsass.exe" or
                                 "c:\\Windows\\System32\\lsass.exe")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential LSASS Memory Dump via PssCaptureSnapShot

PssCaptureSnapShot is a Windows API used for creating snapshots of processes, which can be leveraged for legitimate debugging and diagnostics. However, adversaries may exploit this to capture LSASS process memory, aiming to extract credentials. The detection rule identifies suspicious behavior by monitoring for repeated access to LSASS by the same process, targeting different LSASS instances, which may suggest an evasion attempt to dump credentials stealthily.

### Possible investigation steps

- Review the alert details to confirm the event category is 'process' and the host operating system type is 'windows', ensuring the alert is relevant to the environment.
- Verify the event code is '10', which indicates a process access event, to confirm the alert is triggered by the correct type of activity.
- Check the 'winlog.event_data.TargetImage' field to ensure it matches the path of LSASS (e.g., "C:\\\\Windows\\\\system32\\\\lsass.exe"), confirming the target process is indeed LSASS.
- Identify the process that accessed LSASS by examining the process name and process ID fields in the event data to determine the source of the suspicious activity.
- Investigate the parent process of the suspicious process to understand the context of how it was launched and whether it is associated with legitimate software or known malicious activity.
- Use Osquery to gather additional context about the suspicious process. For example, run the query: `SELECT * FROM processes WHERE pid = <suspicious_process_id>;` to retrieve details such as the command line, user, and start time.
- Check for any recent process creation events involving the suspicious process to identify if it was spawned by another potentially malicious process.
- Review the system's security logs for any other unusual or related activities around the time of the alert, such as failed login attempts or other process access events.
- Analyze network logs to determine if the suspicious process has made any outbound connections, which could indicate data exfiltration attempts.
- Correlate the findings with threat intelligence sources to determine if the behavior matches any known attack patterns or if the process is associated with known malware.

### False positive analysis

- Legitimate software tools used for system diagnostics or debugging may trigger this rule if they access LSASS memory using PssCaptureSnapShot. These tools often perform similar actions for legitimate purposes, such as performance monitoring or troubleshooting.
- Security software or endpoint protection solutions might also access LSASS memory as part of their routine checks, leading to false positives. These solutions are designed to ensure system integrity and may mimic suspicious behavior unintentionally.
- To manage these false positives, users can create exceptions for known and trusted software by whitelisting their process names or paths. This can be done by updating the detection rule to exclude specific processes that are verified as non-threatening.
- Regularly review and update the list of exceptions to ensure that only legitimate processes are excluded, maintaining a balance between security and operational efficiency.
- Collaborate with IT and security teams to identify and document legitimate processes that require access to LSASS, ensuring that these are accounted for in the exception list.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further credential access and lateral movement by the adversary.
- Conduct a thorough investigation to confirm the presence of unauthorized LSASS memory access by reviewing security logs and process activity.
- Terminate any suspicious processes that have accessed LSASS memory and ensure they are not legitimate administrative tools.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine the scope of the breach.
- Change all potentially compromised credentials, especially those with administrative privileges, to prevent unauthorized access.
- Restore the system to a known good state by reimaging the affected machine and applying the latest security patches and updates.
- Implement enhanced logging policies to capture detailed process creation and access events, focusing on LSASS and other critical system processes.
- Integrate endpoint detection and response (EDR) solutions to monitor for similar suspicious activities and provide real-time alerts.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Educate users and administrators on the risks of credential dumping and the importance of maintaining strong, unique passwords."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.001"
name = "LSASS Memory"
reference = "https://attack.mitre.org/techniques/T1003/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

[rule.threshold]
field = ["process.entity_id"]
value = 2
[[rule.threshold.cardinality]]
field = "winlog.event_data.TargetProcessId"
value = 2


