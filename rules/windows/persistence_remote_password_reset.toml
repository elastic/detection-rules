[metadata]
creation_date = "2021/10/18"
integration = ["system", "windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
Identifies an attempt to reset a potentially privileged account password remotely. Adversaries may manipulate account
passwords to maintain access or evade password duration policies and preserve compromised credentials.
"""
false_positives = ["Legitimate remote account administration."]
from = "now-9m"
index = ["winlogbeat-*", "logs-system.security*", "logs-windows.forwarded*"]
language = "eql"
license = "Elastic License v2"
name = "Account Password Reset Remotely"
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Account Password Reset Remotely

Remote password resets are crucial for managing user access in distributed environments. However, adversaries exploit this by resetting passwords of privileged accounts to maintain unauthorized access or bypass security policies. The detection rule identifies such activities by monitoring successful network logins followed by password resets on accounts with administrative-like names or specific security identifiers, flagging potential misuse.

### Possible investigation steps

- Review the alert details to identify the specific account involved in the password reset by examining the `winlog.event_data.TargetUserName` field.
- Check the `source.ip` field to determine the origin of the network login and assess if it is from a known or suspicious location.
- Investigate the `winlog.computer_name` to identify the system where the password reset was initiated and verify if it is a legitimate administrative system.
- Correlate the `winlog.event_data.TargetLogonId` and `winlog.event_data.SubjectLogonId` fields to trace the session and user context of the login and password reset events.
- Use Osquery to gather additional context on the involved system. For example, run the following query to list recent logins on the system: `SELECT * FROM logged_in_users WHERE user = '<TargetUserName>';`.
- Examine historical login patterns for the `winlog.event_data.TargetUserName` to identify any anomalies or deviations from normal behavior.
- Check for any recent changes in group memberships or privileges for the account using the `winlog.event_data.TargetSid` to ensure no unauthorized privilege escalation has occurred.
- Review any related security logs or alerts around the time of the event to identify potential lateral movement or other suspicious activities.
- Investigate any other accounts accessed from the same `source.ip` to determine if there is a broader compromise.
- Consult with the account owner or relevant personnel to verify if the password reset was authorized and gather any additional context or concerns they might have.

### False positive analysis

- Routine administrative tasks: Regular password resets by IT staff for maintenance or user support can trigger false positives. To manage this, exclude known IT staff accounts or specific IP addresses from the rule.
- Automated system processes: Scheduled tasks or scripts that reset passwords for service accounts might be flagged. Identify and exclude these accounts by adding their specific naming conventions to the exception list.
- Third-party management tools: Tools used for account management that perform password resets as part of their operation can cause alerts. Whitelist these tools by excluding their associated IP addresses or account names.
- Frequent password policy changes: Organizations with strict password policies may have frequent legitimate resets. Adjust the rule to account for these by excluding accounts that follow a predictable reset pattern.
- Shared administrative accounts: In environments where shared accounts are used, legitimate resets by different users can appear suspicious. Consider excluding these accounts or implementing additional monitoring to verify legitimate use.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access.
- Verify the legitimacy of the password reset by contacting the account owner or reviewing recent activity logs.
- If unauthorized access is confirmed, reset the compromised account's password and any other accounts that may have been affected.
- Conduct a thorough investigation to identify the source of the breach, including reviewing network logs, authentication logs, and any other relevant security logs.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response.
- Implement additional monitoring and alerting for suspicious account activities, focusing on privileged accounts.
- Review and enhance logging policies to ensure comprehensive coverage of authentication and account management events.
- Integrate threat intelligence feeds to correlate detected activities with known threat actors and tactics.
- Restore the system to its operational state by applying security patches, updating configurations, and ensuring all security controls are functioning correctly.
- Implement hardening measures such as enforcing strong password policies, enabling multi-factor authentication, and restricting remote access to privileged accounts.

## Performance
This rule may cause medium to high performance impact due to logic scoping all remote Windows logon activity.
"""
references = [
    "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4724",
    "https://stealthbits.com/blog/manipulating-user-passwords-with-mimikatz/",
    "https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES/blob/master/Credential%20Access/remote_pwd_reset_rpc_mimikatz_postzerologon_target_DC.evtx",
    "https://www.elastic.co/security-labs/detect-credential-access",
]
risk_score = 47
rule_id = "2820c9c2-bcd7-4d6e-9eba-faf3891ba450"
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Persistence",
    "Tactic: Impact",
    "Data Source: System",
]
type = "eql"

query = '''
sequence by winlog.computer_name with maxspan=1m
  [authentication where event.action == "logged-in" and
    /* event 4624 need to be logged */
    winlog.logon.type : "Network" and event.outcome == "success" and source.ip != null and
    source.ip != "127.0.0.1" and source.ip != "::1" and
    not winlog.event_data.TargetUserName : ("svc*", "PIM_*", "_*_", "*-*-*", "*$")] by winlog.event_data.TargetLogonId
   /* event 4724 need to be logged */
  [iam where event.action == "reset-password" and
   (
    /*
       This rule is very noisy if not scoped to privileged accounts, duplicate the
       rule and add your own naming convention and accounts of interest here.
     */
    winlog.event_data.TargetUserName: ("*Admin*", "*super*", "*SVC*", "*DC0*", "*service*", "*DMZ*", "*ADM*") or
    winlog.event_data.TargetSid : ("S-1-5-21-*-500", "S-1-12-1-*-500")
    )
  ] by winlog.event_data.SubjectLogonId
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1098"
name = "Account Manipulation"
reference = "https://attack.mitre.org/techniques/T1098/"


[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1531"
name = "Account Access Removal"
reference = "https://attack.mitre.org/techniques/T1531/"


[rule.threat.tactic]
id = "TA0040"
name = "Impact"
reference = "https://attack.mitre.org/tactics/TA0040/"

