[metadata]
creation_date = "2020/03/25"
integration = ["endpoint", "windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
An instance of MSBuild, the Microsoft Build Engine, was started by a script or the Windows command interpreter. This
behavior is unusual and is sometimes used by malicious payloads.
"""
false_positives = ["The Build Engine is commonly used by Windows developers but use by non-engineers is unusual."]
from = "now-9m"
index = ["winlogbeat-*", "logs-endpoint.events.process-*", "logs-windows.*"]
language = "kuery"
license = "Elastic License v2"
name = "Microsoft Build Engine Started by a Script Process"
risk_score = 21
rule_id = "9d110cb3-5f4b-4c9a-b9f5-53f0a1707ae2"
setup = """## Setup

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,
events will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.
Hence for this rule to work effectively, users will need to add a custom ingest pipeline to populate
`event.ingested` to @timestamp.
For more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html
"""
severity = "low"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Defense Evasion",
    "Tactic: Execution",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "new_terms"

query = '''
host.os.type:windows and event.category:process and event.type:start and (
  process.name.caseless:"msbuild.exe" or process.pe.original_file_name:"MSBuild.exe") and 
  process.parent.name:("cmd.exe" or "powershell.exe" or "pwsh.exe" or "powershell_ise.exe" or "cscript.exe" or
    "wscript.exe" or "mshta.exe")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Microsoft Build Engine Started by a Script Process

The Microsoft Build Engine (MSBuild) is a platform for building applications, typically invoked by developers during software development. However, adversaries can exploit MSBuild to execute malicious code by embedding scripts within build files, leveraging its trusted status to bypass security controls. The detection rule identifies unusual MSBuild invocations initiated by script interpreters, signaling potential misuse for executing unauthorized actions.

### Possible investigation steps

- Review the alert details to confirm the presence of MSBuild.exe being started by a script process, focusing on the `process.name` and `process.parent.name` fields.
- Examine the `host.os.type` and `event.category` fields to ensure the event pertains to a Windows process start, confirming the context of the alert.
- Investigate the parent process (`process.parent.name`) to determine if it is a known script interpreter like `cmd.exe`, `powershell.exe`, or others listed in the query.
- Check the `process.command_line` field to gather more context on the command executed, looking for any suspicious or unexpected arguments.
- Correlate the event with other recent process creation events on the same host to identify any patterns or related activities.
- Use Osquery to list all running processes and their parent-child relationships to identify any other unusual process trees. Example query: `SELECT pid, name, path, parent FROM processes WHERE name = 'msbuild.exe';`
- Investigate the user account associated with the process (`user.name`) to determine if it aligns with expected usage patterns or if it might be compromised.
- Review recent file modifications or creations in directories commonly used by MSBuild to identify any unauthorized or suspicious build files.
- Check for any network connections initiated by the MSBuild process using network monitoring tools to identify potential data exfiltration or command and control activity.
- Analyze historical data for similar events on the same host or across the environment to determine if this is an isolated incident or part of a broader pattern.

### False positive analysis

- Developers and build automation systems may legitimately invoke MSBuild through scripts for continuous integration and deployment processes, leading to false positives. 
- Automated testing frameworks might use script-based invocations of MSBuild to compile test environments, which can be mistaken for malicious activity.
- Some development environments or integrated development environments (IDEs) may use scripts to trigger MSBuild as part of their normal operation, causing benign alerts.
- To manage these false positives, users can create exceptions for known and trusted script processes or parent processes that regularly invoke MSBuild in a non-threatening manner.
- Implementing a whitelist of specific script paths or parent process hashes that are verified as part of legitimate development workflows can help reduce unnecessary alerts.
- Regularly review and update the list of exceptions to ensure that only verified and non-malicious activities are excluded from detection.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to determine the scope of the incident, focusing on identifying any additional systems that may have been compromised.
- Analyze the MSBuild process and its parent script process to understand the nature of the payload and any potential persistence mechanisms.
- Review and collect relevant logs, including PowerShell logs, command line history, and security event logs, to gather evidence and understand the attack vector.
- Remove any unauthorized or malicious scripts and build files identified during the investigation to prevent further execution.
- Apply security patches and updates to the affected system to address any vulnerabilities that may have been exploited.
- Restore the system from a known good backup to ensure the integrity of the operating environment.
- Implement enhanced logging and monitoring policies to detect similar activities in the future, such as enabling script block logging and command line auditing.
- Integrate threat intelligence feeds and security solutions to improve detection capabilities and provide context for future investigations.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures to prevent recurrence."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1127"
name = "Trusted Developer Utilities Proxy Execution"
reference = "https://attack.mitre.org/techniques/T1127/"
[[rule.threat.technique.subtechnique]]
id = "T1127.001"
name = "MSBuild"
reference = "https://attack.mitre.org/techniques/T1127/001/"



[rule.threat.tactic]
id = "TA0005"
name = "Defense Evasion"
reference = "https://attack.mitre.org/tactics/TA0005/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.001"
name = "PowerShell"
reference = "https://attack.mitre.org/techniques/T1059/001/"

[[rule.threat.technique.subtechnique]]
id = "T1059.003"
name = "Windows Command Shell"
reference = "https://attack.mitre.org/techniques/T1059/003/"

[[rule.threat.technique.subtechnique]]
id = "T1059.005"
name = "Visual Basic"
reference = "https://attack.mitre.org/techniques/T1059/005/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

[rule.new_terms]
field = "new_terms_fields"
value = ["host.id", "user.name", "process.command_line"]
[[rule.new_terms.history_window_start]]
field = "history_window_start"
value = "now-14d"


