[metadata]
creation_date = "2023/01/22"
integration = ["windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = "Identifies access attempts to LSASS handle, this may indicate an attempt to dump credentials from Lsass memory.\n"
from = "now-9m"
index = ["winlogbeat-*", "logs-windows.sysmon_operational-*"]
language = "eql"
license = "Elastic License v2"
name = "Suspicious Lsass Process Access"
references = ["https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.001/T1003.001.md"]
risk_score = 47
rule_id = "128468bf-cab1-4637-99ea-fdf3780a4609"
setup = """## Setup

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,
events will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.
Hence for this rule to work effectively, users will need to add a custom ingest pipeline to populate
`event.ingested` to @timestamp.
For more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Sysmon",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "windows" and event.code == "10" and
  winlog.event_data.TargetImage : "?:\\WINDOWS\\system32\\lsass.exe" and
  not winlog.event_data.GrantedAccess :
                ("0x1000", "0x1400", "0x101400", "0x101000", "0x101001", "0x100000", "0x100040", "0x3200", "0x40", "0x3200") and
  not process.name : ("procexp64.exe", "procmon.exe", "procexp.exe", "Microsoft.Identity.AadConnect.Health.AadSync.Host.ex") and
  not process.executable : (
        "?:\\ProgramData\\Microsoft\\Windows Defender\\platform\\*",
        "?:\\ProgramData\\WebEx\\webex\\*",
        "?:\\Program Files (x86)\\*",
        "?:\\Program Files\\*",
        "?:\\Windows\\CCM\\CcmExec.exe",
        "?:\\Windows\\LTSvc\\LTSVC.exe",
        "?:\\Windows\\Sysmon.exe",
        "?:\\Windows\\Sysmon64.exe",
        "C:\\Windows\\CynetMS.exe",
        "?:\\Windows\\system32\\csrss.exe",
        "?:\\Windows\\System32\\lsm.exe",
        "?:\\Windows\\system32\\MRT.exe",
        "?:\\Windows\\System32\\msiexec.exe",
        "?:\\Windows\\system32\\wbem\\wmiprvse.exe",
        "?:\\Windows\\system32\\wininit.exe",
        "?:\\Windows\\SystemTemp\\GUM*.tmp\\GoogleUpdate.exe",
        "?:\\Windows\\sysWOW64\\wbem\\wmiprvse.exe", 
        "C:\\oracle\\64\\02\\instantclient_19_13\\sqlplus.exe", 
        "C:\\oracle\\64\\02\\instantclient_19_13\\sqlldr.exe",
        "d:\\oracle\\product\\19\\dbhome1\\bin\\ORACLE.EXE",
        "C:\\wamp\\bin\\apache\\apache*\\bin\\httpd.exe",
        "C:\\Windows\\system32\\netstat.exe", 
        "C:\\PROGRA~1\\INFORM~1\\apps\\jdk\\*\\jre\\bin\\java.exe", 
        "C:\\PROGRA~2\\CyberCNSAgentV2\\osqueryi.exe",
        "C:\\Utilityw2k19\\packetbeat\\packetbeat.exe",
        "C:\\ProgramData\\Cisco\\Cisco AnyConnect Secure Mobility Client\\Temp\\CloudUpdate\\vpndownloader.exe", 
        "C:\\ProgramData\\Cisco\\Cisco Secure Client\\Temp\\CloudUpdate\\vpndownloader.exe"
  ) and
  not winlog.event_data.CallTrace : ("*mpengine.dll*", "*appresolver.dll*", "*sysmain.dll*")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious Lsass Process Access

The Local Security Authority Subsystem Service (LSASS) is crucial for managing security policies and user authentication in Windows environments. Adversaries often target LSASS to extract credentials, enabling unauthorized access. The detection rule identifies unusual access attempts to LSASS by filtering out legitimate processes and access patterns, focusing on potential credential dumping activities. This helps in pinpointing malicious actions while minimizing false positives.

### Possible investigation steps

- Review the alert details to confirm the event code is "10" and the target image is "?:\\\\WINDOWS\\\\system32\\\\lsass.exe" to ensure the alert is relevant to LSASS access.
- Check the process name and executable path against the exclusion list to verify if the process is indeed suspicious and not a known legitimate process.
- Investigate the process that attempted access by gathering additional details such as process ID, parent process ID, and command line arguments to understand the context of the access attempt.
- Examine the user account associated with the process to determine if it is a privileged account or if there are any anomalies in its usage patterns.
- Utilize Osquery to gather more information about the suspicious process. For example, run the following query to list all processes with their parent process and command line:
  ```sql
  SELECT pid, name, path, cmdline, parent FROM processes WHERE path LIKE '%lsass.exe%';
  ```
- Analyze the call trace data to identify any known malicious DLLs or unusual patterns that could indicate tampering or injection attempts.
- Cross-reference the timestamp of the alert with other security logs, such as authentication logs or network activity, to identify any correlated suspicious activities.
- Investigate any recent changes or installations on the host that could have introduced the suspicious process, focusing on software updates or new applications.
- Check for any other alerts or indicators of compromise on the same host or within the same network segment to assess if this is part of a broader attack.
- Document all findings and observations in a case management system to maintain a comprehensive record of the investigation for future reference and analysis.

### False positive analysis

- Known false positives for the Suspicious Lsass Process Access rule include legitimate software and system processes that access LSASS for valid reasons, such as security software, system management tools, and certain enterprise applications.
- Security tools like Sysmon, Windows Defender, and other endpoint protection platforms may trigger false positives due to their legitimate access to LSASS for monitoring and protection purposes.
- System management and monitoring tools, such as those used for software updates or system diagnostics, might also access LSASS, leading to false positives.
- Enterprise applications, particularly those involved in authentication or system integration, may require access to LSASS, which can be mistaken for suspicious activity.
- To manage these false positives, users can create exceptions by adding known legitimate processes and executables to the exclusion list within the detection rule.
- Regularly review and update the exclusion list to include new legitimate processes as they are identified, ensuring that the detection rule remains effective without generating unnecessary alerts.
- Consider the context of the environment and the specific use cases of the organization to tailor the exclusion list, minimizing the risk of overlooking genuine threats while reducing false positives.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to confirm the alert by reviewing logs and correlating with other security events to determine the scope and impact.
- Capture a memory dump of the affected system for forensic analysis to identify any malicious processes or tools used for credential dumping.
- Reset passwords for any accounts that may have been compromised, especially those with elevated privileges, and enforce multi-factor authentication.
- Remove any identified malicious software or tools from the system and ensure that the system is clean before reconnecting it to the network.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging policies to capture detailed process execution and access patterns, focusing on critical system processes like LSASS.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities and provide context for future investigations.
- Restore the system to its operational state by applying the latest security patches and updates, and verify system integrity.
- Harden the system by disabling unnecessary services, applying least privilege principles, and conducting regular security audits to prevent future incidents."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.001"
name = "LSASS Memory"
reference = "https://attack.mitre.org/techniques/T1003/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

