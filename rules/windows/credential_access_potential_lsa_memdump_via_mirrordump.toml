[metadata]
creation_date = "2021/09/27"
integration = ["windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
Identifies suspicious access to an LSASS handle via DuplicateHandle from an unknown call trace module. This may indicate
an attempt to bypass the NtOpenProcess API to evade detection and dump LSASS memory for credential access.
"""
from = "now-9m"
index = ["winlogbeat-*", "logs-windows.sysmon_operational-*"]
language = "eql"
license = "Elastic License v2"
name = "Potential Credential Access via DuplicateHandle in LSASS"
references = ["https://github.com/CCob/MirrorDump"]
risk_score = 47
rule_id = "02a4576a-7480-4284-9327-548a806b5e48"
setup = """## Setup

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,
events will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.
Hence for this rule to work effectively, users will need to add a custom ingest pipeline to populate
`event.ingested` to @timestamp.
For more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html
"""
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Sysmon",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "windows" and event.code == "10" and

 /* LSASS requesting DuplicateHandle access right to another process */
 process.name : "lsass.exe" and winlog.event_data.GrantedAccess == "0x40" and

 /* call is coming from an unknown executable region */
 winlog.event_data.CallTrace : "*UNKNOWN*"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential Credential Access via DuplicateHandle in LSASS

The Local Security Authority Subsystem Service (LSASS) manages security policies and user authentication in Windows environments. Adversaries may exploit the DuplicateHandle function to access LSASS memory, bypassing standard APIs to evade detection and extract credentials. The detection rule identifies anomalies by monitoring LSASS handle access requests with unusual call traces, flagging potential unauthorized memory dumps.

### Possible investigation steps

- Review the alert details to confirm the presence of the event code "10" and ensure the process name is "lsass.exe" with the GrantedAccess value of "0x40".
- Examine the call trace information in the alert to identify the presence of "*UNKNOWN*" modules, which may indicate suspicious activity.
- Cross-reference the timestamp of the alert with other security logs to identify any correlated events or anomalies around the same time.
- Use Osquery to list all processes with open handles to LSASS by running: `SELECT pid, name, path FROM processes WHERE pid IN (SELECT pid FROM process_open_sockets WHERE remote_address = '127.0.0.1' AND remote_port = 135);`
- Investigate the parent process of the suspicious LSASS handle access to determine if it is a known and legitimate process or potentially malicious.
- Check for any recent changes or anomalies in the system's process creation logs that might indicate the introduction of unauthorized software or scripts.
- Analyze network traffic logs for any unusual outbound connections that coincide with the time of the alert, which might suggest data exfiltration attempts.
- Review user account activity logs to identify any unauthorized or unusual login attempts or privilege escalations around the time of the alert.
- Investigate the system for any signs of persistence mechanisms that could indicate a broader compromise, such as scheduled tasks or startup items.
- Consult threat intelligence sources to determine if there are any known malware campaigns or threat actor tactics that align with the observed behavior.

### False positive analysis

- Legitimate software or security tools that interact with LSASS for monitoring or protection purposes may trigger this rule. These tools might use similar techniques to access LSASS memory for legitimate reasons, such as antivirus programs or system management software.
- System administrators or security teams should identify and document any authorized software that accesses LSASS memory. This can be done by reviewing the call traces and verifying the legitimacy of the processes involved.
- To manage false positives, users can create exceptions for known and trusted software by excluding specific call traces or process names from the detection rule. This helps in reducing noise and focusing on genuine threats.
- Regularly update the list of exceptions to accommodate new software updates or changes in the environment, ensuring that only verified processes are excluded from monitoring.
- Collaborate with software vendors to understand the behavior of their applications concerning LSASS access, which can aid in distinguishing between benign and malicious activities.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to confirm the alert by reviewing logs and correlating with other security events to determine the scope and impact.
- Capture a memory dump of the affected system for forensic analysis to identify any malicious processes or tools used by the adversary.
- Terminate any suspicious processes identified during the investigation that are attempting to access LSASS memory.
- Change all potentially compromised credentials, focusing on high-privilege accounts, and enforce a password reset policy.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.
- Implement enhanced logging policies to capture detailed process creation and handle access events, ensuring visibility into similar activities in the future.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats.
- Restore the system to its operational state by applying security patches, updating antivirus definitions, and ensuring all security configurations are hardened.
- Conduct a post-incident review to identify gaps in the security posture and update incident response plans and security policies accordingly."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.001"
name = "LSASS Memory"
reference = "https://attack.mitre.org/techniques/T1003/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

