[metadata]
creation_date = "2023/10/02"
integration = ["endpoint"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
Identifies the creation of a process impersonating the token of another user logon session. Adversaries may create a new
process with a different token to escalate privileges and bypass access controls.
"""
from = "now-9m"
index = ["logs-endpoint.events.process-*"]
language = "eql"
license = "Elastic License v2"
name = "Process Created with a Duplicated Token"
references = ["https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createprocesswithtokenw"]
risk_score = 47
rule_id = "1b0b4818-5655-409b-9c73-341cac4bb73f"
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Privilege Escalation",
    "Data Source: Elastic Defend",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
/* This rule is only compatible with Elastic Endpoint 8.4+ */

process where host.os.type == "windows" and event.action == "start" and

 user.id : ("S-1-5-21-*", "S-1-12-1-*") and

 (process.Ext.effective_parent.executable regex~ """[C-Z]:\\Windows\\(System32|SysWOW64)\\[a-zA-Z0-9\-\_\.]+\.exe""" or
  process.Ext.effective_parent.executable : "?:\\Windows\\explorer.exe") and

 (
  process.name : ("powershell.exe", "cmd.exe", "rundll32.exe", "notepad.exe", "net.exe", "ntdsutil.exe",
                  "tasklist.exe", "reg.exe", "certutil.exe", "bitsadmin.exe", "msbuild.exe", "esentutl.exe") or

  ((process.Ext.relative_file_creation_time <= 900 or process.Ext.relative_file_name_modify_time <= 900) and
   not process.code_signature.status : ("trusted", "errorExpired", "errorCode_endpoint*") and
   not process.executable : ("?:\\Program Files\\*", "?:\\Program Files (x86)\\*"))
 ) and
 not (process.name : "rundll32.exe" and
      process.command_line : ("*davclnt.dll,DavSetCookie*", "*?:\\Program Files*",
                              "*\\Windows\\System32\\winethc.dll*", "*\\Windows\\SYSTEM32\\EDGEHTML.dll*",
                              "*shell32.dll,SHCreateLocalServerRunDll*")) and
 not startswith~(process.Ext.effective_parent.name, process.parent.name) and 
 not (process.name : "powershell.exe" and process.parent.name : "wmiprvse.exe" and process.Ext.effective_parent.executable : "?:\\Windows\\System32\\wsmprovhost.exe") and 
 not (process.Ext.effective_parent.executable : "?:\\Windows\\System32\\RuntimeBroker.exe" and process.parent.executable : "?:\\Windows\\System32\\sihost.exe") and 
 not (process.Ext.effective_parent.executable : "?:\\Windows\\System32\\sethc.exe" and process.parent.executable : "?:\\Windows\\System32\\svchost.exe") and 
 not (process.Ext.effective_parent.executable : "?:\\Windows\\explorer.exe" and 
      process.parent.executable : ("?:\\Windows\\System32\\svchost.exe", "?:\\Windows\\System32\\msiexec.exe", "?:\\Windows\\twain_32\\*.exe"))
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Process Created with a Duplicated Token

In Windows environments, tokens are used to represent user credentials and permissions. Adversaries may duplicate tokens to create processes with elevated privileges, bypassing security controls. The detection rule identifies suspicious process creation by examining token impersonation patterns, process origins, and anomalies in executable paths, helping to uncover potential privilege escalation attempts.

### Possible investigation steps

- Review the alert details to understand which process was created and the associated user ID, focusing on the `process.name` and `user.id` fields.
- Examine the `process.Ext.effective_parent.executable` field to determine the origin of the parent process and assess if it is a known legitimate source or potentially malicious.
- Check the `process.command_line` for any suspicious or unexpected command-line arguments that could indicate malicious intent.
- Investigate the `process.Ext.relative_file_creation_time` and `process.Ext.relative_file_name_modify_time` to identify if the process was recently created or modified, which could suggest tampering.
- Verify the `process.code_signature.status` to determine if the executable is signed and trusted, which can help differentiate between legitimate and potentially malicious processes.
- Use Osquery to gather additional context about the process and its parent. For example, run the following query to list processes with their parent details: `SELECT pid, name, path, parent, uid FROM processes WHERE name = '<suspicious_process_name>';`
- Cross-reference the `process.parent.name` and `process.Ext.effective_parent.name` fields to identify any discrepancies or unusual parent-child relationships that could indicate token manipulation.
- Analyze the `process.parent.executable` to ensure it aligns with expected behavior for the parent process, checking for any anomalies or unexpected paths.
- Review historical data for the `user.id` to identify any patterns of unusual activity or previous alerts that could suggest a compromised account.
- Correlate the alert with other security events or logs from the same timeframe to build a comprehensive timeline of activities and identify any additional indicators of compromise.

### False positive analysis

- Legitimate administrative tools: Processes like "powershell.exe" or "cmd.exe" may be flagged when used by IT administrators for routine tasks. Users can create exceptions for these processes when executed by known administrative accounts.
- Software updates and installations: During software updates or installations, processes such as "msiexec.exe" or "svchost.exe" might trigger alerts. Users can exclude these processes when they originate from trusted software update paths.
- System maintenance tasks: Scheduled tasks or system maintenance activities might involve processes like "tasklist.exe" or "reg.exe". Users should monitor the context and frequency of these tasks and consider excluding them if they align with regular maintenance schedules.
- Custom scripts and automation: Organizations using custom scripts for automation might see false positives with processes like "rundll32.exe" or "bitsadmin.exe". Users can whitelist these scripts by verifying their source and ensuring they are signed or located in trusted directories.
- Third-party security tools: Some security tools may mimic adversarial behavior for testing purposes, triggering false positives. Users should identify these tools and exclude their processes from detection rules, ensuring they are from a trusted vendor.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further unauthorized access or lateral movement.
- Conduct a thorough investigation to identify the source of the token duplication, examining logs and correlating events to determine the adversary's entry point and actions.
- Terminate any suspicious processes identified as running with duplicated tokens to halt any ongoing malicious activity.
- Review and analyze user account activity to identify any unauthorized access or privilege escalation attempts, focusing on accounts associated with the duplicated tokens.
- Reset passwords for compromised accounts and enforce multi-factor authentication to enhance account security.
- Restore the system to a known good state using backups, ensuring that the backup is free from any compromise.
- Implement enhanced logging policies to capture detailed process creation and token usage events, aiding in future detection and investigation efforts.
- Integrate security solutions such as Endpoint Detection and Response (EDR) tools to provide real-time monitoring and automated response capabilities.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures accordingly.
- Educate users and administrators on the risks of token manipulation and privilege escalation, emphasizing the importance of adhering to security best practices."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1134"
name = "Access Token Manipulation"
reference = "https://attack.mitre.org/techniques/T1134/"
[[rule.threat.technique.subtechnique]]
id = "T1134.001"
name = "Token Impersonation/Theft"
reference = "https://attack.mitre.org/techniques/T1134/001/"

[[rule.threat.technique.subtechnique]]
id = "T1134.002"
name = "Create Process with Token"
reference = "https://attack.mitre.org/techniques/T1134/002/"



[rule.threat.tactic]
id = "TA0004"
name = "Privilege Escalation"
reference = "https://attack.mitre.org/tactics/TA0004/"

