[metadata]
creation_date = "2020/11/18"
maturity = "production"
updated_date = "2022/05/09"

[rule]
author = ["Elastic"]
description = """
Identifies script engines creating files in the Startup folder, or the creation of script files in the Startup folder.
Adversaries may abuse this technique to maintain persistence in an environment.
"""
from = "now-9m"
index = ["winlogbeat-*", "logs-endpoint.events.*", "logs-windows.*"]
language = "eql"
license = "Elastic License v2"
name = "Persistent Scripts in the Startup Directory"
note = """## Triage and analysis

### Investigating Persistent Scripts in the Startup Directory

The Windows Startup folder is a special folder in Windows. Programs added to this folder are executed during account
logon, without user interaction, providing an excellent way for attackers to maintain persistence.

This rule looks for shortcuts created by wscript.exe or cscript.exe, or js/vbs scripts created by any process.

#### Possible investigation steps

- Investigate the process execution chain (parent process tree) for unknown processes. Examine their executable files
for prevalence, whether they are located in expected locations, and if they are signed with valid digital signatures.
- Investigate other alerts associated with the user/host during the past 48 hours.
- Validate the activity is not related to planned patches, updates, network administrator activity, or legitimate
software installations.
- Validate if this behavior is prevalent in the environment by looking for similar occurrences across the hosts.
- Retrieve the file and determine if it is malicious:
  - Use a private sandboxed malware analysis system to perform analysis.
    - Observe and collect information about the following activities:
      - Attempts to contact external domains and addresses.
      - File and registry access, modification, and creation activities.
      - Service creation and launch activities.
      - Scheduled tasks creation.
  - Use the PowerShell Get-FileHash cmdlet to get the SHA-256 hash value of the file.
    - Search for the existence and reputation of this file in resources like VirusTotal, Hybrid-Analysis, CISCO Talos, Any.run, etc.

### False positive analysis

- This activity is unlikely to happen legitimately. Benign true positives (B-TPs) can be added as exceptions if necessary.

### Related rules

- Suspicious Startup Shell Folder Modification - c8b150f0-0164-475b-a75e-74b47800a9ff
- Startup Folder Persistence via Unsigned Process - 2fba96c0-ade5-4bce-b92f-a5df2509da3f

### Response and remediation

- Initiate the incident response process based on the outcome of the triage.
- Isolate the involved host to prevent further post-compromise behavior.
- If the triage identified malware, search the environment for additional compromised hosts.
  - Implement any temporary network rules, procedures, and segmentation required to contain the malware.
  - Stop suspicious processes.
  - Immediately block the IoCs identified.
  - Inspect the affected systems for additional malware backdoors like reverse shells, reverse proxies, or droppers that
  attackers could use to reinfect the system.
- Remove and block malicious artifacts identified on the triage.
- Investigate credential exposure on systems compromised or used by the attacker to ensure that all compromised accounts
compromised by the attacker are known. Reset the password for these accounts and other potentially compromised credentials,
like email, business systems, and web services.
- Run a full scan using the antimalware tool in place. This scan can reveal additional artifacts left in the system,
persistence mechanisms, and malware components.
- Investigate to determine the initial vector abused by the attacker and conduct actions to eradicate the chance of
reinfection by abusing the same vector.
- Using the Incident response data, assess for additional logging and audit policies to improve the MTTD (Mean Time To
Detect) and the MTTR (Mean Time To Response).

## Config

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2, events will not define `event.ingested` and default fallback for EQL rules was not added until 8.2, so you will need to add a custom pipeline to populate `event.ingested` to @timestamp for this rule to work.
"""
risk_score = 47
rule_id = "f7c4dc5a-a58d-491d-9f14-9b66507121c0"
severity = "medium"
tags = ["Elastic", "Host", "Windows", "Threat Detection", "Persistence"]
timestamp_override = "event.ingested"
type = "eql"

query = '''
file where event.type != "deletion" and user.domain != "NT AUTHORITY" and
  
  /* detect shortcuts created by wscript.exe or cscript.exe */
  (file.path : "C:\\*\\Programs\\Startup\\*.lnk" and
     process.name : ("wscript.exe", "cscript.exe")) or

  /* detect vbs or js files created by any process */
  file.path : ("C:\\*\\Programs\\Startup\\*.vbs", 
               "C:\\*\\Programs\\Startup\\*.vbe", 
               "C:\\*\\Programs\\Startup\\*.wsh", 
               "C:\\*\\Programs\\Startup\\*.wsf", 
               "C:\\*\\Programs\\Startup\\*.js")
'''


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1547"
name = "Boot or Logon Autostart Execution"
reference = "https://attack.mitre.org/techniques/T1547/"
[[rule.threat.technique.subtechnique]]
id = "T1547.001"
name = "Registry Run Keys / Startup Folder"
reference = "https://attack.mitre.org/techniques/T1547/001/"



[rule.threat.tactic]
id = "TA0003"
name = "Persistence"
reference = "https://attack.mitre.org/tactics/TA0003/"

