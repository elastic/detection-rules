[metadata]
creation_date = "2024/03/27"
integration = ["windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
Detects PowerShell scripts that can execute pass-the-hash (PtH) attacks, intercept and relay NTLM challenges, and carry
out other man-in-the-middle (MitM) attacks.
"""
from = "now-9m"
index = ["winlogbeat-*", "logs-windows.powershell*"]
language = "kuery"
license = "Elastic License v2"
name = "Potential PowerShell Pass-the-Hash/Relay Script"
references = [
    "https://github.com/Kevin-Robertson/Invoke-TheHash/blob/master/Invoke-WMIExec.ps1",
    "https://github.com/Kevin-Robertson/Invoke-TheHash/blob/master/Invoke-SMBExec.ps1",
    "https://github.com/dafthack/Check-LocalAdminHash/blob/master/Check-LocalAdminHash.ps1",
    "https://github.com/nettitude/PoshC2/blob/master/resources/modules/Invoke-Tater.ps1",
    "https://github.com/Kevin-Robertson/Inveigh/blob/master/Inveigh.ps1",
]
risk_score = 73
rule_id = "951779c2-82ad-4a6c-82b8-296c1f691449"
setup = """## Setup

The 'PowerShell Script Block Logging' logging policy must be enabled.
Steps to implement the logging policy with Advanced Audit Configuration:

```
Computer Configuration >
Administrative Templates >
Windows PowerShell >
Turn on PowerShell Script Block Logging (Enable)
```

Steps to implement the logging policy via registry:

```
reg add "hklm\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging" /v EnableScriptBlockLogging /t REG_DWORD /d 1
```
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Resources: Investigation Guide",
    "Data Source: PowerShell Logs",
]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.category:process and host.os.type:windows and
  powershell.file.script_block_text : (
    ("NTLMSSPNegotiate" and ("NegotiateSMB" or "NegotiateSMB2")) or
    "4E544C4D53535000" or
    "0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50" or
    "0x4e,0x54,0x20,0x4c,0x4d" or
    "0x53,0x4d,0x42,0x20,0x32" or
    "0x81,0xbb,0x7a,0x36,0x44,0x98,0xf1,0x35,0xad,0x32,0x98,0xf0,0x38"
  ) and
  not file.directory : "C:\ProgramData\Microsoft\Windows Defender Advanced Threat Protection\Downloads"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential PowerShell Pass-the-Hash/Relay Script

PowerShell, a powerful scripting language in Windows, can be exploited by attackers to perform pass-the-hash (PtH) and relay attacks, leveraging NTLM authentication protocols. These attacks allow adversaries to authenticate as users without knowing their passwords. The detection rule identifies suspicious PowerShell scripts by scanning for specific NTLM negotiation patterns and byte sequences, excluding legitimate system directories, to flag potential credential theft activities.

### Possible investigation steps

- Review the alert details to understand the specific PowerShell script block text that triggered the detection, focusing on the presence of NTLM negotiation patterns and byte sequences.
- Verify the process details by examining the `event.category:process` field to identify the parent and child processes associated with the suspicious PowerShell activity.
- Check the `host.os.type:windows` field to confirm the operating system environment and gather additional context about the host involved in the alert.
- Investigate the script's origin by analyzing the file path and directory, ensuring it does not match the excluded directory "C:\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection\\Downloads".
- Use Osquery to gather more information about the process and its parent by executing a query such as: `SELECT * FROM processes WHERE name = 'powershell.exe' AND path NOT LIKE 'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender Advanced Threat Protection\\\\Downloads\\\\%'`.
- Examine the PowerShell script block text for any hardcoded credentials or suspicious commands that could indicate credential theft or lateral movement attempts.
- Cross-reference the alert with recent authentication logs to identify any unusual or unauthorized access attempts that may correlate with the detected PowerShell activity.
- Analyze network traffic logs for any signs of NTLM relay attacks or anomalous SMB traffic patterns that align with the time of the alert.
- Review historical alerts and logs for the same host to determine if there is a pattern of similar suspicious activities, indicating a persistent threat.
- Consult threat intelligence sources to check if the detected patterns or byte sequences are associated with known malware or attack campaigns.

### False positive analysis

- Legitimate administrative scripts: PowerShell scripts used by IT administrators for legitimate purposes may contain NTLM negotiation patterns similar to those flagged by the rule. Users can handle these by creating exceptions for scripts verified as safe and necessary for operations.
- Security software operations: Some security tools may use PowerShell scripts that mimic NTLM negotiation patterns for scanning or monitoring purposes. Users should identify these tools and exclude their scripts from detection to prevent false positives.
- Automated system processes: Certain automated processes or system maintenance tasks might trigger the rule due to their use of NTLM protocols. Users can manage these by reviewing the processes and excluding known benign scripts from detection.
- Development and testing environments: Developers or testers might run scripts that simulate NTLM authentication for testing purposes. Users should ensure these environments are properly documented and excluded from the detection rule to avoid unnecessary alerts.

### Response and remediation

- Isolate the affected system from the network to prevent further unauthorized access and lateral movement.
- Conduct a thorough investigation of the PowerShell script execution logs to identify the source and scope of the attack.
- Analyze the script block text and associated processes to determine if any credentials were compromised.
- Reset passwords for any accounts that may have been affected, focusing on those with elevated privileges.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response.
- Implement enhanced logging policies to capture detailed PowerShell activity, including script block logging and module logging.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to improve detection capabilities.
- Restore the system from a known good backup to ensure no malicious code remains.
- Apply security patches and updates to the operating system and applications to mitigate known vulnerabilities.
- Harden the system by disabling NTLM where possible and enforcing the use of stronger authentication protocols like Kerberos."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1557"
name = "Adversary-in-the-Middle"
reference = "https://attack.mitre.org/techniques/T1557/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.001"
name = "PowerShell"
reference = "https://attack.mitre.org/techniques/T1059/001/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1550"
name = "Use Alternate Authentication Material"
reference = "https://attack.mitre.org/techniques/T1550/"
[[rule.threat.technique.subtechnique]]
id = "T1550.002"
name = "Pass the Hash"
reference = "https://attack.mitre.org/techniques/T1550/002/"



[rule.threat.tactic]
id = "TA0008"
name = "Lateral Movement"
reference = "https://attack.mitre.org/tactics/TA0008/"

