[metadata]
creation_date = "2020/08/21"
integration = ["endpoint", "windows", "sentinel_one_cloud_funnel", "m365_defender"]
maturity = "production"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."
min_stack_version = "8.14.0"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = "Identifies a suspicious parent child process relationship with cmd.exe descending from an unusual process."
from = "now-9m"
index = ["winlogbeat-*", "logs-endpoint.events.process-*", "logs-windows.sysmon_operational-*", "endgame-*", "logs-sentinel_one_cloud_funnel.*", "logs-m365_defender.event-*"]
language = "eql"
license = "Elastic License v2"
name = "Unusual Parent Process for cmd.exe"
risk_score = 47
rule_id = "3b47900d-e793-49e8-968f-c90dc3526aa1"
setup = """## Setup

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,
events will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.
Hence for this rule to work effectively, users will need to add a custom ingest pipeline to populate
`event.ingested` to @timestamp.
For more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html
"""
severity = "medium"
tags = ["Domain: Endpoint", "OS: Windows", "Use Case: Threat Detection", "Tactic: Execution", "Data Source: Elastic Endgame", "Data Source: Elastic Defend", "Data Source: Sysmon", "Data Source: SentinelOne", "Data Source: Microsoft Defender for Endpoint"]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "windows" and event.type == "start" and
  process.name : "cmd.exe" and
  process.parent.name : ("lsass.exe",
                         "csrss.exe",
                         "epad.exe",
                         "regsvr32.exe",
                         "dllhost.exe",
                         "LogonUI.exe",
                         "wermgr.exe",
                         "spoolsv.exe",
                         "jucheck.exe",
                         "jusched.exe",
                         "ctfmon.exe",
                         "taskhostw.exe",
                         "GoogleUpdate.exe",
                         "sppsvc.exe",
                         "sihost.exe",
                         "slui.exe",
                         "SIHClient.exe",
                         "SearchIndexer.exe",
                         "SearchProtocolHost.exe",
                         "FlashPlayerUpdateService.exe",
                         "WerFault.exe",
                         "WUDFHost.exe",
                         "unsecapp.exe",
                         "wlanext.exe" ) and
  not (process.parent.name : "dllhost.exe" and process.parent.args : "/Processid:{CA8C87C1-929D-45BA-94DB-EF8E6CB346AD}")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Unusual Parent Process for cmd.exe

The cmd.exe process is a command-line interpreter in Windows environments, often used for legitimate administrative tasks. However, adversaries can exploit it by launching it from atypical parent processes to execute malicious commands stealthily. The detection rule identifies such anomalies by flagging cmd.exe instances spawned by uncommon parent processes, which may indicate unauthorized or suspicious activity, thus helping analysts pinpoint potential threats.

### Possible investigation steps

- Review the alert details to confirm the presence of cmd.exe being spawned by an unusual parent process as specified in the detection rule.
- Verify the legitimacy of the parent process by checking its usual behavior and purpose within the environment. Cross-reference with known software documentation or internal process baselines.
- Examine the command-line arguments used by the parent process to launch cmd.exe, if available, to identify any suspicious or unexpected commands.
- Investigate the user account associated with the process execution to determine if it aligns with expected usage patterns or if it might be compromised.
- Check the process creation time and correlate it with other security events or logs to identify any concurrent suspicious activities.
- Utilize Osquery to gather additional context about the parent process. For example, run the following query to list details about the parent process: `SELECT * FROM processes WHERE name = 'unusual_parent_process_name';`
- Analyze network connections initiated by the cmd.exe process to identify any unusual or unauthorized external communications.
- Review recent changes or updates to the system that might have introduced new or altered processes, potentially explaining the unusual parent-child relationship.
- Investigate any file modifications or registry changes made by the cmd.exe process to assess potential malicious actions.
- Consult threat intelligence sources to determine if the unusual parent process is associated with known malware or attack techniques.

### False positive analysis

- Certain legitimate applications or system processes may occasionally spawn cmd.exe for valid reasons, leading to false positives. For example, software updates or system maintenance tasks might trigger cmd.exe from processes like GoogleUpdate.exe or FlashPlayerUpdateService.exe.
- Automated scripts or administrative tools that are scheduled to run at specific times might also cause cmd.exe to be launched by processes such as taskhostw.exe or sppsvc.exe, which are typically benign.
- Users can manage these false positives by creating exceptions for known and verified processes that frequently trigger cmd.exe in a non-threatening manner. This can be done by adding specific process names or command-line arguments to an exclusion list within the detection rule.
- Regularly review and update the exclusion list to ensure it reflects the current environment and any changes in legitimate software behavior, thus minimizing the risk of overlooking genuine threats while reducing noise from false positives.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to identify the source and scope of the compromise, focusing on the unusual parent process that spawned cmd.exe.
- Review and analyze logs from the affected system and any related systems to trace the attacker's actions and identify any additional compromised systems.
- Terminate any malicious processes and remove any unauthorized files or scripts identified during the investigation.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional resources are needed.
- Implement enhanced logging policies to capture detailed process creation events and parent-child process relationships for future investigations.
- Integrate threat intelligence feeds and endpoint detection and response (EDR) solutions to improve detection capabilities and provide context for similar threats.
- Restore the system to its operational state by applying clean backups and ensuring all security patches and updates are installed.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Implement hardening measures such as application whitelisting, least privilege access, and regular security awareness training to reduce the risk of similar incidents."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"


[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

