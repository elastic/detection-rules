[metadata]
creation_date = "2024/03/24"
integration = ["endpoint", "windows", "system", "m365_defender", "sentinel_one_cloud_funnel"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
Identifies suspicious processes being spawned by the JetBrain TeamCity process. This activity could be related to
JetBrains remote code execution vulnerabilities.
"""
false_positives = [
    """
    Powershell and Windows Command Shell are often observed as legit child processes of the Jetbrains TeamCity service
    and may require further tuning.
    """,
]
from = "now-9m"
index = [
    "logs-endpoint.events.process-*",
    "winlogbeat-*",
    "logs-windows.forwarded*",
    "logs-windows.sysmon_operational-*",
    "endgame-*",
    "logs-system.security*",
    "logs-m365_defender.event-*",
    "logs-sentinel_one_cloud_funnel.*",
]
language = "eql"
license = "Elastic License v2"
name = "Suspicious JetBrains TeamCity Child Process"
references = [
    "https://www.trendmicro.com/en_us/research/24/c/teamcity-vulnerability-exploits-lead-to-jasmin-ransomware.html",
]
risk_score = 47
rule_id = "730ed57d-ae0f-444f-af50-78708b57edd5"
severity = "medium"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Initial Access",
    "Data Source: Elastic Endgame",
    "Use Case: Vulnerability",
    "Data Source: Elastic Defend",
    "Data Source: Microsoft Defender for Endpoint",
    "Data Source: System",
    "Data Source: Sysmon",
    "Data Source: SentinelOne",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "windows" and event.type == "start" and
  process.parent.executable :
                 ("?:\\TeamCity\\jre\\bin\\java.exe",
                  "?:\\Program Files\\TeamCity\\jre\\bin\\java.exe",
                  "?:\\Program Files (x86)\\TeamCity\\jre\\bin\\java.exe",
                  "?:\\TeamCity\\BuildAgent\\jre\\bin\\java.exe") and
  process.name : ("cmd.exe", "powershell.exe", "msiexec.exe", "certutil.exe", "bitsadmin.exe", "wmic.exe", "curl.exe", "ssh.exe",
                   "rundll32.exe", "regsvr32.exe", "mshta.exe", "certreq.exe", "net.exe", "nltest.exe", "whoami.exe", "hostname.exe",
                   "tasklist.exe", "arp.exe", "nbtstat.exe", "netstat.exe", "reg.exe", "tasklist.exe", "Microsoft.Workflow.Compiler.exe",
                   "arp.exe", "atbroker.exe", "bginfo.exe", "bitsadmin.exe", "cdb.exe", "cmstp.exe", "control.exe", "cscript.exe", "csi.exe",
                   "dnx.exe", "dsget.exe", "dsquery.exe", "forfiles.exe", "fsi.exe", "ftp.exe", "gpresult.exe", "ieexec.exe", "iexpress.exe",
                   "installutil.exe", "ipconfig.exe","msxsl.exe", "netsh.exe", "odbcconf.exe", "ping.exe", "pwsh.exe", "qprocess.exe",
                   "quser.exe", "qwinsta.exe", "rcsi.exe", "regasm.exe", "regsvcs.exe", "regsvr32.exe", "sc.exe", "schtasks.exe",
                   "systeminfo.exe", "tracert.exe", "wmic.exe", "wscript.exe","xwizard.exe", "explorer.exe", "msdt.exe") and
 not (process.name : "powershell.exe" and process.args : "-ExecutionPolicy" and process.args : "?:\\TeamCity\\buildAgent\\work\\*.ps1") and
 not (process.name : "cmd.exe" and process.args : "dir" and process.args : "/-c")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious JetBrains TeamCity Child Process

JetBrains TeamCity is a continuous integration and deployment server used to automate software development processes. Adversaries may exploit vulnerabilities in TeamCity to execute unauthorized code, potentially spawning malicious child processes. The detection rule identifies unusual child processes initiated by TeamCity's Java executable, flagging potential exploitation attempts by monitoring for known suspicious executables and excluding benign operations.

### Possible investigation steps

- Review the alert details to understand which specific child process was spawned by the TeamCity Java executable and note the process name and path.
- Verify the parent process by checking the path of the Java executable to ensure it matches one of the expected TeamCity paths: `?:\\TeamCity\\jre\\bin\\java.exe`, `?:\\Program Files\\TeamCity\\jre\\bin\\java.exe`, `?:\\Program Files (x86)\\TeamCity\\jre\\bin\\java.exe`, or `?:\\TeamCity\\BuildAgent\\jre\\bin\\java.exe`.
- Examine the command-line arguments of the suspicious child process to identify any potentially malicious or unusual commands being executed.
- Cross-reference the suspicious process name against known legitimate processes and common malicious tools to assess the likelihood of malicious activity.
- Use Osquery to gather additional context about the suspicious process. For example, run the following query to list all processes with their parent process IDs and command-line arguments: `SELECT pid, name, path, cmdline, parent FROM processes WHERE name = '<suspicious_process_name>';`.
- Investigate the user account under which the suspicious process is running to determine if it aligns with expected usage patterns or if it indicates potential compromise.
- Check for any recent changes or updates to the TeamCity server configuration or plugins that might explain the unexpected process behavior.
- Review network connections initiated by the suspicious process using network monitoring tools or logs to identify any unusual or unauthorized external communications.
- Analyze system logs for any other suspicious activities or anomalies around the time the alert was triggered to identify potential indicators of compromise.
- Consult threat intelligence sources to determine if there are any known vulnerabilities or exploits related to the specific version of TeamCity in use that could explain the suspicious activity.

### False positive analysis

- Known false positives may occur when legitimate scripts or applications are executed as part of regular TeamCity operations, such as build scripts or deployment tasks that use command-line tools like `cmd.exe` or `powershell.exe`.
- Exclude specific scripts or applications by adding exceptions for known benign processes, such as those with specific arguments or paths, to prevent them from being flagged.
- Regularly review and update the exclusion list to accommodate changes in the build or deployment processes that may introduce new legitimate child processes.
- Consider the context of the flagged process, such as the timing and frequency of execution, to determine if it aligns with expected TeamCity activities.
- Collaborate with development and operations teams to identify and document routine processes that may trigger false positives, ensuring these are accounted for in the detection rule exceptions.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further malicious activity and lateral movement.
- Conduct a thorough investigation to confirm the nature of the suspicious process, using forensic tools to analyze logs and system changes.
- Terminate any malicious processes identified and remove any unauthorized files or executables from the system.
- Review and update the TeamCity server and any related software to the latest versions to patch known vulnerabilities.
- Implement enhanced logging policies to capture detailed process execution data, focusing on child processes spawned by TeamCity.
- Integrate security information and event management (SIEM) solutions to correlate and analyze logs for early detection of similar threats.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are compromised.
- Restore the system from a known good backup, ensuring that the backup is free from any malicious modifications.
- Conduct a post-incident review to identify gaps in security controls and update security policies and procedures accordingly.
- Implement hardening measures such as restricting execution policies, applying least privilege principles, and using application whitelisting to prevent unauthorized code execution."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1190"
name = "Exploit Public-Facing Application"
reference = "https://attack.mitre.org/techniques/T1190/"


[rule.threat.tactic]
id = "TA0001"
name = "Initial Access"
reference = "https://attack.mitre.org/tactics/TA0001/"
[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"
[[rule.threat.technique.subtechnique]]
id = "T1059.001"
name = "PowerShell"
reference = "https://attack.mitre.org/techniques/T1059/001/"

[[rule.threat.technique.subtechnique]]
id = "T1059.003"
name = "Windows Command Shell"
reference = "https://attack.mitre.org/techniques/T1059/003/"



[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

