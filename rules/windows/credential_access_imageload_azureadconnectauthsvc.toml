[metadata]
creation_date = "2024/10/14"
integration = ["endpoint", "windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic", "Matteo Potito Giorgio"]
description = """
Identifies the load of a DLL without a valid code signature by the Azure AD Sync process, which may indicate an attempt
to persist or collect sensitive credentials passing through the Azure AD synchronization server.
"""
from = "now-9m"
index = ["winlogbeat-*", "logs-endpoint.events.library*", "logs-windows.sysmon_operational-*"]
language = "eql"
license = "Elastic License v2"
name = "Untrusted DLL Loaded by Azure AD Sync Service"
references = [
"https://blog.xpnsec.com/azuread-connect-for-redteam/",
"https://medium.com/@breakingmhet/detect-azure-pass-through-authentication-abuse-azure-hybrid-environments-ed4274784252",
"https://learn.microsoft.com/en-us/azure/active-directory/hybrid/tshoot-connect-pass-through-authentication"
]
risk_score = 73
rule_id = "f909075d-afc7-42d7-b399-600b94352fd9"
severity = "high"
tags = ["Domain: Endpoint", "OS: Windows", "Use Case: Threat Detection", "Tactic: Credential Access", "Data Source: Elastic Defend", "Data Source: Sysmon"]
timestamp_override = "event.ingested"
type = "eql"

query = '''
any where host.os.type == "windows" and process.name : "AzureADConnectAuthenticationAgentService.exe" and 
(
 (event.category == "library" and event.action == "load") or 
 (event.category == "process" and event.action : "Image loaded*")
) and 

not (?dll.code_signature.trusted == true or file.code_signature.status == "Valid") and not 

  (
   /* Elastic defend DLL path */
   ?dll.path :
         ("?:\\Windows\\assembly\\NativeImages*",
          "?:\\Windows\\Microsoft.NET\\*",
          "?:\\Windows\\WinSxS\\*",
          "?:\\Windows\\System32\\DriverStore\\FileRepository\\*") or 
          
   /* Sysmon DLL path is mapped to file.path */
   file.path :
         ("?:\\Windows\\assembly\\NativeImages*",
          "?:\\Windows\\Microsoft.NET\\*",
          "?:\\Windows\\WinSxS\\*",
          "?:\\Windows\\System32\\DriverStore\\FileRepository\\*")
  )
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Untrusted DLL Loaded by Azure AD Sync Service

Azure AD Sync Service facilitates identity synchronization between on-premises directories and Azure AD. Adversaries may exploit this by loading untrusted DLLs to capture credentials. The detection rule identifies such activities by monitoring DLL loads lacking valid signatures, excluding known safe paths, thus highlighting potential unauthorized persistence or credential access attempts.

### Possible investigation steps

- Review the alert details to confirm the process name is "AzureADConnectAuthenticationAgentService.exe" and verify the event category and action to ensure it matches either "library" with "load" or "process" with "Image loaded*".
- Check the DLL path and file path against the exclusion list to confirm it is not a known safe path, such as those under "?:\\Windows\\assembly\\NativeImages*", "?:\\Windows\\Microsoft.NET\\*", "?:\\Windows\\WinSxS\\*", or "?:\\Windows\\System32\\DriverStore\\FileRepository\\*".
- Investigate the DLL's code signature status to determine if it is indeed untrusted or invalid, and gather details about the publisher if available.
- Use Osquery to list all loaded DLLs by the Azure AD Sync Service process to identify any other potentially suspicious or untrusted DLLs. Example query: `SELECT path, pid, name FROM processes JOIN process_open_sockets USING (pid) WHERE name = 'AzureADConnectAuthenticationAgentService.exe';`
- Cross-reference the untrusted DLL's hash with threat intelligence databases to check for known malicious activity or associations.
- Analyze the creation and modification timestamps of the untrusted DLL to determine when it was introduced to the system and correlate with other system events or changes.
- Review recent system and security logs for any unusual activities or errors around the time the untrusted DLL was loaded, focusing on user logins, privilege escalations, or other process executions.
- Investigate the parent process of the Azure AD Sync Service to determine if it was started by an unexpected or unauthorized user or process.
- Check for any network connections initiated by the Azure AD Sync Service process that could indicate data exfiltration or communication with a command and control server.
- Gather context on the system's role and any recent changes or deployments that could explain the presence of the untrusted DLL, such as software updates or configuration changes.

### False positive analysis

- Known false positives may arise from legitimate software updates or installations that temporarily load unsigned DLLs, especially during system or application updates.
- Some third-party applications may use custom DLLs that are not signed but are necessary for their operation, leading to false alerts.
- In environments with custom-developed software, unsigned DLLs might be loaded as part of normal operations, which could trigger this rule.
- To manage these false positives, users can create exceptions for specific DLL paths or hashes that are known to be safe and frequently used in their environment.
- Regularly review and update the list of excluded paths or hashes to ensure that only legitimate and necessary exceptions are maintained.
- Collaborate with IT and security teams to verify the legitimacy of unsigned DLLs and adjust the detection rule accordingly to minimize false positives while maintaining security.

### Response and remediation

- Isolate the affected system from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to identify the source of the untrusted DLL and determine if any credentials have been compromised.
- Review recent changes to the Azure AD Sync Service configuration and check for unauthorized modifications.
- Remove the untrusted DLL and any associated malicious files from the system.
- Reset credentials for any accounts that may have been exposed or compromised during the incident.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and response.
- Implement enhanced logging and monitoring for the Azure AD Sync Service to detect similar activities in the future, including enabling detailed process and DLL load logging.
- Integrate threat intelligence feeds and security information and event management (SIEM) solutions to correlate and analyze suspicious activities.
- Restore the system to its operational state by verifying the integrity of the Azure AD Sync Service and ensuring all security patches and updates are applied.
- Harden the system by applying security best practices, such as enforcing strict access controls, using application whitelisting, and regularly reviewing and updating security policies."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"
