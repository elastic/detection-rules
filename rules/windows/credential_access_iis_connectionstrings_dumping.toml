[metadata]
creation_date = "2020/08/18"
integration = ["endpoint", "windows", "system", "m365_defender", "sentinel_one_cloud_funnel", "crowdstrike"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
Identifies use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server
access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account
password using aspnet_regiis command.
"""
from = "now-9m"
index = [
    "winlogbeat-*",
    "logs-endpoint.events.process-*",
    "logs-windows.forwarded*",
    "logs-windows.sysmon_operational-*",
    "endgame-*",
    "logs-system.security*",
    "logs-m365_defender.event-*",
    "logs-sentinel_one_cloud_funnel.*",
    "logs-crowdstrike.fdr*",
]
language = "eql"
license = "Elastic License v2"
max_signals = 33
name = "Microsoft IIS Connection Strings Decryption"
references = [
    "https://blog.netspi.com/decrypting-iis-passwords-to-break-out-of-the-dmz-part-1/",
    "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/greenbug-espionage-telco-south-asia",
]
risk_score = 73
rule_id = "c25e9c87-95e1-4368-bfab-9fd34cf867ec"
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Elastic Endgame",
    "Data Source: Elastic Defend",
    "Data Source: System",
    "Data Source: Microsoft Defender for Endpoint",
    "Data Source: Sysmon",
    "Data Source: SentinelOne",
    "Data Source: Crowdstrike",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "windows" and event.type == "start" and
  (process.name : "aspnet_regiis.exe" or ?process.pe.original_file_name == "aspnet_regiis.exe") and
  process.args : "connectionStrings" and process.args : "-pdf"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Microsoft IIS Connection Strings Decryption

Microsoft IIS often stores sensitive data like database credentials in encrypted connection strings. The `aspnet_regiis` tool is used to manage these encryptions. Adversaries with access to the IIS server can exploit this tool to decrypt and extract credentials, potentially leading to unauthorized database access. The detection rule identifies suspicious use of `aspnet_regiis` by monitoring process execution with specific arguments, flagging potential credential dumping activities.

### Possible investigation steps

- Review the alert details to confirm the presence of `aspnet_regiis.exe` execution with the arguments `connectionStrings` and `-pdf`, as these are indicative of potential credential dumping activities.
- Verify the legitimacy of the process by checking the user account under which `aspnet_regiis.exe` was executed. Determine if this account should have the necessary permissions to perform such actions.
- Investigate the parent process of `aspnet_regiis.exe` to understand how it was initiated. This can help identify if it was triggered by a legitimate application or a malicious script.
- Examine the process execution timeline to identify any other suspicious activities occurring around the same time, such as the creation or modification of webshells or unauthorized access attempts.
- Use Osquery to gather additional context about the process execution. For example, run the following query to list recent executions of `aspnet_regiis.exe`:
  ```sql
  SELECT pid, path, cmdline, time FROM processes WHERE name = 'aspnet_regiis.exe' ORDER BY time DESC LIMIT 5;
  ```
- Check the IIS server logs for any unusual access patterns or errors that might correlate with the time of the `aspnet_regiis.exe` execution.
- Investigate any network connections established by the IIS server around the time of the alert to identify potential data exfiltration attempts.
- Review the system's security event logs for any signs of privilege escalation or unauthorized access that could have facilitated the execution of `aspnet_regiis.exe`.
- Analyze any recent changes to the IIS configuration files or application code that might indicate tampering or the introduction of malicious scripts.
- Correlate the findings with other security alerts or incidents in the environment to determine if this activity is part of a broader attack campaign.

### False positive analysis

- Routine administrative tasks: System administrators may use `aspnet_regiis` for legitimate purposes such as updating or managing connection strings during regular maintenance. These activities can trigger the detection rule but are not malicious.
- Automated deployment scripts: Some deployment processes might include scripts that use `aspnet_regiis` to configure or update application settings, including connection strings, as part of a continuous integration/continuous deployment (CI/CD) pipeline.
- Development and testing environments: Developers might frequently use `aspnet_regiis` in non-production environments to test configurations or troubleshoot issues, leading to benign alerts.
- To manage false positives, users can create exceptions for known administrative accounts or specific scripts that are verified as non-threatening. This can be done by excluding certain user accounts or process hashes from triggering the alert.
- Implementing a baseline of normal behavior for `aspnet_regiis` usage in the environment can help distinguish between legitimate and suspicious activities, allowing for more accurate alerting.

### Response and remediation

- Immediately isolate the affected IIS server from the network to prevent further unauthorized access or data exfiltration.
- Conduct a thorough investigation to determine the extent of the compromise, focusing on identifying any unauthorized access to the server and potential data breaches.
- Review IIS server logs and Windows Event Logs for any suspicious activity, particularly around the time the `aspnet_regiis` command was executed.
- Change all credentials that may have been exposed, including database credentials and any other sensitive information stored in connection strings.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if other systems may be affected.
- Implement enhanced logging and monitoring on the IIS server to detect future unauthorized use of `aspnet_regiis` or similar tools.
- Apply security patches and updates to the IIS server and related software to mitigate known vulnerabilities.
- Conduct a security review of the IIS server configuration and apply hardening measures, such as restricting access to the `aspnet_regiis` tool and ensuring least privilege access controls.
- Consider integrating threat intelligence feeds and security information and event management (SIEM) solutions to improve detection and response capabilities.
- Restore the IIS server to its operational state by verifying the integrity of the system and ensuring all security measures are in place before reconnecting to the network."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

