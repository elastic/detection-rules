[metadata]
creation_date = "2024/03/26"
integration = ["system", "windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
Active Directory Integrated DNS (ADIDNS) is one of the core components of AD DS, leveraging AD's access control and
replication to maintain domain consistency. It stores DNS zones as AD objects, a feature that, while robust, introduces
some security issues, such as wildcard records, mainly because of the default permission (Any authenticated users) to
create DNS-named records. Attackers can create wildcard records to redirect traffic that doesn't explicitly match
records contained in the zone, becoming the Man-in-the-Middle and being able to abuse DNS similarly to LLMNR/NBNS
spoofing.
"""
from = "now-9m"
index = ["winlogbeat-*", "logs-system.*", "logs-windows.*"]
language = "eql"
license = "Elastic License v2"
name = "Potential ADIDNS Poisoning via Wildcard Record Creation"
references = [
    "https://www.netspi.com/blog/technical/network-penetration-testing/exploiting-adidns/",
    "https://www.thehacker.recipes/a-d/movement/mitm-and-coerced-authentications/adidns-spoofing",
]
risk_score = 73
rule_id = "8f242ffb-b191-4803-90ec-0f19942e17fd"
setup = """## Setup

The 'Audit Directory Service Changes' logging policy must be configured for (Success, Failure).
Steps to implement the logging policy with Advanced Audit Configuration:

```
Computer Configuration >
Policies >
Windows Settings >
Security Settings >
Advanced Audit Policies Configuration >
Audit Policies >
DS Access >
Audit Directory Service Changes (Success,Failure)
```

The above policy does not cover the target object by default (we still need it to be configured to generate events), so we need to set up an AuditRule using https://github.com/OTRF/Set-AuditRule.

```
Set-AuditRule -AdObjectPath 'AD:\\CN=MicrosoftDNS,DC=DomainDNSZones,DC=Domain,DC=com' -WellKnownSidType WorldSid -Rights CreateChild -InheritanceFlags Descendents -AttributeGUID e0fa1e8c-9b45-11d0-afdd-00c04fd930c9 -AuditFlags Success
```
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Active Directory",
    "Use Case: Active Directory Monitoring",
    "Data Source: System",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
any where host.os.type == "windows" and event.action in ("Directory Service Changes", "directory-service-object-modified") and
    event.code == "5137" and startsWith(winlog.event_data.ObjectDN, "DC=*,")
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Potential ADIDNS Poisoning via Wildcard Record Creation

Active Directory Integrated DNS (ADIDNS) is crucial for maintaining domain consistency by storing DNS zones as AD objects. However, its default permissions can be exploited by attackers to create wildcard DNS records, redirecting traffic and enabling man-in-the-middle attacks. The detection rule identifies such abuse by monitoring specific directory service changes, focusing on suspicious wildcard record creation activities.

### Possible investigation steps

- Review the alert details to confirm the presence of event code "5137" and ensure the event action is either "Directory Service Changes" or "directory-service-object-modified".
- Examine the `winlog.event_data.ObjectDN` field to identify the specific DNS object that was modified, ensuring it starts with "DC=*," which indicates a wildcard record.
- Check the timestamp of the event to determine when the suspicious activity occurred and correlate it with other events around the same time for additional context.
- Identify the user account associated with the event to determine if it is a legitimate account or potentially compromised. Look for anomalies in the account's recent activities.
- Investigate the source IP address and hostname from which the change was made to verify if it is a known and trusted system within the network.
- Use Osquery to gather additional information about the system involved. For example, run the following query to list recent DNS changes on the system: `SELECT * FROM dns_cache WHERE name LIKE '%';`
- Analyze network traffic logs to identify any unusual DNS queries or redirections that might indicate exploitation of the wildcard record.
- Cross-reference the event with other security logs, such as authentication logs, to identify any suspicious login attempts or lateral movement activities.
- Check for any other recent changes in the DNS zone that might indicate a broader attack or misconfiguration.
- Consult with the system administrators to verify if the DNS change was authorized and part of a legitimate configuration update.

### False positive analysis

- Routine administrative tasks: Regular updates or changes made by IT administrators to DNS records can trigger this rule. To manage this, create exceptions for known administrative accounts or scheduled maintenance windows.
- Automated system processes: Some automated processes or scripts that modify DNS records as part of their normal operation may be flagged. Identify these processes and exclude them by their specific attributes, such as the account or system name.
- Legitimate software installations: Certain software installations or updates may modify DNS settings, leading to false positives. Monitor installation logs and exclude these events if they align with known software changes.
- Internal network changes: Changes in network infrastructure, such as the addition of new subdomains or services, might be misinterpreted as suspicious. Document these changes and adjust the rule to recognize them as non-threatening.
- Testing environments: Activities in testing or development environments can mimic suspicious behavior. Clearly separate these environments in monitoring tools and apply different rules or exceptions to avoid false alerts.

### Response and remediation

- Immediately isolate the affected systems from the network to prevent further exploitation of the wildcard DNS records.
- Conduct a thorough investigation to identify the source of the unauthorized DNS record creation, focusing on recent changes and user activities.
- Review and audit Active Directory permissions, specifically for DNS record creation, to ensure that only authorized personnel have the necessary access.
- Remove any unauthorized wildcard DNS records and verify the integrity of existing DNS records to ensure they have not been tampered with.
- Implement enhanced logging and monitoring for DNS changes, including enabling detailed auditing of directory service changes to capture future unauthorized modifications.
- Integrate threat intelligence feeds and security information and event management (SIEM) systems to correlate and detect similar threats in real-time.
- Escalate the incident to the security operations center (SOC) and, if necessary, involve incident response teams to handle potential data breaches.
- Restore affected systems to their operational state by applying clean backups and verifying system integrity.
- Conduct a post-incident review to identify gaps in security controls and update incident response plans accordingly.
- Implement hardening measures such as restricting DNS zone transfers, applying least privilege principles, and regularly reviewing and updating security policies."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1557"
name = "Adversary-in-the-Middle"
reference = "https://attack.mitre.org/techniques/T1557/"


[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

