[metadata]
creation_date = "2022/06/29"
integration = ["windows"]
maturity = "production"
updated_date = "2025/01/08"
min_stack_version = "8.14.0"
min_stack_comments = "Breaking change at 8.14.0 for the Windows Integration."

[rule]
author = ["Elastic"]
description = """
Identifies suspicious access to LSASS handle from a call trace pointing to seclogon.dll and with a suspicious access
rights value. This may indicate an attempt to leak an LSASS handle via abusing the Secondary Logon service in
preparation for credential access.
"""
from = "now-9m"
index = ["winlogbeat-*", "logs-windows.sysmon_operational-*"]
language = "eql"
license = "Elastic License v2"
name = "Suspicious LSASS Access via MalSecLogon"
references = ["https://splintercod3.blogspot.com/p/the-hidden-side-of-seclogon-part-3.html"]
risk_score = 73
rule_id = "7ba58110-ae13-439b-8192-357b0fcfa9d7"
setup = """## Setup

If enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,
events will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.
Hence for this rule to work effectively, users will need to add a custom ingest pipeline to populate
`event.ingested` to @timestamp.
For more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html
"""
severity = "high"
tags = [
    "Domain: Endpoint",
    "OS: Windows",
    "Use Case: Threat Detection",
    "Tactic: Credential Access",
    "Data Source: Sysmon",
]
timestamp_override = "event.ingested"
type = "eql"

query = '''
process where host.os.type == "windows" and event.code == "10" and
  winlog.event_data.TargetImage : "?:\\WINDOWS\\system32\\lsass.exe" and

   /* seclogon service accessing lsass */
  winlog.event_data.CallTrace : "*seclogon.dll*" and process.name : "svchost.exe" and

   /* PROCESS_CREATE_PROCESS & PROCESS_DUP_HANDLE & PROCESS_QUERY_INFORMATION */
  winlog.event_data.GrantedAccess == "0x14c0"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Suspicious LSASS Access via MalSecLogon

The Secondary Logon service, or seclogon, allows users to run processes with different credentials, often used for administrative tasks. Adversaries exploit this by accessing the LSASS process to extract credentials. The detection rule identifies such abuse by monitoring for specific access rights and call traces linked to seclogon.dll, indicating potential credential dumping attempts.

### Possible investigation steps

- Review the alert details to confirm the presence of the specific event code "10" and verify that the target image is "?:\\\\WINDOWS\\\\system32\\\\lsass.exe".
- Check the call trace for the presence of "seclogon.dll" to confirm the involvement of the Secondary Logon service in accessing LSASS.
- Verify the process name is "svchost.exe" to ensure the alert is triggered by the expected service host process.
- Examine the granted access value "0x14c0" to confirm it includes PROCESS_CREATE_PROCESS, PROCESS_DUP_HANDLE, and PROCESS_QUERY_INFORMATION, which are indicative of potential credential dumping attempts.
- Use Osquery to list all processes with open handles to LSASS to identify any other suspicious processes: `SELECT pid, name, path FROM processes WHERE pid IN (SELECT pid FROM process_open_sockets WHERE remote_address = 'lsass.exe');`
- Investigate the parent process of the suspicious svchost.exe instance to determine if it was spawned by a legitimate process or if it shows signs of compromise.
- Review recent login events and user activity to identify any unusual or unauthorized access patterns that might correlate with the alert.
- Check for any recent changes or anomalies in the system's security settings or configurations that could have facilitated the suspicious access.
- Analyze network traffic from the host for any signs of data exfiltration or communication with known malicious IP addresses.
- Correlate the alert with other security events or logs from the same timeframe to identify any additional indicators of compromise or related suspicious activities.

### False positive analysis

- Legitimate administrative tools or scripts that utilize the Secondary Logon service for credential management tasks may trigger this rule. These tools often access LSASS for valid reasons, such as password management or system maintenance.
- Scheduled tasks or automated processes that require elevated privileges and use seclogon.dll might also be flagged. These processes typically have predictable patterns and can be identified through regular monitoring.
- Security software or endpoint management solutions that perform regular system checks or updates might access LSASS as part of their operations. These should be verified with the vendor to ensure they are benign.
- To manage these false positives, users can create exceptions for known legitimate processes by whitelisting specific process names or paths that are verified to be safe.
- Regularly review and update the list of exceptions to ensure that only trusted processes are excluded, and conduct periodic audits to confirm that no malicious activity is being overlooked.

### Response and remediation

- Immediately isolate the affected system from the network to prevent further credential access and lateral movement.
- Conduct a thorough investigation to confirm the presence of malicious activity by analyzing the event logs and correlating with other security alerts.
- Terminate any suspicious processes associated with the Secondary Logon service and LSASS access to stop ongoing credential dumping attempts.
- Change all potentially compromised credentials, especially those with administrative privileges, to prevent unauthorized access.
- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine the scope of the breach.
- Implement enhanced logging policies to capture detailed process creation and access events, focusing on LSASS and seclogon.dll interactions.
- Integrate endpoint detection and response (EDR) solutions to monitor for similar suspicious activities and improve threat visibility.
- Restore the system to a known good state by reimaging the affected machine and applying the latest security patches and updates.
- Conduct a post-incident review to identify gaps in security controls and update the incident response plan accordingly.
- Implement hardening measures such as disabling unnecessary services, enforcing least privilege access, and using multi-factor authentication to reduce the attack surface."""


[[rule.threat]]
framework = "MITRE ATT&CK"
[[rule.threat.technique]]
id = "T1003"
name = "OS Credential Dumping"
reference = "https://attack.mitre.org/techniques/T1003/"
[[rule.threat.technique.subtechnique]]
id = "T1003.001"
name = "LSASS Memory"
reference = "https://attack.mitre.org/techniques/T1003/001/"



[rule.threat.tactic]
id = "TA0006"
name = "Credential Access"
reference = "https://attack.mitre.org/tactics/TA0006/"

