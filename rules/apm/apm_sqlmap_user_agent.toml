[metadata]
creation_date = "2020/02/18"
integration = ["apm"]
maturity = "production"
updated_date = "2025/01/08"

[rule]
author = ["Elastic"]
description = """
This is an example of how to detect an unwanted web client user agent. This search matches the user agent for sqlmap
1.3.11, which is a popular FOSS tool for testing web applications for SQL injection vulnerabilities.
"""
false_positives = [
    """
    This rule does not indicate that a SQL injection attack occurred, only that the `sqlmap` tool was used. Security
    scans and tests may result in these errors. If the source is not an authorized security tester, this is generally
    suspicious or malicious activity.
    """,
]
index = ["apm-*-transaction*", "traces-apm*"]
language = "kuery"
license = "Elastic License v2"
name = "Web Application Suspicious Activity: sqlmap User Agent"
references = ["http://sqlmap.org/"]
risk_score = 47
rule_id = "d49cc73f-7a16-4def-89ce-9fc7127d7820"
severity = "medium"
tags = ["Data Source: APM"]
timestamp_override = "event.ingested"
type = "query"

query = '''
user_agent.original:"sqlmap/1.3.11#stable (http://sqlmap.org)"
'''
note = """## Triage and analysis

### Disclaimer

This investigation guide was generated using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.

### Investigating Web Application Suspicious Activity: sqlmap User Agent

Sqlmap is a widely-used open-source tool designed to automate the detection and exploitation of SQL injection vulnerabilities in web applications. While beneficial for security testing, adversaries can exploit it to gain unauthorized access to databases. The detection rule identifies suspicious activity by flagging the specific user agent string associated with sqlmap, helping security analysts pinpoint potential misuse.

### Possible investigation steps

- Review the alert details to confirm the presence of the sqlmap user agent string: `sqlmap/1.3.11#stable (http://sqlmap.org)` in the `user_agent.original` field.
- Correlate the timestamp of the alert with web server logs to identify the source IP address and any associated requests.
- Investigate the source IP address to determine if it is known for malicious activity or if it belongs to a legitimate user or organization.
- Examine the request URL and parameters in the web server logs to identify any potential SQL injection attempts or unusual patterns.
- Check for any other user agents or unusual activity from the same IP address around the time of the alert to identify patterns of behavior.
- Use Osquery to gather additional context on the system that received the request. For example, run the following Osquery query to list recent web server access logs:
  ```sql
  SELECT * FROM apache_access WHERE user_agent = 'sqlmap/1.3.11#stable (http://sqlmap.org)';
  ```
- Investigate any database logs or alerts for suspicious queries or access patterns that coincide with the time of the alert.
- Review any recent changes or updates to the web application that might have introduced vulnerabilities or altered security configurations.
- Check for any other alerts or incidents involving the same user agent or IP address across different systems or applications.
- Consult threat intelligence sources to determine if there are any known campaigns or threat actors currently using sqlmap for malicious purposes.

### False positive analysis

- Legitimate security teams or developers may use sqlmap for authorized penetration testing, leading to false positives when the tool is used in a controlled environment.
- Automated security scans or vulnerability assessments conducted by third-party services might trigger the rule if sqlmap is part of their testing suite.
- To manage these false positives, organizations can create exceptions for known IP addresses or user agents associated with authorized security testing activities.
- Implementing a whitelist of IP addresses or user agents for trusted security tools can help reduce noise and focus on genuine threats.
- Regularly review and update the list of exceptions to ensure that only current and authorized activities are excluded from alerts.

### Response and remediation

- Immediately block the IP address associated with the suspicious sqlmap user agent activity to prevent further unauthorized access attempts.
- Conduct a thorough investigation of the affected web application logs to identify any successful SQL injection attempts and assess the extent of potential data exposure.
- Review and update web application firewall (WAF) rules to detect and block SQL injection attempts more effectively.
- Escalate the incident to the security operations center (SOC) for further analysis and to determine if the activity is part of a larger attack campaign.
- Implement enhanced logging policies to capture detailed user agent strings and other relevant HTTP request headers for future analysis.
- Integrate threat intelligence feeds to correlate detected sqlmap activity with known malicious IP addresses and attack patterns.
- Restore any compromised databases from the most recent clean backup and ensure that all patches and updates are applied to the database management system.
- Conduct a security review of the web application code to identify and remediate any SQL injection vulnerabilities.
- Educate development and operations teams on secure coding practices and the importance of input validation to prevent SQL injection attacks.
- Consider deploying additional security measures such as intrusion detection systems (IDS) and regular vulnerability assessments to strengthen the overall security posture."""

