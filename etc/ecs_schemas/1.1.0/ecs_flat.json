{
  "@timestamp": {
    "description": "Date/time when the event originated.\nThis is the date/time extracted from the event, typically representing when the event was generated by the source.\nIf the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.\nRequired field for all events.",
    "example": "2016-05-23T08:05:34.853Z",
    "flat_name": "@timestamp",
    "level": "core",
    "name": "@timestamp",
    "order": 0,
    "required": true,
    "short": "Date/time when the event originated.",
    "type": "date"
  },
  "agent.ephemeral_id": {
    "description": "Ephemeral identifier of this agent (if one exists).\nThis id normally changes across restarts, but `agent.id` does not.",
    "example": "8a4f500f",
    "flat_name": "agent.ephemeral_id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "ephemeral_id",
    "order": 4,
    "short": "Ephemeral identifier of this agent.",
    "type": "keyword"
  },
  "agent.id": {
    "description": "Unique identifier of this agent (if one exists).\nExample: For Beats this would be beat.id.",
    "example": "8a4f500d",
    "flat_name": "agent.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 3,
    "short": "Unique identifier of this agent.",
    "type": "keyword"
  },
  "agent.name": {
    "description": "Custom name of the agent.\nThis is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.\nIf no name is given, the name is often left empty.",
    "example": "foo",
    "flat_name": "agent.name",
    "ignore_above": 1024,
    "level": "core",
    "name": "name",
    "order": 1,
    "short": "Custom name of the agent.",
    "type": "keyword"
  },
  "agent.type": {
    "description": "Type of the agent.\nThe agent type stays always the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.",
    "example": "filebeat",
    "flat_name": "agent.type",
    "ignore_above": 1024,
    "level": "core",
    "name": "type",
    "order": 2,
    "short": "Type of the agent.",
    "type": "keyword"
  },
  "agent.version": {
    "description": "Version of the agent.",
    "example": "6.0.0-rc2",
    "flat_name": "agent.version",
    "ignore_above": 1024,
    "level": "core",
    "name": "version",
    "order": 0,
    "short": "Version of the agent.",
    "type": "keyword"
  },
  "as.number": {
    "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.",
    "example": 15169,
    "flat_name": "as.number",
    "level": "extended",
    "name": "number",
    "order": 0,
    "short": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.",
    "type": "long"
  },
  "as.organization.name": {
    "description": "Organization name.",
    "example": "Google LLC",
    "flat_name": "as.organization.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "organization.name",
    "order": 1,
    "short": "Organization name.",
    "type": "keyword"
  },
  "client.address": {
    "description": "Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is.",
    "flat_name": "client.address",
    "ignore_above": 1024,
    "level": "extended",
    "name": "address",
    "order": 0,
    "short": "Client network address.",
    "type": "keyword"
  },
  "client.as.number": {
    "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.",
    "example": 15169,
    "flat_name": "client.as.number",
    "level": "extended",
    "name": "number",
    "order": 0,
    "original_fieldset": "as",
    "short": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.",
    "type": "long"
  },
  "client.as.organization.name": {
    "description": "Organization name.",
    "example": "Google LLC",
    "flat_name": "client.as.organization.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "organization.name",
    "order": 1,
    "original_fieldset": "as",
    "short": "Organization name.",
    "type": "keyword"
  },
  "client.bytes": {
    "description": "Bytes sent from the client to the server.",
    "example": 184,
    "flat_name": "client.bytes",
    "format": "bytes",
    "level": "core",
    "name": "bytes",
    "order": 5,
    "short": "Bytes sent from the client to the server.",
    "type": "long"
  },
  "client.domain": {
    "description": "Client domain.",
    "flat_name": "client.domain",
    "ignore_above": 1024,
    "level": "core",
    "name": "domain",
    "order": 4,
    "short": "Client domain.",
    "type": "keyword"
  },
  "client.geo.city_name": {
    "description": "City name.",
    "example": "Montreal",
    "flat_name": "client.geo.city_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "city_name",
    "order": 4,
    "original_fieldset": "geo",
    "short": "City name.",
    "type": "keyword"
  },
  "client.geo.continent_name": {
    "description": "Name of the continent.",
    "example": "North America",
    "flat_name": "client.geo.continent_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "continent_name",
    "order": 1,
    "original_fieldset": "geo",
    "short": "Name of the continent.",
    "type": "keyword"
  },
  "client.geo.country_iso_code": {
    "description": "Country ISO code.",
    "example": "CA",
    "flat_name": "client.geo.country_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_iso_code",
    "order": 5,
    "original_fieldset": "geo",
    "short": "Country ISO code.",
    "type": "keyword"
  },
  "client.geo.country_name": {
    "description": "Country name.",
    "example": "Canada",
    "flat_name": "client.geo.country_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_name",
    "order": 2,
    "original_fieldset": "geo",
    "short": "Country name.",
    "type": "keyword"
  },
  "client.geo.location": {
    "description": "Longitude and latitude.",
    "example": "{ \"lon\": -73.614830, \"lat\": 45.505918 }",
    "flat_name": "client.geo.location",
    "level": "core",
    "name": "location",
    "order": 0,
    "original_fieldset": "geo",
    "short": "Longitude and latitude.",
    "type": "geo_point"
  },
  "client.geo.name": {
    "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.",
    "example": "boston-dc",
    "flat_name": "client.geo.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 7,
    "original_fieldset": "geo",
    "short": "User-defined description of a location.",
    "type": "keyword"
  },
  "client.geo.region_iso_code": {
    "description": "Region ISO code.",
    "example": "CA-QC",
    "flat_name": "client.geo.region_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_iso_code",
    "order": 6,
    "original_fieldset": "geo",
    "short": "Region ISO code.",
    "type": "keyword"
  },
  "client.geo.region_name": {
    "description": "Region name.",
    "example": "Quebec",
    "flat_name": "client.geo.region_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_name",
    "order": 3,
    "original_fieldset": "geo",
    "short": "Region name.",
    "type": "keyword"
  },
  "client.ip": {
    "description": "IP address of the client.\nCan be one or multiple IPv4 or IPv6 addresses.",
    "flat_name": "client.ip",
    "level": "core",
    "name": "ip",
    "order": 1,
    "short": "IP address of the client.",
    "type": "ip"
  },
  "client.mac": {
    "description": "MAC address of the client.",
    "flat_name": "client.mac",
    "ignore_above": 1024,
    "level": "core",
    "name": "mac",
    "order": 3,
    "short": "MAC address of the client.",
    "type": "keyword"
  },
  "client.nat.ip": {
    "description": "Translated IP of source based NAT sessions (e.g. internal client to internet).\nTypically connections traversing load balancers, firewalls, or routers.",
    "flat_name": "client.nat.ip",
    "level": "extended",
    "name": "nat.ip",
    "order": 7,
    "short": "Client NAT ip address",
    "type": "ip"
  },
  "client.nat.port": {
    "description": "Translated port of source based NAT sessions (e.g. internal client to internet).\nTypically connections traversing load balancers, firewalls, or routers.",
    "flat_name": "client.nat.port",
    "format": "string",
    "level": "extended",
    "name": "nat.port",
    "order": 8,
    "short": "Client NAT port",
    "type": "long"
  },
  "client.packets": {
    "description": "Packets sent from the client to the server.",
    "example": 12,
    "flat_name": "client.packets",
    "level": "core",
    "name": "packets",
    "order": 6,
    "short": "Packets sent from the client to the server.",
    "type": "long"
  },
  "client.port": {
    "description": "Port of the client.",
    "flat_name": "client.port",
    "format": "string",
    "level": "core",
    "name": "port",
    "order": 2,
    "short": "Port of the client.",
    "type": "long"
  },
  "client.user.domain": {
    "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.",
    "flat_name": "client.user.domain",
    "ignore_above": 1024,
    "level": "extended",
    "name": "domain",
    "order": 5,
    "original_fieldset": "user",
    "short": "Name of the directory the user is a member of.",
    "type": "keyword"
  },
  "client.user.email": {
    "description": "User email address.",
    "flat_name": "client.user.email",
    "ignore_above": 1024,
    "level": "extended",
    "name": "email",
    "order": 3,
    "original_fieldset": "user",
    "short": "User email address.",
    "type": "keyword"
  },
  "client.user.full_name": {
    "description": "User's full name, if available.",
    "example": "Albert Einstein",
    "flat_name": "client.user.full_name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full_name",
    "order": 2,
    "original_fieldset": "user",
    "short": "User's full name, if available.",
    "type": "keyword"
  },
  "client.user.group.id": {
    "description": "Unique identifier for the group on the system/platform.",
    "flat_name": "client.user.group.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "id",
    "order": 0,
    "original_fieldset": "user",
    "short": "Unique identifier for the group on the system/platform.",
    "type": "keyword"
  },
  "client.user.group.name": {
    "description": "Name of the group.",
    "flat_name": "client.user.group.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "original_fieldset": "user",
    "short": "Name of the group.",
    "type": "keyword"
  },
  "client.user.hash": {
    "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.",
    "flat_name": "client.user.hash",
    "ignore_above": 1024,
    "level": "extended",
    "name": "hash",
    "order": 4,
    "original_fieldset": "user",
    "short": "Unique user hash to correlate information for a user in anonymized form.",
    "type": "keyword"
  },
  "client.user.id": {
    "description": "One or multiple unique identifiers of the user.",
    "flat_name": "client.user.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 0,
    "original_fieldset": "user",
    "short": "One or multiple unique identifiers of the user.",
    "type": "keyword"
  },
  "client.user.name": {
    "description": "Short name or login of the user.",
    "example": "albert",
    "flat_name": "client.user.name",
    "ignore_above": 1024,
    "level": "core",
    "name": "name",
    "order": 1,
    "original_fieldset": "user",
    "short": "Short name or login of the user.",
    "type": "keyword"
  },
  "cloud.account.id": {
    "description": "The cloud account or organization id used to identify different entities in a multi-tenant environment.\nExamples: AWS account id, Google Cloud ORG Id, or other unique identifier.",
    "example": 666777888999,
    "flat_name": "cloud.account.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "account.id",
    "order": 6,
    "short": "The cloud account or organization id.",
    "type": "keyword"
  },
  "cloud.availability_zone": {
    "description": "Availability zone in which this host is running.",
    "example": "us-east-1c",
    "flat_name": "cloud.availability_zone",
    "ignore_above": 1024,
    "level": "extended",
    "name": "availability_zone",
    "order": 1,
    "short": "Availability zone in which this host is running.",
    "type": "keyword"
  },
  "cloud.instance.id": {
    "description": "Instance ID of the host machine.",
    "example": "i-1234567890abcdef0",
    "flat_name": "cloud.instance.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "instance.id",
    "order": 3,
    "short": "Instance ID of the host machine.",
    "type": "keyword"
  },
  "cloud.instance.name": {
    "description": "Instance name of the host machine.",
    "flat_name": "cloud.instance.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "instance.name",
    "order": 4,
    "short": "Instance name of the host machine.",
    "type": "keyword"
  },
  "cloud.machine.type": {
    "description": "Machine type of the host machine.",
    "example": "t2.medium",
    "flat_name": "cloud.machine.type",
    "ignore_above": 1024,
    "level": "extended",
    "name": "machine.type",
    "order": 5,
    "short": "Machine type of the host machine.",
    "type": "keyword"
  },
  "cloud.provider": {
    "description": "Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.",
    "example": "aws",
    "flat_name": "cloud.provider",
    "ignore_above": 1024,
    "level": "extended",
    "name": "provider",
    "order": 0,
    "short": "Name of the cloud provider.",
    "type": "keyword"
  },
  "cloud.region": {
    "description": "Region in which this host is running.",
    "example": "us-east-1",
    "flat_name": "cloud.region",
    "ignore_above": 1024,
    "level": "extended",
    "name": "region",
    "order": 2,
    "short": "Region in which this host is running.",
    "type": "keyword"
  },
  "container.id": {
    "description": "Unique container id.",
    "flat_name": "container.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 1,
    "short": "Unique container id.",
    "type": "keyword"
  },
  "container.image.name": {
    "description": "Name of the image the container was built on.",
    "flat_name": "container.image.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "image.name",
    "order": 2,
    "short": "Name of the image the container was built on.",
    "type": "keyword"
  },
  "container.image.tag": {
    "description": "Container image tag.",
    "flat_name": "container.image.tag",
    "ignore_above": 1024,
    "level": "extended",
    "name": "image.tag",
    "order": 3,
    "short": "Container image tag.",
    "type": "keyword"
  },
  "container.labels": {
    "description": "Image labels.",
    "flat_name": "container.labels",
    "level": "extended",
    "name": "labels",
    "object_type": "keyword",
    "order": 5,
    "short": "Image labels.",
    "type": "object"
  },
  "container.name": {
    "description": "Container name.",
    "flat_name": "container.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 4,
    "short": "Container name.",
    "type": "keyword"
  },
  "container.runtime": {
    "description": "Runtime managing this container.",
    "example": "docker",
    "flat_name": "container.runtime",
    "ignore_above": 1024,
    "level": "extended",
    "name": "runtime",
    "order": 0,
    "short": "Runtime managing this container.",
    "type": "keyword"
  },
  "destination.address": {
    "description": "Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is.",
    "flat_name": "destination.address",
    "ignore_above": 1024,
    "level": "extended",
    "name": "address",
    "order": 0,
    "short": "Destination network address.",
    "type": "keyword"
  },
  "destination.as.number": {
    "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.",
    "example": 15169,
    "flat_name": "destination.as.number",
    "level": "extended",
    "name": "number",
    "order": 0,
    "original_fieldset": "as",
    "short": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.",
    "type": "long"
  },
  "destination.as.organization.name": {
    "description": "Organization name.",
    "example": "Google LLC",
    "flat_name": "destination.as.organization.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "organization.name",
    "order": 1,
    "original_fieldset": "as",
    "short": "Organization name.",
    "type": "keyword"
  },
  "destination.bytes": {
    "description": "Bytes sent from the destination to the source.",
    "example": 184,
    "flat_name": "destination.bytes",
    "format": "bytes",
    "level": "core",
    "name": "bytes",
    "order": 5,
    "short": "Bytes sent from the destination to the source.",
    "type": "long"
  },
  "destination.domain": {
    "description": "Destination domain.",
    "flat_name": "destination.domain",
    "ignore_above": 1024,
    "level": "core",
    "name": "domain",
    "order": 4,
    "short": "Destination domain.",
    "type": "keyword"
  },
  "destination.geo.city_name": {
    "description": "City name.",
    "example": "Montreal",
    "flat_name": "destination.geo.city_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "city_name",
    "order": 4,
    "original_fieldset": "geo",
    "short": "City name.",
    "type": "keyword"
  },
  "destination.geo.continent_name": {
    "description": "Name of the continent.",
    "example": "North America",
    "flat_name": "destination.geo.continent_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "continent_name",
    "order": 1,
    "original_fieldset": "geo",
    "short": "Name of the continent.",
    "type": "keyword"
  },
  "destination.geo.country_iso_code": {
    "description": "Country ISO code.",
    "example": "CA",
    "flat_name": "destination.geo.country_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_iso_code",
    "order": 5,
    "original_fieldset": "geo",
    "short": "Country ISO code.",
    "type": "keyword"
  },
  "destination.geo.country_name": {
    "description": "Country name.",
    "example": "Canada",
    "flat_name": "destination.geo.country_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_name",
    "order": 2,
    "original_fieldset": "geo",
    "short": "Country name.",
    "type": "keyword"
  },
  "destination.geo.location": {
    "description": "Longitude and latitude.",
    "example": "{ \"lon\": -73.614830, \"lat\": 45.505918 }",
    "flat_name": "destination.geo.location",
    "level": "core",
    "name": "location",
    "order": 0,
    "original_fieldset": "geo",
    "short": "Longitude and latitude.",
    "type": "geo_point"
  },
  "destination.geo.name": {
    "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.",
    "example": "boston-dc",
    "flat_name": "destination.geo.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 7,
    "original_fieldset": "geo",
    "short": "User-defined description of a location.",
    "type": "keyword"
  },
  "destination.geo.region_iso_code": {
    "description": "Region ISO code.",
    "example": "CA-QC",
    "flat_name": "destination.geo.region_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_iso_code",
    "order": 6,
    "original_fieldset": "geo",
    "short": "Region ISO code.",
    "type": "keyword"
  },
  "destination.geo.region_name": {
    "description": "Region name.",
    "example": "Quebec",
    "flat_name": "destination.geo.region_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_name",
    "order": 3,
    "original_fieldset": "geo",
    "short": "Region name.",
    "type": "keyword"
  },
  "destination.ip": {
    "description": "IP address of the destination.\nCan be one or multiple IPv4 or IPv6 addresses.",
    "flat_name": "destination.ip",
    "level": "core",
    "name": "ip",
    "order": 1,
    "short": "IP address of the destination.",
    "type": "ip"
  },
  "destination.mac": {
    "description": "MAC address of the destination.",
    "flat_name": "destination.mac",
    "ignore_above": 1024,
    "level": "core",
    "name": "mac",
    "order": 3,
    "short": "MAC address of the destination.",
    "type": "keyword"
  },
  "destination.nat.ip": {
    "description": "Translated ip of destination based NAT sessions (e.g. internet to private DMZ)\nTypically used with load balancers, firewalls, or routers.",
    "flat_name": "destination.nat.ip",
    "level": "extended",
    "name": "nat.ip",
    "order": 7,
    "short": "Destination NAT ip",
    "type": "ip"
  },
  "destination.nat.port": {
    "description": "Port the source session is translated to by NAT Device.\nTypically used with load balancers, firewalls, or routers.",
    "flat_name": "destination.nat.port",
    "format": "string",
    "level": "extended",
    "name": "nat.port",
    "order": 8,
    "short": "Destination NAT Port",
    "type": "long"
  },
  "destination.packets": {
    "description": "Packets sent from the destination to the source.",
    "example": 12,
    "flat_name": "destination.packets",
    "level": "core",
    "name": "packets",
    "order": 6,
    "short": "Packets sent from the destination to the source.",
    "type": "long"
  },
  "destination.port": {
    "description": "Port of the destination.",
    "flat_name": "destination.port",
    "format": "string",
    "level": "core",
    "name": "port",
    "order": 2,
    "short": "Port of the destination.",
    "type": "long"
  },
  "destination.user.domain": {
    "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.",
    "flat_name": "destination.user.domain",
    "ignore_above": 1024,
    "level": "extended",
    "name": "domain",
    "order": 5,
    "original_fieldset": "user",
    "short": "Name of the directory the user is a member of.",
    "type": "keyword"
  },
  "destination.user.email": {
    "description": "User email address.",
    "flat_name": "destination.user.email",
    "ignore_above": 1024,
    "level": "extended",
    "name": "email",
    "order": 3,
    "original_fieldset": "user",
    "short": "User email address.",
    "type": "keyword"
  },
  "destination.user.full_name": {
    "description": "User's full name, if available.",
    "example": "Albert Einstein",
    "flat_name": "destination.user.full_name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full_name",
    "order": 2,
    "original_fieldset": "user",
    "short": "User's full name, if available.",
    "type": "keyword"
  },
  "destination.user.group.id": {
    "description": "Unique identifier for the group on the system/platform.",
    "flat_name": "destination.user.group.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "id",
    "order": 0,
    "original_fieldset": "user",
    "short": "Unique identifier for the group on the system/platform.",
    "type": "keyword"
  },
  "destination.user.group.name": {
    "description": "Name of the group.",
    "flat_name": "destination.user.group.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "original_fieldset": "user",
    "short": "Name of the group.",
    "type": "keyword"
  },
  "destination.user.hash": {
    "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.",
    "flat_name": "destination.user.hash",
    "ignore_above": 1024,
    "level": "extended",
    "name": "hash",
    "order": 4,
    "original_fieldset": "user",
    "short": "Unique user hash to correlate information for a user in anonymized form.",
    "type": "keyword"
  },
  "destination.user.id": {
    "description": "One or multiple unique identifiers of the user.",
    "flat_name": "destination.user.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 0,
    "original_fieldset": "user",
    "short": "One or multiple unique identifiers of the user.",
    "type": "keyword"
  },
  "destination.user.name": {
    "description": "Short name or login of the user.",
    "example": "albert",
    "flat_name": "destination.user.name",
    "ignore_above": 1024,
    "level": "core",
    "name": "name",
    "order": 1,
    "original_fieldset": "user",
    "short": "Short name or login of the user.",
    "type": "keyword"
  },
  "dns.answers": {
    "description": "An array containing an object for each answer section returned by the server.\nThe main keys that should be present in these objects are defined by ECS. Records that have more information may contain more keys than what ECS defines.\nNot all DNS data sources give all details about DNS answers. At minimum, answer objects must contain the `data` key. If more information is available, map as much of it to ECS as possible, and add any additional fields to the answer objects as custom fields.",
    "flat_name": "dns.answers",
    "level": "extended",
    "name": "answers",
    "object_type": "keyword",
    "order": 9,
    "short": "Array of DNS answers.",
    "type": "object"
  },
  "dns.answers.class": {
    "description": "The class of DNS data contained in this resource record.",
    "example": "IN",
    "flat_name": "dns.answers.class",
    "ignore_above": 1024,
    "level": "extended",
    "name": "answers.class",
    "order": 12,
    "short": "The class of DNS data contained in this resource record.",
    "type": "keyword"
  },
  "dns.answers.data": {
    "description": "The data describing the resource.\nThe meaning of this data depends on the type and class of the resource record.",
    "example": "10.10.10.10",
    "flat_name": "dns.answers.data",
    "ignore_above": 1024,
    "level": "extended",
    "name": "answers.data",
    "order": 14,
    "short": "The data describing the resource.",
    "type": "keyword"
  },
  "dns.answers.name": {
    "description": "The domain name to which this resource record pertains.\nIf a chain of CNAME is being resolved, each answer's `name` should be the one that corresponds with the answer's `data`. It should not simply be the original `question.name` repeated.",
    "example": "www.google.com",
    "flat_name": "dns.answers.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "answers.name",
    "order": 10,
    "short": "The domain name to which this resource record pertains.",
    "type": "keyword"
  },
  "dns.answers.ttl": {
    "description": "The time interval in seconds that this resource record may be cached before it should be discarded. Zero values mean that the data should not be cached.",
    "example": 180,
    "flat_name": "dns.answers.ttl",
    "level": "extended",
    "name": "answers.ttl",
    "order": 13,
    "short": "The time interval in seconds that this resource record may be cached before it should be discarded. Zero values mean that the data should not be cached.",
    "type": "long"
  },
  "dns.answers.type": {
    "description": "The type of data contained in this resource record.",
    "example": "CNAME",
    "flat_name": "dns.answers.type",
    "ignore_above": 1024,
    "level": "extended",
    "name": "answers.type",
    "order": 11,
    "short": "The type of data contained in this resource record.",
    "type": "keyword"
  },
  "dns.header_flags": {
    "description": "Array of 2 letter DNS header flags.\nExpected values are: AA, TC, RD, RA, AD, CD, DO.",
    "example": [
      "RD",
      "RA"
    ],
    "flat_name": "dns.header_flags",
    "ignore_above": 1024,
    "level": "extended",
    "name": "header_flags",
    "order": 3,
    "short": "Array of DNS header flags.",
    "type": "keyword"
  },
  "dns.id": {
    "description": "The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.",
    "example": 62111,
    "flat_name": "dns.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "id",
    "order": 1,
    "short": "The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.",
    "type": "keyword"
  },
  "dns.op_code": {
    "description": "The DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.",
    "example": "QUERY",
    "flat_name": "dns.op_code",
    "ignore_above": 1024,
    "level": "extended",
    "name": "op_code",
    "order": 2,
    "short": "The DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.",
    "type": "keyword"
  },
  "dns.question.class": {
    "description": "The class of of records being queried.",
    "example": "IN",
    "flat_name": "dns.question.class",
    "ignore_above": 1024,
    "level": "extended",
    "name": "question.class",
    "order": 7,
    "short": "The class of of records being queried.",
    "type": "keyword"
  },
  "dns.question.name": {
    "description": "The name being queried.\nIf the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \\t, \\r, and \\n respectively.",
    "example": "www.google.com",
    "flat_name": "dns.question.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "question.name",
    "order": 5,
    "short": "The name being queried.",
    "type": "keyword"
  },
  "dns.question.registered_domain": {
    "description": "The highest registered domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.google.com\" is \"google.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".",
    "example": "google.com",
    "flat_name": "dns.question.registered_domain",
    "ignore_above": 1024,
    "level": "extended",
    "name": "question.registered_domain",
    "order": 8,
    "short": "The highest registered domain, stripped of the subdomain.",
    "type": "keyword"
  },
  "dns.question.type": {
    "description": "The type of record being queried.",
    "example": "AAAA",
    "flat_name": "dns.question.type",
    "ignore_above": 1024,
    "level": "extended",
    "name": "question.type",
    "order": 6,
    "short": "The type of record being queried.",
    "type": "keyword"
  },
  "dns.resolved_ip": {
    "description": "Array containing all IPs seen in `answers.data`.\nThe `answers` array can be difficult to use, because of the variety of data formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip` makes it possible to index them as IP addresses, and makes them easier to visualize and query for.",
    "example": [
      "10.10.10.10",
      "10.10.10.11"
    ],
    "flat_name": "dns.resolved_ip",
    "level": "extended",
    "name": "resolved_ip",
    "order": 15,
    "short": "Array containing all IPs seen in answers.data",
    "type": "ip"
  },
  "dns.response_code": {
    "description": "The DNS response code.",
    "example": "NOERROR",
    "flat_name": "dns.response_code",
    "ignore_above": 1024,
    "level": "extended",
    "name": "response_code",
    "order": 4,
    "short": "The DNS response code.",
    "type": "keyword"
  },
  "dns.type": {
    "description": "The type of DNS event captured, query or answer.\nIf your source of DNS events only gives you DNS queries, you should only create dns events of type `dns.type:query`.\nIf your source of DNS events gives you answers as well, you should create one event per query (optionally as soon as the query is seen). And a second event containing all query details as well as an array of answers.",
    "example": "answer",
    "flat_name": "dns.type",
    "ignore_above": 1024,
    "level": "extended",
    "name": "type",
    "order": 0,
    "short": "The type of DNS event captured, query or answer.",
    "type": "keyword"
  },
  "ecs.version": {
    "description": "ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.\nWhen querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.",
    "example": "1.0.0",
    "flat_name": "ecs.version",
    "ignore_above": 1024,
    "level": "core",
    "name": "version",
    "order": 0,
    "required": true,
    "short": "ECS version this event conforms to.",
    "type": "keyword"
  },
  "error.code": {
    "description": "Error code describing the error.",
    "flat_name": "error.code",
    "ignore_above": 1024,
    "level": "core",
    "name": "code",
    "order": 2,
    "short": "Error code describing the error.",
    "type": "keyword"
  },
  "error.id": {
    "description": "Unique identifier for the error.",
    "flat_name": "error.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 0,
    "short": "Unique identifier for the error.",
    "type": "keyword"
  },
  "error.message": {
    "description": "Error message.",
    "flat_name": "error.message",
    "level": "core",
    "name": "message",
    "norms": false,
    "order": 1,
    "short": "Error message.",
    "type": "text"
  },
  "event.action": {
    "description": "The action captured by the event.\nThis describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.",
    "example": "user-password-change",
    "flat_name": "event.action",
    "ignore_above": 1024,
    "level": "core",
    "name": "action",
    "order": 4,
    "short": "The action captured by the event.",
    "type": "keyword"
  },
  "event.category": {
    "description": "Event category.\nThis contains high-level information about the contents of the event. It is more generic than `event.action`, in the sense that typically a category contains multiple actions. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.",
    "example": "user-management",
    "flat_name": "event.category",
    "ignore_above": 1024,
    "level": "core",
    "name": "category",
    "order": 3,
    "short": "Event category.",
    "type": "keyword"
  },
  "event.code": {
    "description": "Identification code for this event, if one exists.\nSome event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.",
    "example": 4648,
    "flat_name": "event.code",
    "ignore_above": 1024,
    "level": "extended",
    "name": "code",
    "order": 1,
    "short": "Identification code for this event.",
    "type": "keyword"
  },
  "event.created": {
    "description": "event.created contains the date/time when the event was first read by an agent, or by your pipeline.\nThis field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.\nIn most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.\nIn case the two timestamps are identical, @timestamp should be used.",
    "flat_name": "event.created",
    "level": "core",
    "name": "created",
    "order": 16,
    "short": "Time when the event was first read by an agent or by your pipeline.",
    "type": "date"
  },
  "event.dataset": {
    "description": "Name of the dataset.\nIf an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.\nIt's recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.",
    "example": "apache.access",
    "flat_name": "event.dataset",
    "ignore_above": 1024,
    "level": "core",
    "name": "dataset",
    "order": 8,
    "short": "Name of the dataset.",
    "type": "keyword"
  },
  "event.duration": {
    "description": "Duration of the event in nanoseconds.\nIf event.start and event.end are known this value should be the difference between the end and start time.",
    "flat_name": "event.duration",
    "format": "duration",
    "input_format": "nanoseconds",
    "level": "core",
    "name": "duration",
    "order": 13,
    "output_format": "asMilliseconds",
    "output_precision": 1,
    "short": "Duration of the event in nanoseconds.",
    "type": "long"
  },
  "event.end": {
    "description": "event.end contains the date when the event ended or when the activity was last observed.",
    "flat_name": "event.end",
    "level": "extended",
    "name": "end",
    "order": 18,
    "short": "event.end contains the date when the event ended or when the activity was last observed.",
    "type": "date"
  },
  "event.hash": {
    "description": "Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.",
    "example": "123456789012345678901234567890ABCD",
    "flat_name": "event.hash",
    "ignore_above": 1024,
    "level": "extended",
    "name": "hash",
    "order": 12,
    "short": "Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.",
    "type": "keyword"
  },
  "event.id": {
    "description": "Unique ID to describe the event.",
    "example": "8a4f500d",
    "flat_name": "event.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 0,
    "short": "Unique ID to describe the event.",
    "type": "keyword"
  },
  "event.kind": {
    "description": "The kind of the event.\nThis gives information about what type of information the event contains, without being specific to the contents of the event.  Examples are `event`, `state`, `alarm`. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.",
    "example": "state",
    "flat_name": "event.kind",
    "ignore_above": 1024,
    "level": "extended",
    "name": "kind",
    "order": 2,
    "short": "The kind of the event.",
    "type": "keyword"
  },
  "event.module": {
    "description": "Name of the module this data is coming from.\nIf your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.",
    "example": "apache",
    "flat_name": "event.module",
    "ignore_above": 1024,
    "level": "core",
    "name": "module",
    "order": 7,
    "short": "Name of the module this data is coming from.",
    "type": "keyword"
  },
  "event.original": {
    "description": "Raw text message of entire event. Used to demonstrate log integrity.\nThis field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`.",
    "doc_values": false,
    "example": "Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232",
    "flat_name": "event.original",
    "ignore_above": 1024,
    "index": false,
    "level": "core",
    "name": "original",
    "order": 11,
    "short": "Raw text message of entire event.",
    "type": "keyword"
  },
  "event.outcome": {
    "description": "The outcome of the event.\nIf the event describes an action, this fields contains the outcome of that action. Examples outcomes are `success` and `failure`. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.",
    "example": "success",
    "flat_name": "event.outcome",
    "ignore_above": 1024,
    "level": "extended",
    "name": "outcome",
    "order": 5,
    "short": "The outcome of the event.",
    "type": "keyword"
  },
  "event.provider": {
    "description": "Source of the event.\nEvent transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).",
    "example": "kernel",
    "flat_name": "event.provider",
    "ignore_above": 1024,
    "level": "extended",
    "name": "provider",
    "order": 9,
    "short": "Source of the event.",
    "type": "keyword"
  },
  "event.risk_score": {
    "description": "Risk score or priority of the event (e.g. security solutions). Use your system's original value here.",
    "flat_name": "event.risk_score",
    "level": "core",
    "name": "risk_score",
    "order": 19,
    "short": "Risk score or priority of the event (e.g. security solutions). Use your system's original value here.",
    "type": "float"
  },
  "event.risk_score_norm": {
    "description": "Normalized risk score or priority of the event, on a scale of 0 to 100.\nThis is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.",
    "flat_name": "event.risk_score_norm",
    "level": "extended",
    "name": "risk_score_norm",
    "order": 20,
    "short": "Normalized risk score or priority of the event (0-100).",
    "type": "float"
  },
  "event.sequence": {
    "description": "Sequence number of the event.\nThe sequence number is a value published by some event sources, to make the exact ordering of events unambiguous, regarless of the timestamp precision.",
    "flat_name": "event.sequence",
    "format": "string",
    "level": "extended",
    "name": "sequence",
    "order": 14,
    "short": "Sequence number of the event.",
    "type": "long"
  },
  "event.severity": {
    "description": "Severity describes the original severity of the event. What the different severity values mean can very different between use cases. It's up to the implementer to make sure severities are consistent across events.",
    "example": "7",
    "flat_name": "event.severity",
    "format": "string",
    "level": "core",
    "name": "severity",
    "order": 10,
    "short": "Original severity of the event.",
    "type": "long"
  },
  "event.start": {
    "description": "event.start contains the date when the event started or when the activity was first observed.",
    "flat_name": "event.start",
    "level": "extended",
    "name": "start",
    "order": 17,
    "short": "event.start contains the date when the event started or when the activity was first observed.",
    "type": "date"
  },
  "event.timezone": {
    "description": "This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.\nAcceptable timezone formats are: a canonical ID (e.g. \"Europe/Amsterdam\"), abbreviated (e.g. \"EST\") or an HH:mm differential (e.g. \"-05:00\").",
    "flat_name": "event.timezone",
    "ignore_above": 1024,
    "level": "extended",
    "name": "timezone",
    "order": 15,
    "short": "Event time zone.",
    "type": "keyword"
  },
  "event.type": {
    "description": "Reserved for future usage.\nPlease avoid using this field for user data.",
    "flat_name": "event.type",
    "ignore_above": 1024,
    "level": "core",
    "name": "type",
    "order": 6,
    "short": "Reserved for future usage.",
    "type": "keyword"
  },
  "file.accessed": {
    "description": "Last time the file was accessed.\nNote that not all filesystems keep track of access time.",
    "flat_name": "file.accessed",
    "level": "extended",
    "name": "accessed",
    "order": 17,
    "short": "Last time the file was accessed.",
    "type": "date"
  },
  "file.created": {
    "description": "File creation time.\nNote that not all filesystems store the creation time.",
    "flat_name": "file.created",
    "level": "extended",
    "name": "created",
    "order": 16,
    "short": "File creation time.",
    "type": "date"
  },
  "file.ctime": {
    "description": "Last time the file attributes or metadata changed.\nNote that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.",
    "flat_name": "file.ctime",
    "level": "extended",
    "name": "ctime",
    "order": 15,
    "short": "Last time the file attributes or metadata changed.",
    "type": "date"
  },
  "file.device": {
    "description": "Device that is the source of the file.",
    "example": "sda",
    "flat_name": "file.device",
    "ignore_above": 1024,
    "level": "extended",
    "name": "device",
    "order": 6,
    "short": "Device that is the source of the file.",
    "type": "keyword"
  },
  "file.directory": {
    "description": "Directory where the file is located.",
    "example": "/home/alice",
    "flat_name": "file.directory",
    "ignore_above": 1024,
    "level": "extended",
    "name": "directory",
    "order": 1,
    "short": "Directory where the file is located.",
    "type": "keyword"
  },
  "file.extension": {
    "description": "File extension.",
    "example": "png",
    "flat_name": "file.extension",
    "ignore_above": 1024,
    "level": "extended",
    "name": "extension",
    "order": 4,
    "short": "File extension.",
    "type": "keyword"
  },
  "file.gid": {
    "description": "Primary group ID (GID) of the file.",
    "example": "1001",
    "flat_name": "file.gid",
    "ignore_above": 1024,
    "level": "extended",
    "name": "gid",
    "order": 10,
    "short": "Primary group ID (GID) of the file.",
    "type": "keyword"
  },
  "file.group": {
    "description": "Primary group name of the file.",
    "example": "alice",
    "flat_name": "file.group",
    "ignore_above": 1024,
    "level": "extended",
    "name": "group",
    "order": 11,
    "short": "Primary group name of the file.",
    "type": "keyword"
  },
  "file.hash.md5": {
    "description": "MD5 hash.",
    "flat_name": "file.hash.md5",
    "ignore_above": 1024,
    "level": "extended",
    "name": "md5",
    "order": 0,
    "original_fieldset": "hash",
    "short": "MD5 hash.",
    "type": "keyword"
  },
  "file.hash.sha1": {
    "description": "SHA1 hash.",
    "flat_name": "file.hash.sha1",
    "ignore_above": 1024,
    "level": "extended",
    "name": "sha1",
    "order": 1,
    "original_fieldset": "hash",
    "short": "SHA1 hash.",
    "type": "keyword"
  },
  "file.hash.sha256": {
    "description": "SHA256 hash.",
    "flat_name": "file.hash.sha256",
    "ignore_above": 1024,
    "level": "extended",
    "name": "sha256",
    "order": 2,
    "original_fieldset": "hash",
    "short": "SHA256 hash.",
    "type": "keyword"
  },
  "file.hash.sha512": {
    "description": "SHA512 hash.",
    "flat_name": "file.hash.sha512",
    "ignore_above": 1024,
    "level": "extended",
    "name": "sha512",
    "order": 3,
    "original_fieldset": "hash",
    "short": "SHA512 hash.",
    "type": "keyword"
  },
  "file.inode": {
    "description": "Inode representing the file in the filesystem.",
    "example": "256383",
    "flat_name": "file.inode",
    "ignore_above": 1024,
    "level": "extended",
    "name": "inode",
    "order": 7,
    "short": "Inode representing the file in the filesystem.",
    "type": "keyword"
  },
  "file.mode": {
    "description": "Mode of the file in octal representation.",
    "example": "0640",
    "flat_name": "file.mode",
    "ignore_above": 1024,
    "level": "extended",
    "name": "mode",
    "order": 12,
    "short": "Mode of the file in octal representation.",
    "type": "keyword"
  },
  "file.mtime": {
    "description": "Last time the file content was modified.",
    "flat_name": "file.mtime",
    "level": "extended",
    "name": "mtime",
    "order": 14,
    "short": "Last time the file content was modified.",
    "type": "date"
  },
  "file.name": {
    "description": "Name of the file including the extension, without the directory.",
    "example": "example.png",
    "flat_name": "file.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 0,
    "short": "Name of the file including the extension, without the directory.",
    "type": "keyword"
  },
  "file.owner": {
    "description": "File owner's username.",
    "example": "alice",
    "flat_name": "file.owner",
    "ignore_above": 1024,
    "level": "extended",
    "name": "owner",
    "order": 9,
    "short": "File owner's username.",
    "type": "keyword"
  },
  "file.path": {
    "description": "Full path to the file.",
    "example": "/home/alice/example.png",
    "flat_name": "file.path",
    "ignore_above": 1024,
    "level": "extended",
    "name": "path",
    "order": 2,
    "short": "Full path to the file.",
    "type": "keyword"
  },
  "file.size": {
    "description": "File size in bytes.\nOnly relevant when `file.type` is \"file\".",
    "example": 16384,
    "flat_name": "file.size",
    "level": "extended",
    "name": "size",
    "order": 13,
    "short": "File size in bytes.",
    "type": "long"
  },
  "file.target_path": {
    "description": "Target path for symlinks.",
    "flat_name": "file.target_path",
    "ignore_above": 1024,
    "level": "extended",
    "name": "target_path",
    "order": 3,
    "short": "Target path for symlinks.",
    "type": "keyword"
  },
  "file.type": {
    "description": "File type (file, dir, or symlink).",
    "example": "file",
    "flat_name": "file.type",
    "ignore_above": 1024,
    "level": "extended",
    "name": "type",
    "order": 5,
    "short": "File type (file, dir, or symlink).",
    "type": "keyword"
  },
  "file.uid": {
    "description": "The user ID (UID) or security identifier (SID) of the file owner.",
    "example": "1001",
    "flat_name": "file.uid",
    "ignore_above": 1024,
    "level": "extended",
    "name": "uid",
    "order": 8,
    "short": "The user ID (UID) or security identifier (SID) of the file owner.",
    "type": "keyword"
  },
  "geo.city_name": {
    "description": "City name.",
    "example": "Montreal",
    "flat_name": "geo.city_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "city_name",
    "order": 4,
    "short": "City name.",
    "type": "keyword"
  },
  "geo.continent_name": {
    "description": "Name of the continent.",
    "example": "North America",
    "flat_name": "geo.continent_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "continent_name",
    "order": 1,
    "short": "Name of the continent.",
    "type": "keyword"
  },
  "geo.country_iso_code": {
    "description": "Country ISO code.",
    "example": "CA",
    "flat_name": "geo.country_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_iso_code",
    "order": 5,
    "short": "Country ISO code.",
    "type": "keyword"
  },
  "geo.country_name": {
    "description": "Country name.",
    "example": "Canada",
    "flat_name": "geo.country_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_name",
    "order": 2,
    "short": "Country name.",
    "type": "keyword"
  },
  "geo.location": {
    "description": "Longitude and latitude.",
    "example": "{ \"lon\": -73.614830, \"lat\": 45.505918 }",
    "flat_name": "geo.location",
    "level": "core",
    "name": "location",
    "order": 0,
    "short": "Longitude and latitude.",
    "type": "geo_point"
  },
  "geo.name": {
    "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.",
    "example": "boston-dc",
    "flat_name": "geo.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 7,
    "short": "User-defined description of a location.",
    "type": "keyword"
  },
  "geo.region_iso_code": {
    "description": "Region ISO code.",
    "example": "CA-QC",
    "flat_name": "geo.region_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_iso_code",
    "order": 6,
    "short": "Region ISO code.",
    "type": "keyword"
  },
  "geo.region_name": {
    "description": "Region name.",
    "example": "Quebec",
    "flat_name": "geo.region_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_name",
    "order": 3,
    "short": "Region name.",
    "type": "keyword"
  },
  "group.id": {
    "description": "Unique identifier for the group on the system/platform.",
    "flat_name": "group.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "id",
    "order": 0,
    "short": "Unique identifier for the group on the system/platform.",
    "type": "keyword"
  },
  "group.name": {
    "description": "Name of the group.",
    "flat_name": "group.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "short": "Name of the group.",
    "type": "keyword"
  },
  "hash.md5": {
    "description": "MD5 hash.",
    "flat_name": "hash.md5",
    "ignore_above": 1024,
    "level": "extended",
    "name": "md5",
    "order": 0,
    "short": "MD5 hash.",
    "type": "keyword"
  },
  "hash.sha1": {
    "description": "SHA1 hash.",
    "flat_name": "hash.sha1",
    "ignore_above": 1024,
    "level": "extended",
    "name": "sha1",
    "order": 1,
    "short": "SHA1 hash.",
    "type": "keyword"
  },
  "hash.sha256": {
    "description": "SHA256 hash.",
    "flat_name": "hash.sha256",
    "ignore_above": 1024,
    "level": "extended",
    "name": "sha256",
    "order": 2,
    "short": "SHA256 hash.",
    "type": "keyword"
  },
  "hash.sha512": {
    "description": "SHA512 hash.",
    "flat_name": "hash.sha512",
    "ignore_above": 1024,
    "level": "extended",
    "name": "sha512",
    "order": 3,
    "short": "SHA512 hash.",
    "type": "keyword"
  },
  "host.architecture": {
    "description": "Operating system architecture.",
    "example": "x86_64",
    "flat_name": "host.architecture",
    "ignore_above": 1024,
    "level": "core",
    "name": "architecture",
    "order": 7,
    "short": "Operating system architecture.",
    "type": "keyword"
  },
  "host.geo.city_name": {
    "description": "City name.",
    "example": "Montreal",
    "flat_name": "host.geo.city_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "city_name",
    "order": 4,
    "original_fieldset": "geo",
    "short": "City name.",
    "type": "keyword"
  },
  "host.geo.continent_name": {
    "description": "Name of the continent.",
    "example": "North America",
    "flat_name": "host.geo.continent_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "continent_name",
    "order": 1,
    "original_fieldset": "geo",
    "short": "Name of the continent.",
    "type": "keyword"
  },
  "host.geo.country_iso_code": {
    "description": "Country ISO code.",
    "example": "CA",
    "flat_name": "host.geo.country_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_iso_code",
    "order": 5,
    "original_fieldset": "geo",
    "short": "Country ISO code.",
    "type": "keyword"
  },
  "host.geo.country_name": {
    "description": "Country name.",
    "example": "Canada",
    "flat_name": "host.geo.country_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_name",
    "order": 2,
    "original_fieldset": "geo",
    "short": "Country name.",
    "type": "keyword"
  },
  "host.geo.location": {
    "description": "Longitude and latitude.",
    "example": "{ \"lon\": -73.614830, \"lat\": 45.505918 }",
    "flat_name": "host.geo.location",
    "level": "core",
    "name": "location",
    "order": 0,
    "original_fieldset": "geo",
    "short": "Longitude and latitude.",
    "type": "geo_point"
  },
  "host.geo.name": {
    "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.",
    "example": "boston-dc",
    "flat_name": "host.geo.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 7,
    "original_fieldset": "geo",
    "short": "User-defined description of a location.",
    "type": "keyword"
  },
  "host.geo.region_iso_code": {
    "description": "Region ISO code.",
    "example": "CA-QC",
    "flat_name": "host.geo.region_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_iso_code",
    "order": 6,
    "original_fieldset": "geo",
    "short": "Region ISO code.",
    "type": "keyword"
  },
  "host.geo.region_name": {
    "description": "Region name.",
    "example": "Quebec",
    "flat_name": "host.geo.region_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_name",
    "order": 3,
    "original_fieldset": "geo",
    "short": "Region name.",
    "type": "keyword"
  },
  "host.hostname": {
    "description": "Hostname of the host.\nIt normally contains what the `hostname` command returns on the host machine.",
    "flat_name": "host.hostname",
    "ignore_above": 1024,
    "level": "core",
    "name": "hostname",
    "order": 0,
    "short": "Hostname of the host.",
    "type": "keyword"
  },
  "host.id": {
    "description": "Unique host id.\nAs hostname is not always unique, use values that are meaningful in your environment.\nExample: The current usage of `beat.name`.",
    "flat_name": "host.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 2,
    "short": "Unique host id.",
    "type": "keyword"
  },
  "host.ip": {
    "description": "Host ip address.",
    "flat_name": "host.ip",
    "level": "core",
    "name": "ip",
    "order": 3,
    "short": "Host ip address.",
    "type": "ip"
  },
  "host.mac": {
    "description": "Host mac address.",
    "flat_name": "host.mac",
    "ignore_above": 1024,
    "level": "core",
    "name": "mac",
    "order": 4,
    "short": "Host mac address.",
    "type": "keyword"
  },
  "host.name": {
    "description": "Name of the host.\nIt can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.",
    "flat_name": "host.name",
    "ignore_above": 1024,
    "level": "core",
    "name": "name",
    "order": 1,
    "short": "Name of the host.",
    "type": "keyword"
  },
  "host.os.family": {
    "description": "OS family (such as redhat, debian, freebsd, windows).",
    "example": "debian",
    "flat_name": "host.os.family",
    "ignore_above": 1024,
    "level": "extended",
    "name": "family",
    "order": 3,
    "original_fieldset": "os",
    "short": "OS family (such as redhat, debian, freebsd, windows).",
    "type": "keyword"
  },
  "host.os.full": {
    "description": "Operating system name, including the version or code name.",
    "example": "Mac OS Mojave",
    "flat_name": "host.os.full",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full",
    "order": 2,
    "original_fieldset": "os",
    "short": "Operating system name, including the version or code name.",
    "type": "keyword"
  },
  "host.os.kernel": {
    "description": "Operating system kernel version as a raw string.",
    "example": "4.4.0-112-generic",
    "flat_name": "host.os.kernel",
    "ignore_above": 1024,
    "level": "extended",
    "name": "kernel",
    "order": 5,
    "original_fieldset": "os",
    "short": "Operating system kernel version as a raw string.",
    "type": "keyword"
  },
  "host.os.name": {
    "description": "Operating system name, without the version.",
    "example": "Mac OS X",
    "flat_name": "host.os.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "original_fieldset": "os",
    "short": "Operating system name, without the version.",
    "type": "keyword"
  },
  "host.os.platform": {
    "description": "Operating system platform (such centos, ubuntu, windows).",
    "example": "darwin",
    "flat_name": "host.os.platform",
    "ignore_above": 1024,
    "level": "extended",
    "name": "platform",
    "order": 0,
    "original_fieldset": "os",
    "short": "Operating system platform (such centos, ubuntu, windows).",
    "type": "keyword"
  },
  "host.os.version": {
    "description": "Operating system version as a raw string.",
    "example": "10.14.1",
    "flat_name": "host.os.version",
    "ignore_above": 1024,
    "level": "extended",
    "name": "version",
    "order": 4,
    "original_fieldset": "os",
    "short": "Operating system version as a raw string.",
    "type": "keyword"
  },
  "host.type": {
    "description": "Type of host.\nFor Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.",
    "flat_name": "host.type",
    "ignore_above": 1024,
    "level": "core",
    "name": "type",
    "order": 5,
    "short": "Type of host.",
    "type": "keyword"
  },
  "host.uptime": {
    "description": "Seconds the host has been up.",
    "example": 1325,
    "flat_name": "host.uptime",
    "level": "extended",
    "name": "uptime",
    "order": 6,
    "short": "Seconds the host has been up.",
    "type": "long"
  },
  "host.user.domain": {
    "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.",
    "flat_name": "host.user.domain",
    "ignore_above": 1024,
    "level": "extended",
    "name": "domain",
    "order": 5,
    "original_fieldset": "user",
    "short": "Name of the directory the user is a member of.",
    "type": "keyword"
  },
  "host.user.email": {
    "description": "User email address.",
    "flat_name": "host.user.email",
    "ignore_above": 1024,
    "level": "extended",
    "name": "email",
    "order": 3,
    "original_fieldset": "user",
    "short": "User email address.",
    "type": "keyword"
  },
  "host.user.full_name": {
    "description": "User's full name, if available.",
    "example": "Albert Einstein",
    "flat_name": "host.user.full_name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full_name",
    "order": 2,
    "original_fieldset": "user",
    "short": "User's full name, if available.",
    "type": "keyword"
  },
  "host.user.group.id": {
    "description": "Unique identifier for the group on the system/platform.",
    "flat_name": "host.user.group.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "id",
    "order": 0,
    "original_fieldset": "user",
    "short": "Unique identifier for the group on the system/platform.",
    "type": "keyword"
  },
  "host.user.group.name": {
    "description": "Name of the group.",
    "flat_name": "host.user.group.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "original_fieldset": "user",
    "short": "Name of the group.",
    "type": "keyword"
  },
  "host.user.hash": {
    "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.",
    "flat_name": "host.user.hash",
    "ignore_above": 1024,
    "level": "extended",
    "name": "hash",
    "order": 4,
    "original_fieldset": "user",
    "short": "Unique user hash to correlate information for a user in anonymized form.",
    "type": "keyword"
  },
  "host.user.id": {
    "description": "One or multiple unique identifiers of the user.",
    "flat_name": "host.user.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 0,
    "original_fieldset": "user",
    "short": "One or multiple unique identifiers of the user.",
    "type": "keyword"
  },
  "host.user.name": {
    "description": "Short name or login of the user.",
    "example": "albert",
    "flat_name": "host.user.name",
    "ignore_above": 1024,
    "level": "core",
    "name": "name",
    "order": 1,
    "original_fieldset": "user",
    "short": "Short name or login of the user.",
    "type": "keyword"
  },
  "http.request.body.bytes": {
    "description": "Size in bytes of the request body.",
    "example": 887,
    "flat_name": "http.request.body.bytes",
    "format": "bytes",
    "level": "extended",
    "name": "request.body.bytes",
    "order": 7,
    "short": "Size in bytes of the request body.",
    "type": "long"
  },
  "http.request.body.content": {
    "description": "The full HTTP request body.",
    "example": "Hello world",
    "flat_name": "http.request.body.content",
    "ignore_above": 1024,
    "level": "extended",
    "name": "request.body.content",
    "order": 1,
    "short": "The full HTTP request body.",
    "type": "keyword"
  },
  "http.request.bytes": {
    "description": "Total size in bytes of the request (body and headers).",
    "example": 1437,
    "flat_name": "http.request.bytes",
    "format": "bytes",
    "level": "extended",
    "name": "request.bytes",
    "order": 6,
    "short": "Total size in bytes of the request (body and headers).",
    "type": "long"
  },
  "http.request.method": {
    "description": "HTTP request method.\nThe field value must be normalized to lowercase for querying. See the documentation section \"Implementing ECS\".",
    "example": "get, post, put",
    "flat_name": "http.request.method",
    "ignore_above": 1024,
    "level": "extended",
    "name": "request.method",
    "order": 0,
    "short": "HTTP request method.",
    "type": "keyword"
  },
  "http.request.referrer": {
    "description": "Referrer for this HTTP request.",
    "example": "https://blog.example.com/",
    "flat_name": "http.request.referrer",
    "ignore_above": 1024,
    "level": "extended",
    "name": "request.referrer",
    "order": 2,
    "short": "Referrer for this HTTP request.",
    "type": "keyword"
  },
  "http.response.body.bytes": {
    "description": "Size in bytes of the response body.",
    "example": 887,
    "flat_name": "http.response.body.bytes",
    "format": "bytes",
    "level": "extended",
    "name": "response.body.bytes",
    "order": 9,
    "short": "Size in bytes of the response body.",
    "type": "long"
  },
  "http.response.body.content": {
    "description": "The full HTTP response body.",
    "example": "Hello world",
    "flat_name": "http.response.body.content",
    "ignore_above": 1024,
    "level": "extended",
    "name": "response.body.content",
    "order": 4,
    "short": "The full HTTP response body.",
    "type": "keyword"
  },
  "http.response.bytes": {
    "description": "Total size in bytes of the response (body and headers).",
    "example": 1437,
    "flat_name": "http.response.bytes",
    "format": "bytes",
    "level": "extended",
    "name": "response.bytes",
    "order": 8,
    "short": "Total size in bytes of the response (body and headers).",
    "type": "long"
  },
  "http.response.status_code": {
    "description": "HTTP response status code.",
    "example": 404,
    "flat_name": "http.response.status_code",
    "format": "string",
    "level": "extended",
    "name": "response.status_code",
    "order": 3,
    "short": "HTTP response status code.",
    "type": "long"
  },
  "http.version": {
    "description": "HTTP version.",
    "example": 1.1,
    "flat_name": "http.version",
    "ignore_above": 1024,
    "level": "extended",
    "name": "version",
    "order": 5,
    "short": "HTTP version.",
    "type": "keyword"
  },
  "labels": {
    "description": "Custom key/value pairs.\nCan be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.\nExample: `docker` and `k8s` labels.",
    "example": {
      "application": "foo-bar",
      "env": "production"
    },
    "flat_name": "labels",
    "level": "core",
    "name": "labels",
    "object_type": "keyword",
    "order": 2,
    "short": "Custom key/value pairs.",
    "type": "object"
  },
  "log.level": {
    "description": "Original log level of the log event.\nSome examples are `warn`, `error`, `i`.",
    "example": "err",
    "flat_name": "log.level",
    "ignore_above": 1024,
    "level": "core",
    "name": "level",
    "order": 0,
    "short": "Log level of the log event.",
    "type": "keyword"
  },
  "log.logger": {
    "description": "The name of the logger inside an application. This is usually the name of the class which initialized the logger, or can be a custom name.",
    "example": "org.elasticsearch.bootstrap.Bootstrap",
    "flat_name": "log.logger",
    "ignore_above": 1024,
    "level": "core",
    "name": "logger",
    "order": 2,
    "short": "Name of the logger.",
    "type": "keyword"
  },
  "log.original": {
    "description": "This is the original log message and contains the full log message before splitting it up in multiple parts.\nIn contrast to the `message` field which can contain an extracted part of the log message, this field contains the original, full log message. It can have already some modifications applied like encoding or new lines removed to clean up the log message.\nThis field is not indexed and doc_values are disabled so it can't be queried but the value can be retrieved from `_source`.",
    "doc_values": false,
    "example": "Sep 19 08:26:10 localhost My log",
    "flat_name": "log.original",
    "ignore_above": 1024,
    "index": false,
    "level": "core",
    "name": "original",
    "order": 1,
    "short": "Original log message with light interpretation only (encoding, newlines).",
    "type": "keyword"
  },
  "message": {
    "description": "For log events the message field contains the log message, optimized for viewing in a log viewer.\nFor structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.\nIf multiple messages exist, they can be combined into one message.",
    "example": "Hello World",
    "flat_name": "message",
    "level": "core",
    "name": "message",
    "norms": false,
    "order": 3,
    "short": "Log message optimized for viewing in a log viewer.",
    "type": "text"
  },
  "network.application": {
    "description": "A name given to an application level protocol. This can be arbitrarily assigned for things like microservices, but also apply to things like skype, icq, facebook, twitter. This would be used in situations where the vendor or service can be decoded such as from the source/dest IP owners, ports, or wire format.\nThe field value must be normalized to lowercase for querying. See the documentation section \"Implementing ECS\".",
    "example": "aim",
    "flat_name": "network.application",
    "ignore_above": 1024,
    "level": "extended",
    "name": "application",
    "order": 4,
    "short": "Application level protocol name.",
    "type": "keyword"
  },
  "network.bytes": {
    "description": "Total bytes transferred in both directions.\nIf `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.",
    "example": 368,
    "flat_name": "network.bytes",
    "format": "bytes",
    "level": "core",
    "name": "bytes",
    "order": 9,
    "short": "Total bytes transferred in both directions.",
    "type": "long"
  },
  "network.community_id": {
    "description": "A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.\nLearn more at https://github.com/corelight/community-id-spec.",
    "example": "1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=",
    "flat_name": "network.community_id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "community_id",
    "order": 8,
    "short": "A hash of source and destination IPs and ports.",
    "type": "keyword"
  },
  "network.direction": {
    "description": "Direction of the network traffic.\nRecommended values are:\n  * inbound\n  * outbound\n  * internal\n  * external\n  * unknown\n\nWhen mapping events from a host-based monitoring context, populate this field from the host's point of view.\nWhen mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of your network perimeter.",
    "example": "inbound",
    "flat_name": "network.direction",
    "ignore_above": 1024,
    "level": "core",
    "name": "direction",
    "order": 6,
    "short": "Direction of the network traffic.",
    "type": "keyword"
  },
  "network.forwarded_ip": {
    "description": "Host IP address when the source IP address is the proxy.",
    "example": "192.1.1.2",
    "flat_name": "network.forwarded_ip",
    "level": "core",
    "name": "forwarded_ip",
    "order": 7,
    "short": "Host IP address when the source IP address is the proxy.",
    "type": "ip"
  },
  "network.iana_number": {
    "description": "IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.",
    "example": 6,
    "flat_name": "network.iana_number",
    "ignore_above": 1024,
    "level": "extended",
    "name": "iana_number",
    "order": 2,
    "short": "IANA Protocol Number.",
    "type": "keyword"
  },
  "network.name": {
    "description": "Name given by operators to sections of their network.",
    "example": "Guest Wifi",
    "flat_name": "network.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 0,
    "short": "Name given by operators to sections of their network.",
    "type": "keyword"
  },
  "network.packets": {
    "description": "Total packets transferred in both directions.\nIf `source.packets` and `destination.packets` are known, `network.packets` is their sum.",
    "example": 24,
    "flat_name": "network.packets",
    "level": "core",
    "name": "packets",
    "order": 10,
    "short": "Total packets transferred in both directions.",
    "type": "long"
  },
  "network.protocol": {
    "description": "L7 Network protocol name. ex. http, lumberjack, transport protocol.\nThe field value must be normalized to lowercase for querying. See the documentation section \"Implementing ECS\".",
    "example": "http",
    "flat_name": "network.protocol",
    "ignore_above": 1024,
    "level": "core",
    "name": "protocol",
    "order": 5,
    "short": "L7 Network protocol name.",
    "type": "keyword"
  },
  "network.transport": {
    "description": "Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)\nThe field value must be normalized to lowercase for querying. See the documentation section \"Implementing ECS\".",
    "example": "tcp",
    "flat_name": "network.transport",
    "ignore_above": 1024,
    "level": "core",
    "name": "transport",
    "order": 3,
    "short": "Protocol Name corresponding to the field `iana_number`.",
    "type": "keyword"
  },
  "network.type": {
    "description": "In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc\nThe field value must be normalized to lowercase for querying. See the documentation section \"Implementing ECS\".",
    "example": "ipv4",
    "flat_name": "network.type",
    "ignore_above": 1024,
    "level": "core",
    "name": "type",
    "order": 1,
    "short": "In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc",
    "type": "keyword"
  },
  "observer.geo.city_name": {
    "description": "City name.",
    "example": "Montreal",
    "flat_name": "observer.geo.city_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "city_name",
    "order": 4,
    "original_fieldset": "geo",
    "short": "City name.",
    "type": "keyword"
  },
  "observer.geo.continent_name": {
    "description": "Name of the continent.",
    "example": "North America",
    "flat_name": "observer.geo.continent_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "continent_name",
    "order": 1,
    "original_fieldset": "geo",
    "short": "Name of the continent.",
    "type": "keyword"
  },
  "observer.geo.country_iso_code": {
    "description": "Country ISO code.",
    "example": "CA",
    "flat_name": "observer.geo.country_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_iso_code",
    "order": 5,
    "original_fieldset": "geo",
    "short": "Country ISO code.",
    "type": "keyword"
  },
  "observer.geo.country_name": {
    "description": "Country name.",
    "example": "Canada",
    "flat_name": "observer.geo.country_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_name",
    "order": 2,
    "original_fieldset": "geo",
    "short": "Country name.",
    "type": "keyword"
  },
  "observer.geo.location": {
    "description": "Longitude and latitude.",
    "example": "{ \"lon\": -73.614830, \"lat\": 45.505918 }",
    "flat_name": "observer.geo.location",
    "level": "core",
    "name": "location",
    "order": 0,
    "original_fieldset": "geo",
    "short": "Longitude and latitude.",
    "type": "geo_point"
  },
  "observer.geo.name": {
    "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.",
    "example": "boston-dc",
    "flat_name": "observer.geo.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 7,
    "original_fieldset": "geo",
    "short": "User-defined description of a location.",
    "type": "keyword"
  },
  "observer.geo.region_iso_code": {
    "description": "Region ISO code.",
    "example": "CA-QC",
    "flat_name": "observer.geo.region_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_iso_code",
    "order": 6,
    "original_fieldset": "geo",
    "short": "Region ISO code.",
    "type": "keyword"
  },
  "observer.geo.region_name": {
    "description": "Region name.",
    "example": "Quebec",
    "flat_name": "observer.geo.region_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_name",
    "order": 3,
    "original_fieldset": "geo",
    "short": "Region name.",
    "type": "keyword"
  },
  "observer.hostname": {
    "description": "Hostname of the observer.",
    "flat_name": "observer.hostname",
    "ignore_above": 1024,
    "level": "core",
    "name": "hostname",
    "order": 2,
    "short": "Hostname of the observer.",
    "type": "keyword"
  },
  "observer.ip": {
    "description": "IP address of the observer.",
    "flat_name": "observer.ip",
    "level": "core",
    "name": "ip",
    "order": 1,
    "short": "IP address of the observer.",
    "type": "ip"
  },
  "observer.mac": {
    "description": "MAC address of the observer",
    "flat_name": "observer.mac",
    "ignore_above": 1024,
    "level": "core",
    "name": "mac",
    "order": 0,
    "short": "MAC address of the observer",
    "type": "keyword"
  },
  "observer.os.family": {
    "description": "OS family (such as redhat, debian, freebsd, windows).",
    "example": "debian",
    "flat_name": "observer.os.family",
    "ignore_above": 1024,
    "level": "extended",
    "name": "family",
    "order": 3,
    "original_fieldset": "os",
    "short": "OS family (such as redhat, debian, freebsd, windows).",
    "type": "keyword"
  },
  "observer.os.full": {
    "description": "Operating system name, including the version or code name.",
    "example": "Mac OS Mojave",
    "flat_name": "observer.os.full",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full",
    "order": 2,
    "original_fieldset": "os",
    "short": "Operating system name, including the version or code name.",
    "type": "keyword"
  },
  "observer.os.kernel": {
    "description": "Operating system kernel version as a raw string.",
    "example": "4.4.0-112-generic",
    "flat_name": "observer.os.kernel",
    "ignore_above": 1024,
    "level": "extended",
    "name": "kernel",
    "order": 5,
    "original_fieldset": "os",
    "short": "Operating system kernel version as a raw string.",
    "type": "keyword"
  },
  "observer.os.name": {
    "description": "Operating system name, without the version.",
    "example": "Mac OS X",
    "flat_name": "observer.os.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "original_fieldset": "os",
    "short": "Operating system name, without the version.",
    "type": "keyword"
  },
  "observer.os.platform": {
    "description": "Operating system platform (such centos, ubuntu, windows).",
    "example": "darwin",
    "flat_name": "observer.os.platform",
    "ignore_above": 1024,
    "level": "extended",
    "name": "platform",
    "order": 0,
    "original_fieldset": "os",
    "short": "Operating system platform (such centos, ubuntu, windows).",
    "type": "keyword"
  },
  "observer.os.version": {
    "description": "Operating system version as a raw string.",
    "example": "10.14.1",
    "flat_name": "observer.os.version",
    "ignore_above": 1024,
    "level": "extended",
    "name": "version",
    "order": 4,
    "original_fieldset": "os",
    "short": "Operating system version as a raw string.",
    "type": "keyword"
  },
  "observer.serial_number": {
    "description": "Observer serial number.",
    "flat_name": "observer.serial_number",
    "ignore_above": 1024,
    "level": "extended",
    "name": "serial_number",
    "order": 5,
    "short": "Observer serial number.",
    "type": "keyword"
  },
  "observer.type": {
    "description": "The type of the observer the data is coming from.\nThere is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.",
    "example": "firewall",
    "flat_name": "observer.type",
    "ignore_above": 1024,
    "level": "core",
    "name": "type",
    "order": 6,
    "short": "The type of the observer the data is coming from.",
    "type": "keyword"
  },
  "observer.vendor": {
    "description": "observer vendor information.",
    "flat_name": "observer.vendor",
    "ignore_above": 1024,
    "level": "core",
    "name": "vendor",
    "order": 3,
    "short": "observer vendor information.",
    "type": "keyword"
  },
  "observer.version": {
    "description": "Observer version.",
    "flat_name": "observer.version",
    "ignore_above": 1024,
    "level": "core",
    "name": "version",
    "order": 4,
    "short": "Observer version.",
    "type": "keyword"
  },
  "organization.id": {
    "description": "Unique identifier for the organization.",
    "flat_name": "organization.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "id",
    "order": 1,
    "short": "Unique identifier for the organization.",
    "type": "keyword"
  },
  "organization.name": {
    "description": "Organization name.",
    "flat_name": "organization.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 0,
    "short": "Organization name.",
    "type": "keyword"
  },
  "os.family": {
    "description": "OS family (such as redhat, debian, freebsd, windows).",
    "example": "debian",
    "flat_name": "os.family",
    "ignore_above": 1024,
    "level": "extended",
    "name": "family",
    "order": 3,
    "short": "OS family (such as redhat, debian, freebsd, windows).",
    "type": "keyword"
  },
  "os.full": {
    "description": "Operating system name, including the version or code name.",
    "example": "Mac OS Mojave",
    "flat_name": "os.full",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full",
    "order": 2,
    "short": "Operating system name, including the version or code name.",
    "type": "keyword"
  },
  "os.kernel": {
    "description": "Operating system kernel version as a raw string.",
    "example": "4.4.0-112-generic",
    "flat_name": "os.kernel",
    "ignore_above": 1024,
    "level": "extended",
    "name": "kernel",
    "order": 5,
    "short": "Operating system kernel version as a raw string.",
    "type": "keyword"
  },
  "os.name": {
    "description": "Operating system name, without the version.",
    "example": "Mac OS X",
    "flat_name": "os.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "short": "Operating system name, without the version.",
    "type": "keyword"
  },
  "os.platform": {
    "description": "Operating system platform (such centos, ubuntu, windows).",
    "example": "darwin",
    "flat_name": "os.platform",
    "ignore_above": 1024,
    "level": "extended",
    "name": "platform",
    "order": 0,
    "short": "Operating system platform (such centos, ubuntu, windows).",
    "type": "keyword"
  },
  "os.version": {
    "description": "Operating system version as a raw string.",
    "example": "10.14.1",
    "flat_name": "os.version",
    "ignore_above": 1024,
    "level": "extended",
    "name": "version",
    "order": 4,
    "short": "Operating system version as a raw string.",
    "type": "keyword"
  },
  "process.args": {
    "description": "Array of process arguments.\nMay be filtered to protect sensitive information.",
    "example": [
      "ssh",
      "-l",
      "user",
      "10.0.0.16"
    ],
    "flat_name": "process.args",
    "ignore_above": 1024,
    "level": "extended",
    "name": "args",
    "order": 4,
    "short": "Array of process arguments.",
    "type": "keyword"
  },
  "process.executable": {
    "description": "Absolute path to the process executable.",
    "example": "/usr/bin/ssh",
    "flat_name": "process.executable",
    "ignore_above": 1024,
    "level": "extended",
    "name": "executable",
    "order": 5,
    "short": "Absolute path to the process executable.",
    "type": "keyword"
  },
  "process.hash.md5": {
    "description": "MD5 hash.",
    "flat_name": "process.hash.md5",
    "ignore_above": 1024,
    "level": "extended",
    "name": "md5",
    "order": 0,
    "original_fieldset": "hash",
    "short": "MD5 hash.",
    "type": "keyword"
  },
  "process.hash.sha1": {
    "description": "SHA1 hash.",
    "flat_name": "process.hash.sha1",
    "ignore_above": 1024,
    "level": "extended",
    "name": "sha1",
    "order": 1,
    "original_fieldset": "hash",
    "short": "SHA1 hash.",
    "type": "keyword"
  },
  "process.hash.sha256": {
    "description": "SHA256 hash.",
    "flat_name": "process.hash.sha256",
    "ignore_above": 1024,
    "level": "extended",
    "name": "sha256",
    "order": 2,
    "original_fieldset": "hash",
    "short": "SHA256 hash.",
    "type": "keyword"
  },
  "process.hash.sha512": {
    "description": "SHA512 hash.",
    "flat_name": "process.hash.sha512",
    "ignore_above": 1024,
    "level": "extended",
    "name": "sha512",
    "order": 3,
    "original_fieldset": "hash",
    "short": "SHA512 hash.",
    "type": "keyword"
  },
  "process.name": {
    "description": "Process name.\nSometimes called program name or similar.",
    "example": "ssh",
    "flat_name": "process.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "short": "Process name.",
    "type": "keyword"
  },
  "process.pgid": {
    "description": "Identifier of the group of processes the process belongs to.",
    "flat_name": "process.pgid",
    "format": "string",
    "level": "extended",
    "name": "pgid",
    "order": 3,
    "short": "Identifier of the group of processes the process belongs to.",
    "type": "long"
  },
  "process.pid": {
    "description": "Process id.",
    "example": 4242,
    "flat_name": "process.pid",
    "format": "string",
    "level": "core",
    "name": "pid",
    "order": 0,
    "short": "Process id.",
    "type": "long"
  },
  "process.ppid": {
    "description": "Parent process' pid.",
    "example": 4241,
    "flat_name": "process.ppid",
    "format": "string",
    "level": "extended",
    "name": "ppid",
    "order": 2,
    "short": "Parent process' pid.",
    "type": "long"
  },
  "process.start": {
    "description": "The time the process started.",
    "example": "2016-05-23T08:05:34.853Z",
    "flat_name": "process.start",
    "level": "extended",
    "name": "start",
    "order": 9,
    "short": "The time the process started.",
    "type": "date"
  },
  "process.thread.id": {
    "description": "Thread ID.",
    "example": 4242,
    "flat_name": "process.thread.id",
    "format": "string",
    "level": "extended",
    "name": "thread.id",
    "order": 7,
    "short": "Thread ID.",
    "type": "long"
  },
  "process.thread.name": {
    "description": "Thread name.",
    "example": "thread-0",
    "flat_name": "process.thread.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "thread.name",
    "order": 8,
    "short": "Thread name.",
    "type": "keyword"
  },
  "process.title": {
    "description": "Process title.\nThe proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.",
    "flat_name": "process.title",
    "ignore_above": 1024,
    "level": "extended",
    "name": "title",
    "order": 6,
    "short": "Process title.",
    "type": "keyword"
  },
  "process.uptime": {
    "description": "Seconds the process has been up.",
    "example": 1325,
    "flat_name": "process.uptime",
    "level": "extended",
    "name": "uptime",
    "order": 10,
    "short": "Seconds the process has been up.",
    "type": "long"
  },
  "process.working_directory": {
    "description": "The working directory of the process.",
    "example": "/home/alice",
    "flat_name": "process.working_directory",
    "ignore_above": 1024,
    "level": "extended",
    "name": "working_directory",
    "order": 11,
    "short": "The working directory of the process.",
    "type": "keyword"
  },
  "related.ip": {
    "description": "All of the IPs seen on your event.",
    "flat_name": "related.ip",
    "level": "extended",
    "name": "ip",
    "order": 0,
    "short": "All of the IPs seen on your event.",
    "type": "ip"
  },
  "server.address": {
    "description": "Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is.",
    "flat_name": "server.address",
    "ignore_above": 1024,
    "level": "extended",
    "name": "address",
    "order": 0,
    "short": "Server network address.",
    "type": "keyword"
  },
  "server.as.number": {
    "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.",
    "example": 15169,
    "flat_name": "server.as.number",
    "level": "extended",
    "name": "number",
    "order": 0,
    "original_fieldset": "as",
    "short": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.",
    "type": "long"
  },
  "server.as.organization.name": {
    "description": "Organization name.",
    "example": "Google LLC",
    "flat_name": "server.as.organization.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "organization.name",
    "order": 1,
    "original_fieldset": "as",
    "short": "Organization name.",
    "type": "keyword"
  },
  "server.bytes": {
    "description": "Bytes sent from the server to the client.",
    "example": 184,
    "flat_name": "server.bytes",
    "format": "bytes",
    "level": "core",
    "name": "bytes",
    "order": 5,
    "short": "Bytes sent from the server to the client.",
    "type": "long"
  },
  "server.domain": {
    "description": "Server domain.",
    "flat_name": "server.domain",
    "ignore_above": 1024,
    "level": "core",
    "name": "domain",
    "order": 4,
    "short": "Server domain.",
    "type": "keyword"
  },
  "server.geo.city_name": {
    "description": "City name.",
    "example": "Montreal",
    "flat_name": "server.geo.city_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "city_name",
    "order": 4,
    "original_fieldset": "geo",
    "short": "City name.",
    "type": "keyword"
  },
  "server.geo.continent_name": {
    "description": "Name of the continent.",
    "example": "North America",
    "flat_name": "server.geo.continent_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "continent_name",
    "order": 1,
    "original_fieldset": "geo",
    "short": "Name of the continent.",
    "type": "keyword"
  },
  "server.geo.country_iso_code": {
    "description": "Country ISO code.",
    "example": "CA",
    "flat_name": "server.geo.country_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_iso_code",
    "order": 5,
    "original_fieldset": "geo",
    "short": "Country ISO code.",
    "type": "keyword"
  },
  "server.geo.country_name": {
    "description": "Country name.",
    "example": "Canada",
    "flat_name": "server.geo.country_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_name",
    "order": 2,
    "original_fieldset": "geo",
    "short": "Country name.",
    "type": "keyword"
  },
  "server.geo.location": {
    "description": "Longitude and latitude.",
    "example": "{ \"lon\": -73.614830, \"lat\": 45.505918 }",
    "flat_name": "server.geo.location",
    "level": "core",
    "name": "location",
    "order": 0,
    "original_fieldset": "geo",
    "short": "Longitude and latitude.",
    "type": "geo_point"
  },
  "server.geo.name": {
    "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.",
    "example": "boston-dc",
    "flat_name": "server.geo.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 7,
    "original_fieldset": "geo",
    "short": "User-defined description of a location.",
    "type": "keyword"
  },
  "server.geo.region_iso_code": {
    "description": "Region ISO code.",
    "example": "CA-QC",
    "flat_name": "server.geo.region_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_iso_code",
    "order": 6,
    "original_fieldset": "geo",
    "short": "Region ISO code.",
    "type": "keyword"
  },
  "server.geo.region_name": {
    "description": "Region name.",
    "example": "Quebec",
    "flat_name": "server.geo.region_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_name",
    "order": 3,
    "original_fieldset": "geo",
    "short": "Region name.",
    "type": "keyword"
  },
  "server.ip": {
    "description": "IP address of the server.\nCan be one or multiple IPv4 or IPv6 addresses.",
    "flat_name": "server.ip",
    "level": "core",
    "name": "ip",
    "order": 1,
    "short": "IP address of the server.",
    "type": "ip"
  },
  "server.mac": {
    "description": "MAC address of the server.",
    "flat_name": "server.mac",
    "ignore_above": 1024,
    "level": "core",
    "name": "mac",
    "order": 3,
    "short": "MAC address of the server.",
    "type": "keyword"
  },
  "server.nat.ip": {
    "description": "Translated ip of destination based NAT sessions (e.g. internet to private DMZ)\nTypically used with load balancers, firewalls, or routers.",
    "flat_name": "server.nat.ip",
    "level": "extended",
    "name": "nat.ip",
    "order": 7,
    "short": "Server NAT ip",
    "type": "ip"
  },
  "server.nat.port": {
    "description": "Translated port of destination based NAT sessions (e.g. internet to private DMZ)\nTypically used with load balancers, firewalls, or routers.",
    "flat_name": "server.nat.port",
    "format": "string",
    "level": "extended",
    "name": "nat.port",
    "order": 8,
    "short": "Server NAT port",
    "type": "long"
  },
  "server.packets": {
    "description": "Packets sent from the server to the client.",
    "example": 12,
    "flat_name": "server.packets",
    "level": "core",
    "name": "packets",
    "order": 6,
    "short": "Packets sent from the server to the client.",
    "type": "long"
  },
  "server.port": {
    "description": "Port of the server.",
    "flat_name": "server.port",
    "format": "string",
    "level": "core",
    "name": "port",
    "order": 2,
    "short": "Port of the server.",
    "type": "long"
  },
  "server.user.domain": {
    "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.",
    "flat_name": "server.user.domain",
    "ignore_above": 1024,
    "level": "extended",
    "name": "domain",
    "order": 5,
    "original_fieldset": "user",
    "short": "Name of the directory the user is a member of.",
    "type": "keyword"
  },
  "server.user.email": {
    "description": "User email address.",
    "flat_name": "server.user.email",
    "ignore_above": 1024,
    "level": "extended",
    "name": "email",
    "order": 3,
    "original_fieldset": "user",
    "short": "User email address.",
    "type": "keyword"
  },
  "server.user.full_name": {
    "description": "User's full name, if available.",
    "example": "Albert Einstein",
    "flat_name": "server.user.full_name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full_name",
    "order": 2,
    "original_fieldset": "user",
    "short": "User's full name, if available.",
    "type": "keyword"
  },
  "server.user.group.id": {
    "description": "Unique identifier for the group on the system/platform.",
    "flat_name": "server.user.group.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "id",
    "order": 0,
    "original_fieldset": "user",
    "short": "Unique identifier for the group on the system/platform.",
    "type": "keyword"
  },
  "server.user.group.name": {
    "description": "Name of the group.",
    "flat_name": "server.user.group.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "original_fieldset": "user",
    "short": "Name of the group.",
    "type": "keyword"
  },
  "server.user.hash": {
    "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.",
    "flat_name": "server.user.hash",
    "ignore_above": 1024,
    "level": "extended",
    "name": "hash",
    "order": 4,
    "original_fieldset": "user",
    "short": "Unique user hash to correlate information for a user in anonymized form.",
    "type": "keyword"
  },
  "server.user.id": {
    "description": "One or multiple unique identifiers of the user.",
    "flat_name": "server.user.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 0,
    "original_fieldset": "user",
    "short": "One or multiple unique identifiers of the user.",
    "type": "keyword"
  },
  "server.user.name": {
    "description": "Short name or login of the user.",
    "example": "albert",
    "flat_name": "server.user.name",
    "ignore_above": 1024,
    "level": "core",
    "name": "name",
    "order": 1,
    "original_fieldset": "user",
    "short": "Short name or login of the user.",
    "type": "keyword"
  },
  "service.ephemeral_id": {
    "description": "Ephemeral identifier of this service (if one exists).\nThis id normally changes across restarts, but `service.id` does not.",
    "example": "8a4f500f",
    "flat_name": "service.ephemeral_id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "ephemeral_id",
    "order": 5,
    "short": "Ephemeral identifier of this service.",
    "type": "keyword"
  },
  "service.id": {
    "description": "Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.\nThis id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.\nNote that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.",
    "example": "d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6",
    "flat_name": "service.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 0,
    "short": "Unique identifier of the running service.",
    "type": "keyword"
  },
  "service.name": {
    "description": "Name of the service data is collected from.\nThe name of the service is normally user given. This allows if two instances of the same service are running on the same machine they can be differentiated by the `service.name`.\nAlso it allows for distributed services that run on multiple hosts to correlate the related instances based on the name.\nIn the case of Elasticsearch the service.name could contain the cluster name. For Beats the service.name is by default a copy of the `service.type` field if no name is specified.",
    "example": "elasticsearch-metrics",
    "flat_name": "service.name",
    "ignore_above": 1024,
    "level": "core",
    "name": "name",
    "order": 1,
    "short": "Name of the service.",
    "type": "keyword"
  },
  "service.state": {
    "description": "Current state of the service.",
    "flat_name": "service.state",
    "ignore_above": 1024,
    "level": "core",
    "name": "state",
    "order": 3,
    "short": "Current state of the service.",
    "type": "keyword"
  },
  "service.type": {
    "description": "The type of the service data is collected from.\nThe type can be used to group and correlate logs and metrics from one service type.\nExample: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.",
    "example": "elasticsearch",
    "flat_name": "service.type",
    "ignore_above": 1024,
    "level": "core",
    "name": "type",
    "order": 2,
    "short": "The type of the service.",
    "type": "keyword"
  },
  "service.version": {
    "description": "Version of the service the data was collected from.\nThis allows to look at a data set only for a specific version of a service.",
    "example": "3.2.4",
    "flat_name": "service.version",
    "ignore_above": 1024,
    "level": "core",
    "name": "version",
    "order": 4,
    "short": "Version of the service.",
    "type": "keyword"
  },
  "source.address": {
    "description": "Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is.",
    "flat_name": "source.address",
    "ignore_above": 1024,
    "level": "extended",
    "name": "address",
    "order": 0,
    "short": "Source network address.",
    "type": "keyword"
  },
  "source.as.number": {
    "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.",
    "example": 15169,
    "flat_name": "source.as.number",
    "level": "extended",
    "name": "number",
    "order": 0,
    "original_fieldset": "as",
    "short": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.",
    "type": "long"
  },
  "source.as.organization.name": {
    "description": "Organization name.",
    "example": "Google LLC",
    "flat_name": "source.as.organization.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "organization.name",
    "order": 1,
    "original_fieldset": "as",
    "short": "Organization name.",
    "type": "keyword"
  },
  "source.bytes": {
    "description": "Bytes sent from the source to the destination.",
    "example": 184,
    "flat_name": "source.bytes",
    "format": "bytes",
    "level": "core",
    "name": "bytes",
    "order": 5,
    "short": "Bytes sent from the source to the destination.",
    "type": "long"
  },
  "source.domain": {
    "description": "Source domain.",
    "flat_name": "source.domain",
    "ignore_above": 1024,
    "level": "core",
    "name": "domain",
    "order": 4,
    "short": "Source domain.",
    "type": "keyword"
  },
  "source.geo.city_name": {
    "description": "City name.",
    "example": "Montreal",
    "flat_name": "source.geo.city_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "city_name",
    "order": 4,
    "original_fieldset": "geo",
    "short": "City name.",
    "type": "keyword"
  },
  "source.geo.continent_name": {
    "description": "Name of the continent.",
    "example": "North America",
    "flat_name": "source.geo.continent_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "continent_name",
    "order": 1,
    "original_fieldset": "geo",
    "short": "Name of the continent.",
    "type": "keyword"
  },
  "source.geo.country_iso_code": {
    "description": "Country ISO code.",
    "example": "CA",
    "flat_name": "source.geo.country_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_iso_code",
    "order": 5,
    "original_fieldset": "geo",
    "short": "Country ISO code.",
    "type": "keyword"
  },
  "source.geo.country_name": {
    "description": "Country name.",
    "example": "Canada",
    "flat_name": "source.geo.country_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "country_name",
    "order": 2,
    "original_fieldset": "geo",
    "short": "Country name.",
    "type": "keyword"
  },
  "source.geo.location": {
    "description": "Longitude and latitude.",
    "example": "{ \"lon\": -73.614830, \"lat\": 45.505918 }",
    "flat_name": "source.geo.location",
    "level": "core",
    "name": "location",
    "order": 0,
    "original_fieldset": "geo",
    "short": "Longitude and latitude.",
    "type": "geo_point"
  },
  "source.geo.name": {
    "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.",
    "example": "boston-dc",
    "flat_name": "source.geo.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 7,
    "original_fieldset": "geo",
    "short": "User-defined description of a location.",
    "type": "keyword"
  },
  "source.geo.region_iso_code": {
    "description": "Region ISO code.",
    "example": "CA-QC",
    "flat_name": "source.geo.region_iso_code",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_iso_code",
    "order": 6,
    "original_fieldset": "geo",
    "short": "Region ISO code.",
    "type": "keyword"
  },
  "source.geo.region_name": {
    "description": "Region name.",
    "example": "Quebec",
    "flat_name": "source.geo.region_name",
    "ignore_above": 1024,
    "level": "core",
    "name": "region_name",
    "order": 3,
    "original_fieldset": "geo",
    "short": "Region name.",
    "type": "keyword"
  },
  "source.ip": {
    "description": "IP address of the source.\nCan be one or multiple IPv4 or IPv6 addresses.",
    "flat_name": "source.ip",
    "level": "core",
    "name": "ip",
    "order": 1,
    "short": "IP address of the source.",
    "type": "ip"
  },
  "source.mac": {
    "description": "MAC address of the source.",
    "flat_name": "source.mac",
    "ignore_above": 1024,
    "level": "core",
    "name": "mac",
    "order": 3,
    "short": "MAC address of the source.",
    "type": "keyword"
  },
  "source.nat.ip": {
    "description": "Translated ip of source based NAT sessions (e.g. internal client to internet)\nTypically connections traversing load balancers, firewalls, or routers.",
    "flat_name": "source.nat.ip",
    "level": "extended",
    "name": "nat.ip",
    "order": 7,
    "short": "Source NAT ip",
    "type": "ip"
  },
  "source.nat.port": {
    "description": "Translated port of source based NAT sessions. (e.g. internal client to internet)\nTypically used with load balancers, firewalls, or routers.",
    "flat_name": "source.nat.port",
    "format": "string",
    "level": "extended",
    "name": "nat.port",
    "order": 8,
    "short": "Source NAT port",
    "type": "long"
  },
  "source.packets": {
    "description": "Packets sent from the source to the destination.",
    "example": 12,
    "flat_name": "source.packets",
    "level": "core",
    "name": "packets",
    "order": 6,
    "short": "Packets sent from the source to the destination.",
    "type": "long"
  },
  "source.port": {
    "description": "Port of the source.",
    "flat_name": "source.port",
    "format": "string",
    "level": "core",
    "name": "port",
    "order": 2,
    "short": "Port of the source.",
    "type": "long"
  },
  "source.user.domain": {
    "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.",
    "flat_name": "source.user.domain",
    "ignore_above": 1024,
    "level": "extended",
    "name": "domain",
    "order": 5,
    "original_fieldset": "user",
    "short": "Name of the directory the user is a member of.",
    "type": "keyword"
  },
  "source.user.email": {
    "description": "User email address.",
    "flat_name": "source.user.email",
    "ignore_above": 1024,
    "level": "extended",
    "name": "email",
    "order": 3,
    "original_fieldset": "user",
    "short": "User email address.",
    "type": "keyword"
  },
  "source.user.full_name": {
    "description": "User's full name, if available.",
    "example": "Albert Einstein",
    "flat_name": "source.user.full_name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full_name",
    "order": 2,
    "original_fieldset": "user",
    "short": "User's full name, if available.",
    "type": "keyword"
  },
  "source.user.group.id": {
    "description": "Unique identifier for the group on the system/platform.",
    "flat_name": "source.user.group.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "id",
    "order": 0,
    "original_fieldset": "user",
    "short": "Unique identifier for the group on the system/platform.",
    "type": "keyword"
  },
  "source.user.group.name": {
    "description": "Name of the group.",
    "flat_name": "source.user.group.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "original_fieldset": "user",
    "short": "Name of the group.",
    "type": "keyword"
  },
  "source.user.hash": {
    "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.",
    "flat_name": "source.user.hash",
    "ignore_above": 1024,
    "level": "extended",
    "name": "hash",
    "order": 4,
    "original_fieldset": "user",
    "short": "Unique user hash to correlate information for a user in anonymized form.",
    "type": "keyword"
  },
  "source.user.id": {
    "description": "One or multiple unique identifiers of the user.",
    "flat_name": "source.user.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 0,
    "original_fieldset": "user",
    "short": "One or multiple unique identifiers of the user.",
    "type": "keyword"
  },
  "source.user.name": {
    "description": "Short name or login of the user.",
    "example": "albert",
    "flat_name": "source.user.name",
    "ignore_above": 1024,
    "level": "core",
    "name": "name",
    "order": 1,
    "original_fieldset": "user",
    "short": "Short name or login of the user.",
    "type": "keyword"
  },
  "tags": {
    "description": "List of keywords used to tag each event.",
    "example": "[\"production\", \"env2\"]",
    "flat_name": "tags",
    "ignore_above": 1024,
    "level": "core",
    "name": "tags",
    "order": 1,
    "short": "List of keywords used to tag each event.",
    "type": "keyword"
  },
  "trace.id": {
    "description": "Unique identifier of the trace.\nA trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.",
    "example": "4bf92f3577b34da6a3ce929d0e0e4736",
    "flat_name": "trace.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "trace.id",
    "order": 0,
    "short": "Unique identifier of the trace.",
    "type": "keyword"
  },
  "transaction.id": {
    "description": "Unique identifier of the transaction.\nA transaction is the highest level of work measured within a service, such as a request to a server.",
    "example": "00f067aa0ba902b7",
    "flat_name": "transaction.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "transaction.id",
    "order": 1,
    "short": "Unique identifier of the transaction.",
    "type": "keyword"
  },
  "url.domain": {
    "description": "Domain of the url, such as \"www.elastic.co\".\nIn some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.",
    "example": "www.elastic.co",
    "flat_name": "url.domain",
    "ignore_above": 1024,
    "level": "extended",
    "name": "domain",
    "order": 3,
    "short": "Domain of the url.",
    "type": "keyword"
  },
  "url.fragment": {
    "description": "Portion of the url after the `#`, such as \"top\".\nThe `#` is not part of the fragment.",
    "flat_name": "url.fragment",
    "ignore_above": 1024,
    "level": "extended",
    "name": "fragment",
    "order": 7,
    "short": "Portion of the url after the `#`.",
    "type": "keyword"
  },
  "url.full": {
    "description": "If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.",
    "example": "https://www.elastic.co:443/search?q=elasticsearch#top",
    "flat_name": "url.full",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full",
    "order": 1,
    "short": "Full unparsed URL.",
    "type": "keyword"
  },
  "url.original": {
    "description": "Unmodified original url as seen in the event source.\nNote that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.\nThis field is meant to represent the URL as it was observed, complete or not.",
    "example": "https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch",
    "flat_name": "url.original",
    "ignore_above": 1024,
    "level": "extended",
    "name": "original",
    "order": 0,
    "short": "Unmodified original url as seen in the event source.",
    "type": "keyword"
  },
  "url.password": {
    "description": "Password of the request.",
    "flat_name": "url.password",
    "ignore_above": 1024,
    "level": "extended",
    "name": "password",
    "order": 9,
    "short": "Password of the request.",
    "type": "keyword"
  },
  "url.path": {
    "description": "Path of the request, such as \"/search\".",
    "flat_name": "url.path",
    "ignore_above": 1024,
    "level": "extended",
    "name": "path",
    "order": 5,
    "short": "Path of the request, such as \"/search\".",
    "type": "keyword"
  },
  "url.port": {
    "description": "Port of the request, such as 443.",
    "example": 443,
    "flat_name": "url.port",
    "format": "string",
    "level": "extended",
    "name": "port",
    "order": 4,
    "short": "Port of the request, such as 443.",
    "type": "long"
  },
  "url.query": {
    "description": "The query field describes the query string of the request, such as \"q=elasticsearch\".\nThe `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.",
    "flat_name": "url.query",
    "ignore_above": 1024,
    "level": "extended",
    "name": "query",
    "order": 6,
    "short": "Query string of the request.",
    "type": "keyword"
  },
  "url.scheme": {
    "description": "Scheme of the request, such as \"https\".\nNote: The `:` is not part of the scheme.",
    "example": "https",
    "flat_name": "url.scheme",
    "ignore_above": 1024,
    "level": "extended",
    "name": "scheme",
    "order": 2,
    "short": "Scheme of the url.",
    "type": "keyword"
  },
  "url.username": {
    "description": "Username of the request.",
    "flat_name": "url.username",
    "ignore_above": 1024,
    "level": "extended",
    "name": "username",
    "order": 8,
    "short": "Username of the request.",
    "type": "keyword"
  },
  "user.domain": {
    "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.",
    "flat_name": "user.domain",
    "ignore_above": 1024,
    "level": "extended",
    "name": "domain",
    "order": 5,
    "short": "Name of the directory the user is a member of.",
    "type": "keyword"
  },
  "user.email": {
    "description": "User email address.",
    "flat_name": "user.email",
    "ignore_above": 1024,
    "level": "extended",
    "name": "email",
    "order": 3,
    "short": "User email address.",
    "type": "keyword"
  },
  "user.full_name": {
    "description": "User's full name, if available.",
    "example": "Albert Einstein",
    "flat_name": "user.full_name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full_name",
    "order": 2,
    "short": "User's full name, if available.",
    "type": "keyword"
  },
  "user.group.id": {
    "description": "Unique identifier for the group on the system/platform.",
    "flat_name": "user.group.id",
    "ignore_above": 1024,
    "level": "extended",
    "name": "id",
    "order": 0,
    "original_fieldset": "group",
    "short": "Unique identifier for the group on the system/platform.",
    "type": "keyword"
  },
  "user.group.name": {
    "description": "Name of the group.",
    "flat_name": "user.group.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "original_fieldset": "group",
    "short": "Name of the group.",
    "type": "keyword"
  },
  "user.hash": {
    "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.",
    "flat_name": "user.hash",
    "ignore_above": 1024,
    "level": "extended",
    "name": "hash",
    "order": 4,
    "short": "Unique user hash to correlate information for a user in anonymized form.",
    "type": "keyword"
  },
  "user.id": {
    "description": "One or multiple unique identifiers of the user.",
    "flat_name": "user.id",
    "ignore_above": 1024,
    "level": "core",
    "name": "id",
    "order": 0,
    "short": "One or multiple unique identifiers of the user.",
    "type": "keyword"
  },
  "user.name": {
    "description": "Short name or login of the user.",
    "example": "albert",
    "flat_name": "user.name",
    "ignore_above": 1024,
    "level": "core",
    "name": "name",
    "order": 1,
    "short": "Short name or login of the user.",
    "type": "keyword"
  },
  "user_agent.device.name": {
    "description": "Name of the device.",
    "example": "iPhone",
    "flat_name": "user_agent.device.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "device.name",
    "order": 3,
    "short": "Name of the device.",
    "type": "keyword"
  },
  "user_agent.name": {
    "description": "Name of the user agent.",
    "example": "Safari",
    "flat_name": "user_agent.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "short": "Name of the user agent.",
    "type": "keyword"
  },
  "user_agent.original": {
    "description": "Unparsed version of the user_agent.",
    "example": "Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1",
    "flat_name": "user_agent.original",
    "ignore_above": 1024,
    "level": "extended",
    "name": "original",
    "order": 0,
    "short": "Unparsed version of the user_agent.",
    "type": "keyword"
  },
  "user_agent.os.family": {
    "description": "OS family (such as redhat, debian, freebsd, windows).",
    "example": "debian",
    "flat_name": "user_agent.os.family",
    "ignore_above": 1024,
    "level": "extended",
    "name": "family",
    "order": 3,
    "original_fieldset": "os",
    "short": "OS family (such as redhat, debian, freebsd, windows).",
    "type": "keyword"
  },
  "user_agent.os.full": {
    "description": "Operating system name, including the version or code name.",
    "example": "Mac OS Mojave",
    "flat_name": "user_agent.os.full",
    "ignore_above": 1024,
    "level": "extended",
    "name": "full",
    "order": 2,
    "original_fieldset": "os",
    "short": "Operating system name, including the version or code name.",
    "type": "keyword"
  },
  "user_agent.os.kernel": {
    "description": "Operating system kernel version as a raw string.",
    "example": "4.4.0-112-generic",
    "flat_name": "user_agent.os.kernel",
    "ignore_above": 1024,
    "level": "extended",
    "name": "kernel",
    "order": 5,
    "original_fieldset": "os",
    "short": "Operating system kernel version as a raw string.",
    "type": "keyword"
  },
  "user_agent.os.name": {
    "description": "Operating system name, without the version.",
    "example": "Mac OS X",
    "flat_name": "user_agent.os.name",
    "ignore_above": 1024,
    "level": "extended",
    "name": "name",
    "order": 1,
    "original_fieldset": "os",
    "short": "Operating system name, without the version.",
    "type": "keyword"
  },
  "user_agent.os.platform": {
    "description": "Operating system platform (such centos, ubuntu, windows).",
    "example": "darwin",
    "flat_name": "user_agent.os.platform",
    "ignore_above": 1024,
    "level": "extended",
    "name": "platform",
    "order": 0,
    "original_fieldset": "os",
    "short": "Operating system platform (such centos, ubuntu, windows).",
    "type": "keyword"
  },
  "user_agent.os.version": {
    "description": "Operating system version as a raw string.",
    "example": "10.14.1",
    "flat_name": "user_agent.os.version",
    "ignore_above": 1024,
    "level": "extended",
    "name": "version",
    "order": 4,
    "original_fieldset": "os",
    "short": "Operating system version as a raw string.",
    "type": "keyword"
  },
  "user_agent.version": {
    "description": "Version of the user agent.",
    "example": 12.0,
    "flat_name": "user_agent.version",
    "ignore_above": 1024,
    "level": "extended",
    "name": "version",
    "order": 2,
    "short": "Version of the user agent.",
    "type": "keyword"
  }
}